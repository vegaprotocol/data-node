// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/data-node/subscribers (interfaces: SqlOrderStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "code.vegaprotocol.io/data-node/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockSqlOrderStore is a mock of SqlOrderStore interface.
type MockSqlOrderStore struct {
	ctrl     *gomock.Controller
	recorder *MockSqlOrderStoreMockRecorder
}

// MockSqlOrderStoreMockRecorder is the mock recorder for MockSqlOrderStore.
type MockSqlOrderStoreMockRecorder struct {
	mock *MockSqlOrderStore
}

// NewMockSqlOrderStore creates a new mock instance.
func NewMockSqlOrderStore(ctrl *gomock.Controller) *MockSqlOrderStore {
	mock := &MockSqlOrderStore{ctrl: ctrl}
	mock.recorder = &MockSqlOrderStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlOrderStore) EXPECT() *MockSqlOrderStoreMockRecorder {
	return m.recorder
}

// GetLiveOrders mocks base method.
func (m *MockSqlOrderStore) GetLiveOrders(arg0 context.Context) ([]entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiveOrders", arg0)
	ret0, _ := ret[0].([]entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiveOrders indicates an expected call of GetLiveOrders.
func (mr *MockSqlOrderStoreMockRecorder) GetLiveOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiveOrders", reflect.TypeOf((*MockSqlOrderStore)(nil).GetLiveOrders), arg0)
}

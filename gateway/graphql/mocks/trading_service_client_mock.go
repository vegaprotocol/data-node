// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/data-node/gateway/graphql (interfaces: TradingProxyServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	v1 "code.vegaprotocol.io/data-node/proto/api/v1"
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockTradingProxyServiceClient is a mock of TradingProxyServiceClient interface
type MockTradingProxyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTradingProxyServiceClientMockRecorder
}

// MockTradingProxyServiceClientMockRecorder is the mock recorder for MockTradingProxyServiceClient
type MockTradingProxyServiceClientMockRecorder struct {
	mock *MockTradingProxyServiceClient
}

// NewMockTradingProxyServiceClient creates a new mock instance
func NewMockTradingProxyServiceClient(ctrl *gomock.Controller) *MockTradingProxyServiceClient {
	mock := &MockTradingProxyServiceClient{ctrl: ctrl}
	mock.recorder = &MockTradingProxyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTradingProxyServiceClient) EXPECT() *MockTradingProxyServiceClientMockRecorder {
	return m.recorder
}

// SubmitTransaction mocks base method
func (m *MockTradingProxyServiceClient) SubmitTransaction(arg0 context.Context, arg1 *v1.SubmitTransactionRequest, arg2 ...grpc.CallOption) (*v1.SubmitTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitTransaction", varargs...)
	ret0, _ := ret[0].(*v1.SubmitTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTransaction indicates an expected call of SubmitTransaction
func (mr *MockTradingProxyServiceClientMockRecorder) SubmitTransaction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTransaction", reflect.TypeOf((*MockTradingProxyServiceClient)(nil).SubmitTransaction), varargs...)
}

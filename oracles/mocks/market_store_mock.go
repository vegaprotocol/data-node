// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/data-node/oracles (interfaces: OracleDataStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	v1 "code.vegaprotocol.io/protos/vega/oracles/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockOracleDataStore is a mock of OracleDataStore interface.
type MockOracleDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockOracleDataStoreMockRecorder
}

// MockOracleDataStoreMockRecorder is the mock recorder for MockOracleDataStore.
type MockOracleDataStoreMockRecorder struct {
	mock *MockOracleDataStore
}

// NewMockOracleDataStore creates a new mock instance.
func NewMockOracleDataStore(ctrl *gomock.Controller) *MockOracleDataStore {
	mock := &MockOracleDataStore{ctrl: ctrl}
	mock.recorder = &MockOracleDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOracleDataStore) EXPECT() *MockOracleDataStoreMockRecorder {
	return m.recorder
}

// GetBySpecID mocks base method.
func (m *MockOracleDataStore) GetBySpecID(arg0 string) (*v1.OracleData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySpecID", arg0)
	ret0, _ := ret[0].(*v1.OracleData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySpecID indicates an expected call of GetBySpecID.
func (mr *MockOracleDataStoreMockRecorder) GetBySpecID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySpecID", reflect.TypeOf((*MockOracleDataStore)(nil).GetBySpecID), arg0)
}

// List mocks base method.
func (m *MockOracleDataStore) List() ([]*v1.OracleData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*v1.OracleData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOracleDataStoreMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOracleDataStore)(nil).List))
}

// Post mocks base method.
func (m *MockOracleDataStore) Post(arg0 *v1.OracleData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockOracleDataStoreMockRecorder) Post(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockOracleDataStore)(nil).Post), arg0)
}

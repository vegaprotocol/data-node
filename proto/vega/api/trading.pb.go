// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vega/api/trading.proto

package api

import (
	vega "code.vegaprotocol.io/data-node/proto/vega"
	v1 "code.vegaprotocol.io/data-node/proto/vega/commands/v1"
	v11 "code.vegaprotocol.io/data-node/proto/vega/events/v1"
	v12 "code.vegaprotocol.io/data-node/proto/vega/oracles/v1"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Blockchain transaction type
type SubmitTransactionRequest_Type int32

const (
	SubmitTransactionRequest_TYPE_UNSPECIFIED SubmitTransactionRequest_Type = 0
	// The transaction will be submitted without waiting for response
	SubmitTransactionRequest_TYPE_ASYNC SubmitTransactionRequest_Type = 1
	// The transaction will be submitted, and blocking until the
	// tendermint mempool return a response
	SubmitTransactionRequest_TYPE_SYNC SubmitTransactionRequest_Type = 2
	// The transaction will submitted, and blocking until the tendermint
	// network will have committed it into a block
	SubmitTransactionRequest_TYPE_COMMIT SubmitTransactionRequest_Type = 3
)

var SubmitTransactionRequest_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "TYPE_ASYNC",
	2: "TYPE_SYNC",
	3: "TYPE_COMMIT",
}

var SubmitTransactionRequest_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"TYPE_ASYNC":       1,
	"TYPE_SYNC":        2,
	"TYPE_COMMIT":      3,
}

func (x SubmitTransactionRequest_Type) String() string {
	return proto.EnumName(SubmitTransactionRequest_Type_name, int32(x))
}

func (SubmitTransactionRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{2, 0}
}

// Blockchain transaction type
type SubmitTransactionV2Request_Type int32

const (
	SubmitTransactionV2Request_TYPE_UNSPECIFIED SubmitTransactionV2Request_Type = 0
	// The transaction will be submitted without waiting for response
	SubmitTransactionV2Request_TYPE_ASYNC SubmitTransactionV2Request_Type = 1
	// The transaction will be submitted, and blocking until the
	// tendermint mempool return a response
	SubmitTransactionV2Request_TYPE_SYNC SubmitTransactionV2Request_Type = 2
	// The transaction will submitted, and blocking until the tendermint
	// network will have committed it into a block
	SubmitTransactionV2Request_TYPE_COMMIT SubmitTransactionV2Request_Type = 3
)

var SubmitTransactionV2Request_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "TYPE_ASYNC",
	2: "TYPE_SYNC",
	3: "TYPE_COMMIT",
}

var SubmitTransactionV2Request_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"TYPE_ASYNC":       1,
	"TYPE_SYNC":        2,
	"TYPE_COMMIT":      3,
}

func (x SubmitTransactionV2Request_Type) String() string {
	return proto.EnumName(SubmitTransactionV2Request_Type_name, int32(x))
}

func (SubmitTransactionV2Request_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{4, 0}
}

// Request for a new event sent by the blockchain queue to be propagated on Vega
type PropagateChainEventRequest struct {
	// Chain event
	Evt *v1.ChainEvent `protobuf:"bytes,1,opt,name=evt,proto3" json:"evt,omitempty"`
	// Public key
	PubKey string `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// Signature
	Signature            []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PropagateChainEventRequest) Reset()         { *m = PropagateChainEventRequest{} }
func (m *PropagateChainEventRequest) String() string { return proto.CompactTextString(m) }
func (*PropagateChainEventRequest) ProtoMessage()    {}
func (*PropagateChainEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{0}
}

func (m *PropagateChainEventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PropagateChainEventRequest.Unmarshal(m, b)
}
func (m *PropagateChainEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PropagateChainEventRequest.Marshal(b, m, deterministic)
}
func (m *PropagateChainEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropagateChainEventRequest.Merge(m, src)
}
func (m *PropagateChainEventRequest) XXX_Size() int {
	return xxx_messageInfo_PropagateChainEventRequest.Size(m)
}
func (m *PropagateChainEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PropagateChainEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PropagateChainEventRequest proto.InternalMessageInfo

func (m *PropagateChainEventRequest) GetEvt() *v1.ChainEvent {
	if m != nil {
		return m.Evt
	}
	return nil
}

func (m *PropagateChainEventRequest) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *PropagateChainEventRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Response for a new event sent by the blockchain queue to be propagated on Vega
type PropagateChainEventResponse struct {
	// Success will be true if the event was accepted by the node,
	// **Important** - success does not mean that the event is confirmed by consensus
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PropagateChainEventResponse) Reset()         { *m = PropagateChainEventResponse{} }
func (m *PropagateChainEventResponse) String() string { return proto.CompactTextString(m) }
func (*PropagateChainEventResponse) ProtoMessage()    {}
func (*PropagateChainEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{1}
}

func (m *PropagateChainEventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PropagateChainEventResponse.Unmarshal(m, b)
}
func (m *PropagateChainEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PropagateChainEventResponse.Marshal(b, m, deterministic)
}
func (m *PropagateChainEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropagateChainEventResponse.Merge(m, src)
}
func (m *PropagateChainEventResponse) XXX_Size() int {
	return xxx_messageInfo_PropagateChainEventResponse.Size(m)
}
func (m *PropagateChainEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PropagateChainEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PropagateChainEventResponse proto.InternalMessageInfo

func (m *PropagateChainEventResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Request for submitting a transaction on Vega
type SubmitTransactionRequest struct {
	// A bundle of signed payload and signature, to form a transaction that will be submitted to the Vega blockchain
	Tx *vega.SignedBundle `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// Type of transaction request, for example ASYNC, meaning the transaction will be submitted and not block on a response
	Type                 SubmitTransactionRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=vega.api.v1.SubmitTransactionRequest_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *SubmitTransactionRequest) Reset()         { *m = SubmitTransactionRequest{} }
func (m *SubmitTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitTransactionRequest) ProtoMessage()    {}
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{2}
}

func (m *SubmitTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTransactionRequest.Unmarshal(m, b)
}
func (m *SubmitTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTransactionRequest.Marshal(b, m, deterministic)
}
func (m *SubmitTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTransactionRequest.Merge(m, src)
}
func (m *SubmitTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitTransactionRequest.Size(m)
}
func (m *SubmitTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTransactionRequest proto.InternalMessageInfo

func (m *SubmitTransactionRequest) GetTx() *vega.SignedBundle {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *SubmitTransactionRequest) GetType() SubmitTransactionRequest_Type {
	if m != nil {
		return m.Type
	}
	return SubmitTransactionRequest_TYPE_UNSPECIFIED
}

// Response for submitting a transaction on Vega
type SubmitTransactionResponse struct {
	// Success will be true if the transaction was accepted by the node,
	// **Important** - success does not mean that the event is confirmed by consensus
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitTransactionResponse) Reset()         { *m = SubmitTransactionResponse{} }
func (m *SubmitTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitTransactionResponse) ProtoMessage()    {}
func (*SubmitTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{3}
}

func (m *SubmitTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTransactionResponse.Unmarshal(m, b)
}
func (m *SubmitTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTransactionResponse.Marshal(b, m, deterministic)
}
func (m *SubmitTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTransactionResponse.Merge(m, src)
}
func (m *SubmitTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_SubmitTransactionResponse.Size(m)
}
func (m *SubmitTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTransactionResponse proto.InternalMessageInfo

func (m *SubmitTransactionResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Request for submitting a transaction v2 on Vega
type SubmitTransactionV2Request struct {
	// A bundle of signed payload and signature, to form a transaction that will be submitted to the Vega blockchain
	Tx *v1.Transaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// Type of transaction request, for example ASYNC, meaning the transaction will be submitted and not block on a response
	Type                 SubmitTransactionV2Request_Type `protobuf:"varint,2,opt,name=type,proto3,enum=vega.api.v1.SubmitTransactionV2Request_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *SubmitTransactionV2Request) Reset()         { *m = SubmitTransactionV2Request{} }
func (m *SubmitTransactionV2Request) String() string { return proto.CompactTextString(m) }
func (*SubmitTransactionV2Request) ProtoMessage()    {}
func (*SubmitTransactionV2Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{4}
}

func (m *SubmitTransactionV2Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTransactionV2Request.Unmarshal(m, b)
}
func (m *SubmitTransactionV2Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTransactionV2Request.Marshal(b, m, deterministic)
}
func (m *SubmitTransactionV2Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTransactionV2Request.Merge(m, src)
}
func (m *SubmitTransactionV2Request) XXX_Size() int {
	return xxx_messageInfo_SubmitTransactionV2Request.Size(m)
}
func (m *SubmitTransactionV2Request) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTransactionV2Request.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTransactionV2Request proto.InternalMessageInfo

func (m *SubmitTransactionV2Request) GetTx() *v1.Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *SubmitTransactionV2Request) GetType() SubmitTransactionV2Request_Type {
	if m != nil {
		return m.Type
	}
	return SubmitTransactionV2Request_TYPE_UNSPECIFIED
}

// Response for submitting a transaction v2 on Vega
type SubmitTransactionV2Response struct {
	// Success will be true if the transaction was accepted by the node,
	// **Important** - success does not mean that the event is confirmed by consensus
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitTransactionV2Response) Reset()         { *m = SubmitTransactionV2Response{} }
func (m *SubmitTransactionV2Response) String() string { return proto.CompactTextString(m) }
func (*SubmitTransactionV2Response) ProtoMessage()    {}
func (*SubmitTransactionV2Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{5}
}

func (m *SubmitTransactionV2Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTransactionV2Response.Unmarshal(m, b)
}
func (m *SubmitTransactionV2Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTransactionV2Response.Marshal(b, m, deterministic)
}
func (m *SubmitTransactionV2Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTransactionV2Response.Merge(m, src)
}
func (m *SubmitTransactionV2Response) XXX_Size() int {
	return xxx_messageInfo_SubmitTransactionV2Response.Size(m)
}
func (m *SubmitTransactionV2Response) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTransactionV2Response.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTransactionV2Response proto.InternalMessageInfo

func (m *SubmitTransactionV2Response) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Request for preparing a withdrawal
type PrepareWithdrawRequest struct {
	// An asset withdrawal
	Withdraw             *v1.WithdrawSubmission `protobuf:"bytes,1,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PrepareWithdrawRequest) Reset()         { *m = PrepareWithdrawRequest{} }
func (m *PrepareWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*PrepareWithdrawRequest) ProtoMessage()    {}
func (*PrepareWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{6}
}

func (m *PrepareWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareWithdrawRequest.Unmarshal(m, b)
}
func (m *PrepareWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareWithdrawRequest.Marshal(b, m, deterministic)
}
func (m *PrepareWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareWithdrawRequest.Merge(m, src)
}
func (m *PrepareWithdrawRequest) XXX_Size() int {
	return xxx_messageInfo_PrepareWithdrawRequest.Size(m)
}
func (m *PrepareWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareWithdrawRequest proto.InternalMessageInfo

func (m *PrepareWithdrawRequest) GetWithdraw() *v1.WithdrawSubmission {
	if m != nil {
		return m.Withdraw
	}
	return nil
}

// Response for preparing a withdrawal
type PrepareWithdrawResponse struct {
	// Blob is an encoded representation of the withdrawal ready to sign using the Vega Wallet and then submit as a transaction
	Blob                 []byte   `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareWithdrawResponse) Reset()         { *m = PrepareWithdrawResponse{} }
func (m *PrepareWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*PrepareWithdrawResponse) ProtoMessage()    {}
func (*PrepareWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{7}
}

func (m *PrepareWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareWithdrawResponse.Unmarshal(m, b)
}
func (m *PrepareWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareWithdrawResponse.Marshal(b, m, deterministic)
}
func (m *PrepareWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareWithdrawResponse.Merge(m, src)
}
func (m *PrepareWithdrawResponse) XXX_Size() int {
	return xxx_messageInfo_PrepareWithdrawResponse.Size(m)
}
func (m *PrepareWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareWithdrawResponse proto.InternalMessageInfo

func (m *PrepareWithdrawResponse) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

// Response for preparing an order submission
type PrepareSubmitOrderResponse struct {
	// Blob is an encoded representation of the order submission ready to sign using the Vega Wallet and then submit as a transaction
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	// Submission identifier (order reference)
	SubmitId             string   `protobuf:"bytes,2,opt,name=submit_id,json=submitId,proto3" json:"submit_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareSubmitOrderResponse) Reset()         { *m = PrepareSubmitOrderResponse{} }
func (m *PrepareSubmitOrderResponse) String() string { return proto.CompactTextString(m) }
func (*PrepareSubmitOrderResponse) ProtoMessage()    {}
func (*PrepareSubmitOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{8}
}

func (m *PrepareSubmitOrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareSubmitOrderResponse.Unmarshal(m, b)
}
func (m *PrepareSubmitOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareSubmitOrderResponse.Marshal(b, m, deterministic)
}
func (m *PrepareSubmitOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareSubmitOrderResponse.Merge(m, src)
}
func (m *PrepareSubmitOrderResponse) XXX_Size() int {
	return xxx_messageInfo_PrepareSubmitOrderResponse.Size(m)
}
func (m *PrepareSubmitOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareSubmitOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareSubmitOrderResponse proto.InternalMessageInfo

func (m *PrepareSubmitOrderResponse) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

func (m *PrepareSubmitOrderResponse) GetSubmitId() string {
	if m != nil {
		return m.SubmitId
	}
	return ""
}

// Response for preparing an order cancellation
type PrepareCancelOrderResponse struct {
	// Blob is an encoded representation of the order cancellation ready to sign using the Vega Wallet and then submit as a transaction
	Blob                 []byte   `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareCancelOrderResponse) Reset()         { *m = PrepareCancelOrderResponse{} }
func (m *PrepareCancelOrderResponse) String() string { return proto.CompactTextString(m) }
func (*PrepareCancelOrderResponse) ProtoMessage()    {}
func (*PrepareCancelOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{9}
}

func (m *PrepareCancelOrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareCancelOrderResponse.Unmarshal(m, b)
}
func (m *PrepareCancelOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareCancelOrderResponse.Marshal(b, m, deterministic)
}
func (m *PrepareCancelOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareCancelOrderResponse.Merge(m, src)
}
func (m *PrepareCancelOrderResponse) XXX_Size() int {
	return xxx_messageInfo_PrepareCancelOrderResponse.Size(m)
}
func (m *PrepareCancelOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareCancelOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareCancelOrderResponse proto.InternalMessageInfo

func (m *PrepareCancelOrderResponse) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

// Response for preparing an order amendment
type PrepareAmendOrderResponse struct {
	// Blob is an encoded representation of the order amendment ready to sign using the Vega Wallet and then submit as a transaction.
	Blob                 []byte   `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareAmendOrderResponse) Reset()         { *m = PrepareAmendOrderResponse{} }
func (m *PrepareAmendOrderResponse) String() string { return proto.CompactTextString(m) }
func (*PrepareAmendOrderResponse) ProtoMessage()    {}
func (*PrepareAmendOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{10}
}

func (m *PrepareAmendOrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareAmendOrderResponse.Unmarshal(m, b)
}
func (m *PrepareAmendOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareAmendOrderResponse.Marshal(b, m, deterministic)
}
func (m *PrepareAmendOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareAmendOrderResponse.Merge(m, src)
}
func (m *PrepareAmendOrderResponse) XXX_Size() int {
	return xxx_messageInfo_PrepareAmendOrderResponse.Size(m)
}
func (m *PrepareAmendOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareAmendOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareAmendOrderResponse proto.InternalMessageInfo

func (m *PrepareAmendOrderResponse) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

// Request to submit a new order
type PrepareSubmitOrderRequest struct {
	// An order submission
	Submission           *v1.OrderSubmission `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PrepareSubmitOrderRequest) Reset()         { *m = PrepareSubmitOrderRequest{} }
func (m *PrepareSubmitOrderRequest) String() string { return proto.CompactTextString(m) }
func (*PrepareSubmitOrderRequest) ProtoMessage()    {}
func (*PrepareSubmitOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{11}
}

func (m *PrepareSubmitOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareSubmitOrderRequest.Unmarshal(m, b)
}
func (m *PrepareSubmitOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareSubmitOrderRequest.Marshal(b, m, deterministic)
}
func (m *PrepareSubmitOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareSubmitOrderRequest.Merge(m, src)
}
func (m *PrepareSubmitOrderRequest) XXX_Size() int {
	return xxx_messageInfo_PrepareSubmitOrderRequest.Size(m)
}
func (m *PrepareSubmitOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareSubmitOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareSubmitOrderRequest proto.InternalMessageInfo

func (m *PrepareSubmitOrderRequest) GetSubmission() *v1.OrderSubmission {
	if m != nil {
		return m.Submission
	}
	return nil
}

// Request to cancel an existing order
type PrepareCancelOrderRequest struct {
	// An order cancellation
	Cancellation         *v1.OrderCancellation `protobuf:"bytes,1,opt,name=cancellation,proto3" json:"cancellation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PrepareCancelOrderRequest) Reset()         { *m = PrepareCancelOrderRequest{} }
func (m *PrepareCancelOrderRequest) String() string { return proto.CompactTextString(m) }
func (*PrepareCancelOrderRequest) ProtoMessage()    {}
func (*PrepareCancelOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{12}
}

func (m *PrepareCancelOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareCancelOrderRequest.Unmarshal(m, b)
}
func (m *PrepareCancelOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareCancelOrderRequest.Marshal(b, m, deterministic)
}
func (m *PrepareCancelOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareCancelOrderRequest.Merge(m, src)
}
func (m *PrepareCancelOrderRequest) XXX_Size() int {
	return xxx_messageInfo_PrepareCancelOrderRequest.Size(m)
}
func (m *PrepareCancelOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareCancelOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareCancelOrderRequest proto.InternalMessageInfo

func (m *PrepareCancelOrderRequest) GetCancellation() *v1.OrderCancellation {
	if m != nil {
		return m.Cancellation
	}
	return nil
}

// Request to amend an existing order
type PrepareAmendOrderRequest struct {
	// An order amendment
	Amendment            *v1.OrderAmendment `protobuf:"bytes,1,opt,name=amendment,proto3" json:"amendment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PrepareAmendOrderRequest) Reset()         { *m = PrepareAmendOrderRequest{} }
func (m *PrepareAmendOrderRequest) String() string { return proto.CompactTextString(m) }
func (*PrepareAmendOrderRequest) ProtoMessage()    {}
func (*PrepareAmendOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{13}
}

func (m *PrepareAmendOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareAmendOrderRequest.Unmarshal(m, b)
}
func (m *PrepareAmendOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareAmendOrderRequest.Marshal(b, m, deterministic)
}
func (m *PrepareAmendOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareAmendOrderRequest.Merge(m, src)
}
func (m *PrepareAmendOrderRequest) XXX_Size() int {
	return xxx_messageInfo_PrepareAmendOrderRequest.Size(m)
}
func (m *PrepareAmendOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareAmendOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareAmendOrderRequest proto.InternalMessageInfo

func (m *PrepareAmendOrderRequest) GetAmendment() *v1.OrderAmendment {
	if m != nil {
		return m.Amendment
	}
	return nil
}

// Request for a list of all assets enabled on Vega
type AssetsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssetsRequest) Reset()         { *m = AssetsRequest{} }
func (m *AssetsRequest) String() string { return proto.CompactTextString(m) }
func (*AssetsRequest) ProtoMessage()    {}
func (*AssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{14}
}

func (m *AssetsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetsRequest.Unmarshal(m, b)
}
func (m *AssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetsRequest.Marshal(b, m, deterministic)
}
func (m *AssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetsRequest.Merge(m, src)
}
func (m *AssetsRequest) XXX_Size() int {
	return xxx_messageInfo_AssetsRequest.Size(m)
}
func (m *AssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssetsRequest proto.InternalMessageInfo

// Response for a list of all assets enabled on Vega
type AssetsResponse struct {
	// A list of 0 or more assets
	Assets               []*vega.Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AssetsResponse) Reset()         { *m = AssetsResponse{} }
func (m *AssetsResponse) String() string { return proto.CompactTextString(m) }
func (*AssetsResponse) ProtoMessage()    {}
func (*AssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{15}
}

func (m *AssetsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetsResponse.Unmarshal(m, b)
}
func (m *AssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetsResponse.Marshal(b, m, deterministic)
}
func (m *AssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetsResponse.Merge(m, src)
}
func (m *AssetsResponse) XXX_Size() int {
	return xxx_messageInfo_AssetsResponse.Size(m)
}
func (m *AssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssetsResponse proto.InternalMessageInfo

func (m *AssetsResponse) GetAssets() []*vega.Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

// Request for an asset given an asset identifier
type AssetByIDRequest struct {
	// Asset identifier, required field
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssetByIDRequest) Reset()         { *m = AssetByIDRequest{} }
func (m *AssetByIDRequest) String() string { return proto.CompactTextString(m) }
func (*AssetByIDRequest) ProtoMessage()    {}
func (*AssetByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{16}
}

func (m *AssetByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetByIDRequest.Unmarshal(m, b)
}
func (m *AssetByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetByIDRequest.Marshal(b, m, deterministic)
}
func (m *AssetByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetByIDRequest.Merge(m, src)
}
func (m *AssetByIDRequest) XXX_Size() int {
	return xxx_messageInfo_AssetByIDRequest.Size(m)
}
func (m *AssetByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssetByIDRequest proto.InternalMessageInfo

func (m *AssetByIDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Response for an asset given an asset identifier
type AssetByIDResponse struct {
	// An asset record, if found
	Asset                *vega.Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AssetByIDResponse) Reset()         { *m = AssetByIDResponse{} }
func (m *AssetByIDResponse) String() string { return proto.CompactTextString(m) }
func (*AssetByIDResponse) ProtoMessage()    {}
func (*AssetByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{17}
}

func (m *AssetByIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetByIDResponse.Unmarshal(m, b)
}
func (m *AssetByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetByIDResponse.Marshal(b, m, deterministic)
}
func (m *AssetByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetByIDResponse.Merge(m, src)
}
func (m *AssetByIDResponse) XXX_Size() int {
	return xxx_messageInfo_AssetByIDResponse.Size(m)
}
func (m *AssetByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssetByIDResponse proto.InternalMessageInfo

func (m *AssetByIDResponse) GetAsset() *vega.Asset {
	if m != nil {
		return m.Asset
	}
	return nil
}

// Request to specify the identifier of the resource we want to retrieve aggregated signatures for
type GetNodeSignaturesAggregateRequest struct {
	// Resource identifier, required field
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeSignaturesAggregateRequest) Reset()         { *m = GetNodeSignaturesAggregateRequest{} }
func (m *GetNodeSignaturesAggregateRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodeSignaturesAggregateRequest) ProtoMessage()    {}
func (*GetNodeSignaturesAggregateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{18}
}

func (m *GetNodeSignaturesAggregateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeSignaturesAggregateRequest.Unmarshal(m, b)
}
func (m *GetNodeSignaturesAggregateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeSignaturesAggregateRequest.Marshal(b, m, deterministic)
}
func (m *GetNodeSignaturesAggregateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeSignaturesAggregateRequest.Merge(m, src)
}
func (m *GetNodeSignaturesAggregateRequest) XXX_Size() int {
	return xxx_messageInfo_GetNodeSignaturesAggregateRequest.Size(m)
}
func (m *GetNodeSignaturesAggregateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeSignaturesAggregateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeSignaturesAggregateRequest proto.InternalMessageInfo

func (m *GetNodeSignaturesAggregateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Response to specify the identifier of the resource we want to retrieve aggregated signatures for
type GetNodeSignaturesAggregateResponse struct {
	// A list of 0 or more signatures
	Signatures           []*v1.NodeSignature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetNodeSignaturesAggregateResponse) Reset()         { *m = GetNodeSignaturesAggregateResponse{} }
func (m *GetNodeSignaturesAggregateResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeSignaturesAggregateResponse) ProtoMessage()    {}
func (*GetNodeSignaturesAggregateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{19}
}

func (m *GetNodeSignaturesAggregateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeSignaturesAggregateResponse.Unmarshal(m, b)
}
func (m *GetNodeSignaturesAggregateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeSignaturesAggregateResponse.Marshal(b, m, deterministic)
}
func (m *GetNodeSignaturesAggregateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeSignaturesAggregateResponse.Merge(m, src)
}
func (m *GetNodeSignaturesAggregateResponse) XXX_Size() int {
	return xxx_messageInfo_GetNodeSignaturesAggregateResponse.Size(m)
}
func (m *GetNodeSignaturesAggregateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeSignaturesAggregateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeSignaturesAggregateResponse proto.InternalMessageInfo

func (m *GetNodeSignaturesAggregateResponse) GetSignatures() []*v1.NodeSignature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// Optional proposal state
type OptionalProposalState struct {
	// Proposal state value
	Value                vega.Proposal_State `protobuf:"varint,1,opt,name=value,proto3,enum=vega.Proposal_State" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *OptionalProposalState) Reset()         { *m = OptionalProposalState{} }
func (m *OptionalProposalState) String() string { return proto.CompactTextString(m) }
func (*OptionalProposalState) ProtoMessage()    {}
func (*OptionalProposalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{20}
}

func (m *OptionalProposalState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OptionalProposalState.Unmarshal(m, b)
}
func (m *OptionalProposalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OptionalProposalState.Marshal(b, m, deterministic)
}
func (m *OptionalProposalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionalProposalState.Merge(m, src)
}
func (m *OptionalProposalState) XXX_Size() int {
	return xxx_messageInfo_OptionalProposalState.Size(m)
}
func (m *OptionalProposalState) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionalProposalState.DiscardUnknown(m)
}

var xxx_messageInfo_OptionalProposalState proto.InternalMessageInfo

func (m *OptionalProposalState) GetValue() vega.Proposal_State {
	if m != nil {
		return m.Value
	}
	return vega.Proposal_STATE_UNSPECIFIED
}

// Request for a list of proposals
type GetProposalsRequest struct {
	// Optional proposal state
	SelectInState        *OptionalProposalState `protobuf:"bytes,1,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetProposalsRequest) Reset()         { *m = GetProposalsRequest{} }
func (m *GetProposalsRequest) String() string { return proto.CompactTextString(m) }
func (*GetProposalsRequest) ProtoMessage()    {}
func (*GetProposalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{21}
}

func (m *GetProposalsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProposalsRequest.Unmarshal(m, b)
}
func (m *GetProposalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProposalsRequest.Marshal(b, m, deterministic)
}
func (m *GetProposalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProposalsRequest.Merge(m, src)
}
func (m *GetProposalsRequest) XXX_Size() int {
	return xxx_messageInfo_GetProposalsRequest.Size(m)
}
func (m *GetProposalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProposalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProposalsRequest proto.InternalMessageInfo

func (m *GetProposalsRequest) GetSelectInState() *OptionalProposalState {
	if m != nil {
		return m.SelectInState
	}
	return nil
}

// Response for a list of proposals
type GetProposalsResponse struct {
	// A list of 0 or more governance data
	Data                 []*vega.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetProposalsResponse) Reset()         { *m = GetProposalsResponse{} }
func (m *GetProposalsResponse) String() string { return proto.CompactTextString(m) }
func (*GetProposalsResponse) ProtoMessage()    {}
func (*GetProposalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{22}
}

func (m *GetProposalsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProposalsResponse.Unmarshal(m, b)
}
func (m *GetProposalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProposalsResponse.Marshal(b, m, deterministic)
}
func (m *GetProposalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProposalsResponse.Merge(m, src)
}
func (m *GetProposalsResponse) XXX_Size() int {
	return xxx_messageInfo_GetProposalsResponse.Size(m)
}
func (m *GetProposalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProposalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProposalsResponse proto.InternalMessageInfo

func (m *GetProposalsResponse) GetData() []*vega.GovernanceData {
	if m != nil {
		return m.Data
	}
	return nil
}

// Request for a list of proposals for a party
type GetProposalsByPartyRequest struct {
	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Optional proposal state
	SelectInState        *OptionalProposalState `protobuf:"bytes,2,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetProposalsByPartyRequest) Reset()         { *m = GetProposalsByPartyRequest{} }
func (m *GetProposalsByPartyRequest) String() string { return proto.CompactTextString(m) }
func (*GetProposalsByPartyRequest) ProtoMessage()    {}
func (*GetProposalsByPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{23}
}

func (m *GetProposalsByPartyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProposalsByPartyRequest.Unmarshal(m, b)
}
func (m *GetProposalsByPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProposalsByPartyRequest.Marshal(b, m, deterministic)
}
func (m *GetProposalsByPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProposalsByPartyRequest.Merge(m, src)
}
func (m *GetProposalsByPartyRequest) XXX_Size() int {
	return xxx_messageInfo_GetProposalsByPartyRequest.Size(m)
}
func (m *GetProposalsByPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProposalsByPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProposalsByPartyRequest proto.InternalMessageInfo

func (m *GetProposalsByPartyRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *GetProposalsByPartyRequest) GetSelectInState() *OptionalProposalState {
	if m != nil {
		return m.SelectInState
	}
	return nil
}

// Response for a list of proposals for a party
type GetProposalsByPartyResponse struct {
	// A list of 0 or more governance data
	Data                 []*vega.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetProposalsByPartyResponse) Reset()         { *m = GetProposalsByPartyResponse{} }
func (m *GetProposalsByPartyResponse) String() string { return proto.CompactTextString(m) }
func (*GetProposalsByPartyResponse) ProtoMessage()    {}
func (*GetProposalsByPartyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{24}
}

func (m *GetProposalsByPartyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProposalsByPartyResponse.Unmarshal(m, b)
}
func (m *GetProposalsByPartyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProposalsByPartyResponse.Marshal(b, m, deterministic)
}
func (m *GetProposalsByPartyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProposalsByPartyResponse.Merge(m, src)
}
func (m *GetProposalsByPartyResponse) XXX_Size() int {
	return xxx_messageInfo_GetProposalsByPartyResponse.Size(m)
}
func (m *GetProposalsByPartyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProposalsByPartyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProposalsByPartyResponse proto.InternalMessageInfo

func (m *GetProposalsByPartyResponse) GetData() []*vega.GovernanceData {
	if m != nil {
		return m.Data
	}
	return nil
}

// Request for a list of votes for a party
type GetVotesByPartyRequest struct {
	// Party identifier, required field
	PartyId              string   `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVotesByPartyRequest) Reset()         { *m = GetVotesByPartyRequest{} }
func (m *GetVotesByPartyRequest) String() string { return proto.CompactTextString(m) }
func (*GetVotesByPartyRequest) ProtoMessage()    {}
func (*GetVotesByPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{25}
}

func (m *GetVotesByPartyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVotesByPartyRequest.Unmarshal(m, b)
}
func (m *GetVotesByPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVotesByPartyRequest.Marshal(b, m, deterministic)
}
func (m *GetVotesByPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVotesByPartyRequest.Merge(m, src)
}
func (m *GetVotesByPartyRequest) XXX_Size() int {
	return xxx_messageInfo_GetVotesByPartyRequest.Size(m)
}
func (m *GetVotesByPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVotesByPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVotesByPartyRequest proto.InternalMessageInfo

func (m *GetVotesByPartyRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

// Response for a list of votes for a party
type GetVotesByPartyResponse struct {
	// A list of 0 or more votes
	Votes                []*vega.Vote `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetVotesByPartyResponse) Reset()         { *m = GetVotesByPartyResponse{} }
func (m *GetVotesByPartyResponse) String() string { return proto.CompactTextString(m) }
func (*GetVotesByPartyResponse) ProtoMessage()    {}
func (*GetVotesByPartyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{26}
}

func (m *GetVotesByPartyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVotesByPartyResponse.Unmarshal(m, b)
}
func (m *GetVotesByPartyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVotesByPartyResponse.Marshal(b, m, deterministic)
}
func (m *GetVotesByPartyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVotesByPartyResponse.Merge(m, src)
}
func (m *GetVotesByPartyResponse) XXX_Size() int {
	return xxx_messageInfo_GetVotesByPartyResponse.Size(m)
}
func (m *GetVotesByPartyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVotesByPartyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVotesByPartyResponse proto.InternalMessageInfo

func (m *GetVotesByPartyResponse) GetVotes() []*vega.Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

// Request for a list of new market proposals
type GetNewMarketProposalsRequest struct {
	// Optional proposal state
	SelectInState        *OptionalProposalState `protobuf:"bytes,1,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetNewMarketProposalsRequest) Reset()         { *m = GetNewMarketProposalsRequest{} }
func (m *GetNewMarketProposalsRequest) String() string { return proto.CompactTextString(m) }
func (*GetNewMarketProposalsRequest) ProtoMessage()    {}
func (*GetNewMarketProposalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{27}
}

func (m *GetNewMarketProposalsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNewMarketProposalsRequest.Unmarshal(m, b)
}
func (m *GetNewMarketProposalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNewMarketProposalsRequest.Marshal(b, m, deterministic)
}
func (m *GetNewMarketProposalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNewMarketProposalsRequest.Merge(m, src)
}
func (m *GetNewMarketProposalsRequest) XXX_Size() int {
	return xxx_messageInfo_GetNewMarketProposalsRequest.Size(m)
}
func (m *GetNewMarketProposalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNewMarketProposalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNewMarketProposalsRequest proto.InternalMessageInfo

func (m *GetNewMarketProposalsRequest) GetSelectInState() *OptionalProposalState {
	if m != nil {
		return m.SelectInState
	}
	return nil
}

// Response for a list of new market proposals
type GetNewMarketProposalsResponse struct {
	// A list of 0 or more governance data
	Data                 []*vega.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetNewMarketProposalsResponse) Reset()         { *m = GetNewMarketProposalsResponse{} }
func (m *GetNewMarketProposalsResponse) String() string { return proto.CompactTextString(m) }
func (*GetNewMarketProposalsResponse) ProtoMessage()    {}
func (*GetNewMarketProposalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{28}
}

func (m *GetNewMarketProposalsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNewMarketProposalsResponse.Unmarshal(m, b)
}
func (m *GetNewMarketProposalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNewMarketProposalsResponse.Marshal(b, m, deterministic)
}
func (m *GetNewMarketProposalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNewMarketProposalsResponse.Merge(m, src)
}
func (m *GetNewMarketProposalsResponse) XXX_Size() int {
	return xxx_messageInfo_GetNewMarketProposalsResponse.Size(m)
}
func (m *GetNewMarketProposalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNewMarketProposalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNewMarketProposalsResponse proto.InternalMessageInfo

func (m *GetNewMarketProposalsResponse) GetData() []*vega.GovernanceData {
	if m != nil {
		return m.Data
	}
	return nil
}

// Request for a list of update market proposals
type GetUpdateMarketProposalsRequest struct {
	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Proposal state
	SelectInState        *OptionalProposalState `protobuf:"bytes,2,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetUpdateMarketProposalsRequest) Reset()         { *m = GetUpdateMarketProposalsRequest{} }
func (m *GetUpdateMarketProposalsRequest) String() string { return proto.CompactTextString(m) }
func (*GetUpdateMarketProposalsRequest) ProtoMessage()    {}
func (*GetUpdateMarketProposalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{29}
}

func (m *GetUpdateMarketProposalsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUpdateMarketProposalsRequest.Unmarshal(m, b)
}
func (m *GetUpdateMarketProposalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUpdateMarketProposalsRequest.Marshal(b, m, deterministic)
}
func (m *GetUpdateMarketProposalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpdateMarketProposalsRequest.Merge(m, src)
}
func (m *GetUpdateMarketProposalsRequest) XXX_Size() int {
	return xxx_messageInfo_GetUpdateMarketProposalsRequest.Size(m)
}
func (m *GetUpdateMarketProposalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpdateMarketProposalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpdateMarketProposalsRequest proto.InternalMessageInfo

func (m *GetUpdateMarketProposalsRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *GetUpdateMarketProposalsRequest) GetSelectInState() *OptionalProposalState {
	if m != nil {
		return m.SelectInState
	}
	return nil
}

// Response for a list of update market proposals
type GetUpdateMarketProposalsResponse struct {
	// A list of 0 or more governance data
	Data                 []*vega.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetUpdateMarketProposalsResponse) Reset()         { *m = GetUpdateMarketProposalsResponse{} }
func (m *GetUpdateMarketProposalsResponse) String() string { return proto.CompactTextString(m) }
func (*GetUpdateMarketProposalsResponse) ProtoMessage()    {}
func (*GetUpdateMarketProposalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{30}
}

func (m *GetUpdateMarketProposalsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUpdateMarketProposalsResponse.Unmarshal(m, b)
}
func (m *GetUpdateMarketProposalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUpdateMarketProposalsResponse.Marshal(b, m, deterministic)
}
func (m *GetUpdateMarketProposalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpdateMarketProposalsResponse.Merge(m, src)
}
func (m *GetUpdateMarketProposalsResponse) XXX_Size() int {
	return xxx_messageInfo_GetUpdateMarketProposalsResponse.Size(m)
}
func (m *GetUpdateMarketProposalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpdateMarketProposalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpdateMarketProposalsResponse proto.InternalMessageInfo

func (m *GetUpdateMarketProposalsResponse) GetData() []*vega.GovernanceData {
	if m != nil {
		return m.Data
	}
	return nil
}

// Request for a list of network parameter proposals
type GetNetworkParametersProposalsRequest struct {
	// Optional proposal state
	SelectInState        *OptionalProposalState `protobuf:"bytes,1,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetNetworkParametersProposalsRequest) Reset()         { *m = GetNetworkParametersProposalsRequest{} }
func (m *GetNetworkParametersProposalsRequest) String() string { return proto.CompactTextString(m) }
func (*GetNetworkParametersProposalsRequest) ProtoMessage()    {}
func (*GetNetworkParametersProposalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{31}
}

func (m *GetNetworkParametersProposalsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNetworkParametersProposalsRequest.Unmarshal(m, b)
}
func (m *GetNetworkParametersProposalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNetworkParametersProposalsRequest.Marshal(b, m, deterministic)
}
func (m *GetNetworkParametersProposalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetworkParametersProposalsRequest.Merge(m, src)
}
func (m *GetNetworkParametersProposalsRequest) XXX_Size() int {
	return xxx_messageInfo_GetNetworkParametersProposalsRequest.Size(m)
}
func (m *GetNetworkParametersProposalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetworkParametersProposalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetworkParametersProposalsRequest proto.InternalMessageInfo

func (m *GetNetworkParametersProposalsRequest) GetSelectInState() *OptionalProposalState {
	if m != nil {
		return m.SelectInState
	}
	return nil
}

// Response for a list of network parameter proposals
type GetNetworkParametersProposalsResponse struct {
	// A list of 0 or more governance data
	Data                 []*vega.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetNetworkParametersProposalsResponse) Reset()         { *m = GetNetworkParametersProposalsResponse{} }
func (m *GetNetworkParametersProposalsResponse) String() string { return proto.CompactTextString(m) }
func (*GetNetworkParametersProposalsResponse) ProtoMessage()    {}
func (*GetNetworkParametersProposalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{32}
}

func (m *GetNetworkParametersProposalsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNetworkParametersProposalsResponse.Unmarshal(m, b)
}
func (m *GetNetworkParametersProposalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNetworkParametersProposalsResponse.Marshal(b, m, deterministic)
}
func (m *GetNetworkParametersProposalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetworkParametersProposalsResponse.Merge(m, src)
}
func (m *GetNetworkParametersProposalsResponse) XXX_Size() int {
	return xxx_messageInfo_GetNetworkParametersProposalsResponse.Size(m)
}
func (m *GetNetworkParametersProposalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetworkParametersProposalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetworkParametersProposalsResponse proto.InternalMessageInfo

func (m *GetNetworkParametersProposalsResponse) GetData() []*vega.GovernanceData {
	if m != nil {
		return m.Data
	}
	return nil
}

// Request for a list of new asset proposals
type GetNewAssetProposalsRequest struct {
	// Optional proposal state
	SelectInState        *OptionalProposalState `protobuf:"bytes,1,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetNewAssetProposalsRequest) Reset()         { *m = GetNewAssetProposalsRequest{} }
func (m *GetNewAssetProposalsRequest) String() string { return proto.CompactTextString(m) }
func (*GetNewAssetProposalsRequest) ProtoMessage()    {}
func (*GetNewAssetProposalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{33}
}

func (m *GetNewAssetProposalsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNewAssetProposalsRequest.Unmarshal(m, b)
}
func (m *GetNewAssetProposalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNewAssetProposalsRequest.Marshal(b, m, deterministic)
}
func (m *GetNewAssetProposalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNewAssetProposalsRequest.Merge(m, src)
}
func (m *GetNewAssetProposalsRequest) XXX_Size() int {
	return xxx_messageInfo_GetNewAssetProposalsRequest.Size(m)
}
func (m *GetNewAssetProposalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNewAssetProposalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNewAssetProposalsRequest proto.InternalMessageInfo

func (m *GetNewAssetProposalsRequest) GetSelectInState() *OptionalProposalState {
	if m != nil {
		return m.SelectInState
	}
	return nil
}

// Response for a list of new asset proposals
type GetNewAssetProposalsResponse struct {
	// A list of 0 or more governance data
	Data                 []*vega.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetNewAssetProposalsResponse) Reset()         { *m = GetNewAssetProposalsResponse{} }
func (m *GetNewAssetProposalsResponse) String() string { return proto.CompactTextString(m) }
func (*GetNewAssetProposalsResponse) ProtoMessage()    {}
func (*GetNewAssetProposalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{34}
}

func (m *GetNewAssetProposalsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNewAssetProposalsResponse.Unmarshal(m, b)
}
func (m *GetNewAssetProposalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNewAssetProposalsResponse.Marshal(b, m, deterministic)
}
func (m *GetNewAssetProposalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNewAssetProposalsResponse.Merge(m, src)
}
func (m *GetNewAssetProposalsResponse) XXX_Size() int {
	return xxx_messageInfo_GetNewAssetProposalsResponse.Size(m)
}
func (m *GetNewAssetProposalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNewAssetProposalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNewAssetProposalsResponse proto.InternalMessageInfo

func (m *GetNewAssetProposalsResponse) GetData() []*vega.GovernanceData {
	if m != nil {
		return m.Data
	}
	return nil
}

// Request for a governance proposal given a proposal identifier
type GetProposalByIDRequest struct {
	// Proposal identifier, required field
	ProposalId           string   `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProposalByIDRequest) Reset()         { *m = GetProposalByIDRequest{} }
func (m *GetProposalByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetProposalByIDRequest) ProtoMessage()    {}
func (*GetProposalByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{35}
}

func (m *GetProposalByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProposalByIDRequest.Unmarshal(m, b)
}
func (m *GetProposalByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProposalByIDRequest.Marshal(b, m, deterministic)
}
func (m *GetProposalByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProposalByIDRequest.Merge(m, src)
}
func (m *GetProposalByIDRequest) XXX_Size() int {
	return xxx_messageInfo_GetProposalByIDRequest.Size(m)
}
func (m *GetProposalByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProposalByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProposalByIDRequest proto.InternalMessageInfo

func (m *GetProposalByIDRequest) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

// Response for a governance proposal given a proposal identifier
type GetProposalByIDResponse struct {
	// Governance data, if found
	Data                 *vega.GovernanceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetProposalByIDResponse) Reset()         { *m = GetProposalByIDResponse{} }
func (m *GetProposalByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetProposalByIDResponse) ProtoMessage()    {}
func (*GetProposalByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{36}
}

func (m *GetProposalByIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProposalByIDResponse.Unmarshal(m, b)
}
func (m *GetProposalByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProposalByIDResponse.Marshal(b, m, deterministic)
}
func (m *GetProposalByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProposalByIDResponse.Merge(m, src)
}
func (m *GetProposalByIDResponse) XXX_Size() int {
	return xxx_messageInfo_GetProposalByIDResponse.Size(m)
}
func (m *GetProposalByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProposalByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProposalByIDResponse proto.InternalMessageInfo

func (m *GetProposalByIDResponse) GetData() *vega.GovernanceData {
	if m != nil {
		return m.Data
	}
	return nil
}

// Request for a governance proposal given a proposal reference
type GetProposalByReferenceRequest struct {
	// Proposal reference. Required field
	Reference            string   `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProposalByReferenceRequest) Reset()         { *m = GetProposalByReferenceRequest{} }
func (m *GetProposalByReferenceRequest) String() string { return proto.CompactTextString(m) }
func (*GetProposalByReferenceRequest) ProtoMessage()    {}
func (*GetProposalByReferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{37}
}

func (m *GetProposalByReferenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProposalByReferenceRequest.Unmarshal(m, b)
}
func (m *GetProposalByReferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProposalByReferenceRequest.Marshal(b, m, deterministic)
}
func (m *GetProposalByReferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProposalByReferenceRequest.Merge(m, src)
}
func (m *GetProposalByReferenceRequest) XXX_Size() int {
	return xxx_messageInfo_GetProposalByReferenceRequest.Size(m)
}
func (m *GetProposalByReferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProposalByReferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProposalByReferenceRequest proto.InternalMessageInfo

func (m *GetProposalByReferenceRequest) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

// Response for a governance proposal given a proposal reference
type GetProposalByReferenceResponse struct {
	// Governance data, if found
	Data                 *vega.GovernanceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetProposalByReferenceResponse) Reset()         { *m = GetProposalByReferenceResponse{} }
func (m *GetProposalByReferenceResponse) String() string { return proto.CompactTextString(m) }
func (*GetProposalByReferenceResponse) ProtoMessage()    {}
func (*GetProposalByReferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{38}
}

func (m *GetProposalByReferenceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProposalByReferenceResponse.Unmarshal(m, b)
}
func (m *GetProposalByReferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProposalByReferenceResponse.Marshal(b, m, deterministic)
}
func (m *GetProposalByReferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProposalByReferenceResponse.Merge(m, src)
}
func (m *GetProposalByReferenceResponse) XXX_Size() int {
	return xxx_messageInfo_GetProposalByReferenceResponse.Size(m)
}
func (m *GetProposalByReferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProposalByReferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProposalByReferenceResponse proto.InternalMessageInfo

func (m *GetProposalByReferenceResponse) GetData() *vega.GovernanceData {
	if m != nil {
		return m.Data
	}
	return nil
}

// Request to obsever all event related to governance
type ObserveGovernanceRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObserveGovernanceRequest) Reset()         { *m = ObserveGovernanceRequest{} }
func (m *ObserveGovernanceRequest) String() string { return proto.CompactTextString(m) }
func (*ObserveGovernanceRequest) ProtoMessage()    {}
func (*ObserveGovernanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{39}
}

func (m *ObserveGovernanceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObserveGovernanceRequest.Unmarshal(m, b)
}
func (m *ObserveGovernanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObserveGovernanceRequest.Marshal(b, m, deterministic)
}
func (m *ObserveGovernanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObserveGovernanceRequest.Merge(m, src)
}
func (m *ObserveGovernanceRequest) XXX_Size() int {
	return xxx_messageInfo_ObserveGovernanceRequest.Size(m)
}
func (m *ObserveGovernanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ObserveGovernanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ObserveGovernanceRequest proto.InternalMessageInfo

// All events related to governance
type ObserveGovernanceResponse struct {
	Data                 *vega.GovernanceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ObserveGovernanceResponse) Reset()         { *m = ObserveGovernanceResponse{} }
func (m *ObserveGovernanceResponse) String() string { return proto.CompactTextString(m) }
func (*ObserveGovernanceResponse) ProtoMessage()    {}
func (*ObserveGovernanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{40}
}

func (m *ObserveGovernanceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObserveGovernanceResponse.Unmarshal(m, b)
}
func (m *ObserveGovernanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObserveGovernanceResponse.Marshal(b, m, deterministic)
}
func (m *ObserveGovernanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObserveGovernanceResponse.Merge(m, src)
}
func (m *ObserveGovernanceResponse) XXX_Size() int {
	return xxx_messageInfo_ObserveGovernanceResponse.Size(m)
}
func (m *ObserveGovernanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ObserveGovernanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ObserveGovernanceResponse proto.InternalMessageInfo

func (m *ObserveGovernanceResponse) GetData() *vega.GovernanceData {
	if m != nil {
		return m.Data
	}
	return nil
}

// Request to subscribe to a stream of governance proposals for a party
type ObservePartyProposalsRequest struct {
	// Party identifier, required field
	PartyId              string   `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObservePartyProposalsRequest) Reset()         { *m = ObservePartyProposalsRequest{} }
func (m *ObservePartyProposalsRequest) String() string { return proto.CompactTextString(m) }
func (*ObservePartyProposalsRequest) ProtoMessage()    {}
func (*ObservePartyProposalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{41}
}

func (m *ObservePartyProposalsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObservePartyProposalsRequest.Unmarshal(m, b)
}
func (m *ObservePartyProposalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObservePartyProposalsRequest.Marshal(b, m, deterministic)
}
func (m *ObservePartyProposalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservePartyProposalsRequest.Merge(m, src)
}
func (m *ObservePartyProposalsRequest) XXX_Size() int {
	return xxx_messageInfo_ObservePartyProposalsRequest.Size(m)
}
func (m *ObservePartyProposalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservePartyProposalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ObservePartyProposalsRequest proto.InternalMessageInfo

func (m *ObservePartyProposalsRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

type ObservePartyProposalsResponse struct {
	Data                 *vega.GovernanceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ObservePartyProposalsResponse) Reset()         { *m = ObservePartyProposalsResponse{} }
func (m *ObservePartyProposalsResponse) String() string { return proto.CompactTextString(m) }
func (*ObservePartyProposalsResponse) ProtoMessage()    {}
func (*ObservePartyProposalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{42}
}

func (m *ObservePartyProposalsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObservePartyProposalsResponse.Unmarshal(m, b)
}
func (m *ObservePartyProposalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObservePartyProposalsResponse.Marshal(b, m, deterministic)
}
func (m *ObservePartyProposalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservePartyProposalsResponse.Merge(m, src)
}
func (m *ObservePartyProposalsResponse) XXX_Size() int {
	return xxx_messageInfo_ObservePartyProposalsResponse.Size(m)
}
func (m *ObservePartyProposalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservePartyProposalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ObservePartyProposalsResponse proto.InternalMessageInfo

func (m *ObservePartyProposalsResponse) GetData() *vega.GovernanceData {
	if m != nil {
		return m.Data
	}
	return nil
}

// Request to subscribe to a stream of governance votes for a proposal
type ObserveProposalVotesRequest struct {
	// Proposal identifier, required field
	ProposalId           string   `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObserveProposalVotesRequest) Reset()         { *m = ObserveProposalVotesRequest{} }
func (m *ObserveProposalVotesRequest) String() string { return proto.CompactTextString(m) }
func (*ObserveProposalVotesRequest) ProtoMessage()    {}
func (*ObserveProposalVotesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{43}
}

func (m *ObserveProposalVotesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObserveProposalVotesRequest.Unmarshal(m, b)
}
func (m *ObserveProposalVotesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObserveProposalVotesRequest.Marshal(b, m, deterministic)
}
func (m *ObserveProposalVotesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObserveProposalVotesRequest.Merge(m, src)
}
func (m *ObserveProposalVotesRequest) XXX_Size() int {
	return xxx_messageInfo_ObserveProposalVotesRequest.Size(m)
}
func (m *ObserveProposalVotesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ObserveProposalVotesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ObserveProposalVotesRequest proto.InternalMessageInfo

func (m *ObserveProposalVotesRequest) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

type ObserveProposalVotesResponse struct {
	Vote                 *vega.Vote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ObserveProposalVotesResponse) Reset()         { *m = ObserveProposalVotesResponse{} }
func (m *ObserveProposalVotesResponse) String() string { return proto.CompactTextString(m) }
func (*ObserveProposalVotesResponse) ProtoMessage()    {}
func (*ObserveProposalVotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{44}
}

func (m *ObserveProposalVotesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObserveProposalVotesResponse.Unmarshal(m, b)
}
func (m *ObserveProposalVotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObserveProposalVotesResponse.Marshal(b, m, deterministic)
}
func (m *ObserveProposalVotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObserveProposalVotesResponse.Merge(m, src)
}
func (m *ObserveProposalVotesResponse) XXX_Size() int {
	return xxx_messageInfo_ObserveProposalVotesResponse.Size(m)
}
func (m *ObserveProposalVotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ObserveProposalVotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ObserveProposalVotesResponse proto.InternalMessageInfo

func (m *ObserveProposalVotesResponse) GetVote() *vega.Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

// Request to subscribe to a stream of governance votes for a party
type ObservePartyVotesRequest struct {
	// Party identifier, required field
	PartyId              string   `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObservePartyVotesRequest) Reset()         { *m = ObservePartyVotesRequest{} }
func (m *ObservePartyVotesRequest) String() string { return proto.CompactTextString(m) }
func (*ObservePartyVotesRequest) ProtoMessage()    {}
func (*ObservePartyVotesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{45}
}

func (m *ObservePartyVotesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObservePartyVotesRequest.Unmarshal(m, b)
}
func (m *ObservePartyVotesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObservePartyVotesRequest.Marshal(b, m, deterministic)
}
func (m *ObservePartyVotesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservePartyVotesRequest.Merge(m, src)
}
func (m *ObservePartyVotesRequest) XXX_Size() int {
	return xxx_messageInfo_ObservePartyVotesRequest.Size(m)
}
func (m *ObservePartyVotesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservePartyVotesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ObservePartyVotesRequest proto.InternalMessageInfo

func (m *ObservePartyVotesRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

type ObservePartyVotesResponse struct {
	Vote                 *vega.Vote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ObservePartyVotesResponse) Reset()         { *m = ObservePartyVotesResponse{} }
func (m *ObservePartyVotesResponse) String() string { return proto.CompactTextString(m) }
func (*ObservePartyVotesResponse) ProtoMessage()    {}
func (*ObservePartyVotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{46}
}

func (m *ObservePartyVotesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObservePartyVotesResponse.Unmarshal(m, b)
}
func (m *ObservePartyVotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObservePartyVotesResponse.Marshal(b, m, deterministic)
}
func (m *ObservePartyVotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservePartyVotesResponse.Merge(m, src)
}
func (m *ObservePartyVotesResponse) XXX_Size() int {
	return xxx_messageInfo_ObservePartyVotesResponse.Size(m)
}
func (m *ObservePartyVotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservePartyVotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ObservePartyVotesResponse proto.InternalMessageInfo

func (m *ObservePartyVotesResponse) GetVote() *vega.Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

// Request to subscribe to a stream of MarginLevels data matching the given party identifier
// Optionally, the list can be additionally filtered by market
type MarginLevelsSubscribeRequest struct {
	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId             string   `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarginLevelsSubscribeRequest) Reset()         { *m = MarginLevelsSubscribeRequest{} }
func (m *MarginLevelsSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*MarginLevelsSubscribeRequest) ProtoMessage()    {}
func (*MarginLevelsSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{47}
}

func (m *MarginLevelsSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarginLevelsSubscribeRequest.Unmarshal(m, b)
}
func (m *MarginLevelsSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarginLevelsSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *MarginLevelsSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarginLevelsSubscribeRequest.Merge(m, src)
}
func (m *MarginLevelsSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_MarginLevelsSubscribeRequest.Size(m)
}
func (m *MarginLevelsSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarginLevelsSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarginLevelsSubscribeRequest proto.InternalMessageInfo

func (m *MarginLevelsSubscribeRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *MarginLevelsSubscribeRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type MarginLevelsSubscribeResponse struct {
	MarginLevels         *vega.MarginLevels `protobuf:"bytes,1,opt,name=margin_levels,json=marginLevels,proto3" json:"margin_levels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MarginLevelsSubscribeResponse) Reset()         { *m = MarginLevelsSubscribeResponse{} }
func (m *MarginLevelsSubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*MarginLevelsSubscribeResponse) ProtoMessage()    {}
func (*MarginLevelsSubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{48}
}

func (m *MarginLevelsSubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarginLevelsSubscribeResponse.Unmarshal(m, b)
}
func (m *MarginLevelsSubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarginLevelsSubscribeResponse.Marshal(b, m, deterministic)
}
func (m *MarginLevelsSubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarginLevelsSubscribeResponse.Merge(m, src)
}
func (m *MarginLevelsSubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_MarginLevelsSubscribeResponse.Size(m)
}
func (m *MarginLevelsSubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarginLevelsSubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarginLevelsSubscribeResponse proto.InternalMessageInfo

func (m *MarginLevelsSubscribeResponse) GetMarginLevels() *vega.MarginLevels {
	if m != nil {
		return m.MarginLevels
	}
	return nil
}

// Request for margin levels for a party
type MarginLevelsRequest struct {
	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId             string   `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarginLevelsRequest) Reset()         { *m = MarginLevelsRequest{} }
func (m *MarginLevelsRequest) String() string { return proto.CompactTextString(m) }
func (*MarginLevelsRequest) ProtoMessage()    {}
func (*MarginLevelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{49}
}

func (m *MarginLevelsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarginLevelsRequest.Unmarshal(m, b)
}
func (m *MarginLevelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarginLevelsRequest.Marshal(b, m, deterministic)
}
func (m *MarginLevelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarginLevelsRequest.Merge(m, src)
}
func (m *MarginLevelsRequest) XXX_Size() int {
	return xxx_messageInfo_MarginLevelsRequest.Size(m)
}
func (m *MarginLevelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarginLevelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarginLevelsRequest proto.InternalMessageInfo

func (m *MarginLevelsRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *MarginLevelsRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// Response for margin levels for a party
type MarginLevelsResponse struct {
	// A list of 0 or more margin levels
	MarginLevels         []*vega.MarginLevels `protobuf:"bytes,1,rep,name=margin_levels,json=marginLevels,proto3" json:"margin_levels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MarginLevelsResponse) Reset()         { *m = MarginLevelsResponse{} }
func (m *MarginLevelsResponse) String() string { return proto.CompactTextString(m) }
func (*MarginLevelsResponse) ProtoMessage()    {}
func (*MarginLevelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{50}
}

func (m *MarginLevelsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarginLevelsResponse.Unmarshal(m, b)
}
func (m *MarginLevelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarginLevelsResponse.Marshal(b, m, deterministic)
}
func (m *MarginLevelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarginLevelsResponse.Merge(m, src)
}
func (m *MarginLevelsResponse) XXX_Size() int {
	return xxx_messageInfo_MarginLevelsResponse.Size(m)
}
func (m *MarginLevelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarginLevelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarginLevelsResponse proto.InternalMessageInfo

func (m *MarginLevelsResponse) GetMarginLevels() []*vega.MarginLevels {
	if m != nil {
		return m.MarginLevels
	}
	return nil
}

// Request to subscribe to a stream of MarketsData
// Optionally, the list can be additionally filtered by market
type MarketsDataSubscribeRequest struct {
	// Market identifier
	MarketId             string   `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketsDataSubscribeRequest) Reset()         { *m = MarketsDataSubscribeRequest{} }
func (m *MarketsDataSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*MarketsDataSubscribeRequest) ProtoMessage()    {}
func (*MarketsDataSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{51}
}

func (m *MarketsDataSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketsDataSubscribeRequest.Unmarshal(m, b)
}
func (m *MarketsDataSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketsDataSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *MarketsDataSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketsDataSubscribeRequest.Merge(m, src)
}
func (m *MarketsDataSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_MarketsDataSubscribeRequest.Size(m)
}
func (m *MarketsDataSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketsDataSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketsDataSubscribeRequest proto.InternalMessageInfo

func (m *MarketsDataSubscribeRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type MarketsDataSubscribeResponse struct {
	MarketData           *vega.MarketData `protobuf:"bytes,1,opt,name=market_data,json=marketData,proto3" json:"market_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MarketsDataSubscribeResponse) Reset()         { *m = MarketsDataSubscribeResponse{} }
func (m *MarketsDataSubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*MarketsDataSubscribeResponse) ProtoMessage()    {}
func (*MarketsDataSubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{52}
}

func (m *MarketsDataSubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketsDataSubscribeResponse.Unmarshal(m, b)
}
func (m *MarketsDataSubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketsDataSubscribeResponse.Marshal(b, m, deterministic)
}
func (m *MarketsDataSubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketsDataSubscribeResponse.Merge(m, src)
}
func (m *MarketsDataSubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_MarketsDataSubscribeResponse.Size(m)
}
func (m *MarketsDataSubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketsDataSubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarketsDataSubscribeResponse proto.InternalMessageInfo

func (m *MarketsDataSubscribeResponse) GetMarketData() *vega.MarketData {
	if m != nil {
		return m.MarketData
	}
	return nil
}

// Request for market data for a market
type MarketDataByIDRequest struct {
	// Market identifier
	MarketId             string   `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketDataByIDRequest) Reset()         { *m = MarketDataByIDRequest{} }
func (m *MarketDataByIDRequest) String() string { return proto.CompactTextString(m) }
func (*MarketDataByIDRequest) ProtoMessage()    {}
func (*MarketDataByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{53}
}

func (m *MarketDataByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDataByIDRequest.Unmarshal(m, b)
}
func (m *MarketDataByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDataByIDRequest.Marshal(b, m, deterministic)
}
func (m *MarketDataByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataByIDRequest.Merge(m, src)
}
func (m *MarketDataByIDRequest) XXX_Size() int {
	return xxx_messageInfo_MarketDataByIDRequest.Size(m)
}
func (m *MarketDataByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataByIDRequest proto.InternalMessageInfo

func (m *MarketDataByIDRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// Response for market data for a market
type MarketDataByIDResponse struct {
	// Market data, if found
	MarketData           *vega.MarketData `protobuf:"bytes,1,opt,name=market_data,json=marketData,proto3" json:"market_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MarketDataByIDResponse) Reset()         { *m = MarketDataByIDResponse{} }
func (m *MarketDataByIDResponse) String() string { return proto.CompactTextString(m) }
func (*MarketDataByIDResponse) ProtoMessage()    {}
func (*MarketDataByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{54}
}

func (m *MarketDataByIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDataByIDResponse.Unmarshal(m, b)
}
func (m *MarketDataByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDataByIDResponse.Marshal(b, m, deterministic)
}
func (m *MarketDataByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataByIDResponse.Merge(m, src)
}
func (m *MarketDataByIDResponse) XXX_Size() int {
	return xxx_messageInfo_MarketDataByIDResponse.Size(m)
}
func (m *MarketDataByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataByIDResponse proto.InternalMessageInfo

func (m *MarketDataByIDResponse) GetMarketData() *vega.MarketData {
	if m != nil {
		return m.MarketData
	}
	return nil
}

// Request for market data
type MarketsDataRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketsDataRequest) Reset()         { *m = MarketsDataRequest{} }
func (m *MarketsDataRequest) String() string { return proto.CompactTextString(m) }
func (*MarketsDataRequest) ProtoMessage()    {}
func (*MarketsDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{55}
}

func (m *MarketsDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketsDataRequest.Unmarshal(m, b)
}
func (m *MarketsDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketsDataRequest.Marshal(b, m, deterministic)
}
func (m *MarketsDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketsDataRequest.Merge(m, src)
}
func (m *MarketsDataRequest) XXX_Size() int {
	return xxx_messageInfo_MarketsDataRequest.Size(m)
}
func (m *MarketsDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketsDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketsDataRequest proto.InternalMessageInfo

// Response for market data
type MarketsDataResponse struct {
	// A list of 0 or more market data
	MarketsData          []*vega.MarketData `protobuf:"bytes,1,rep,name=markets_data,json=marketsData,proto3" json:"markets_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MarketsDataResponse) Reset()         { *m = MarketsDataResponse{} }
func (m *MarketsDataResponse) String() string { return proto.CompactTextString(m) }
func (*MarketsDataResponse) ProtoMessage()    {}
func (*MarketsDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{56}
}

func (m *MarketsDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketsDataResponse.Unmarshal(m, b)
}
func (m *MarketsDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketsDataResponse.Marshal(b, m, deterministic)
}
func (m *MarketsDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketsDataResponse.Merge(m, src)
}
func (m *MarketsDataResponse) XXX_Size() int {
	return xxx_messageInfo_MarketsDataResponse.Size(m)
}
func (m *MarketsDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketsDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarketsDataResponse proto.InternalMessageInfo

func (m *MarketsDataResponse) GetMarketsData() []*vega.MarketData {
	if m != nil {
		return m.MarketsData
	}
	return nil
}

// Request for the latest trade that occurred on Vega for a given market
type LastTradeRequest struct {
	// Market identifier, required field
	MarketId             string   `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LastTradeRequest) Reset()         { *m = LastTradeRequest{} }
func (m *LastTradeRequest) String() string { return proto.CompactTextString(m) }
func (*LastTradeRequest) ProtoMessage()    {}
func (*LastTradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{57}
}

func (m *LastTradeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LastTradeRequest.Unmarshal(m, b)
}
func (m *LastTradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LastTradeRequest.Marshal(b, m, deterministic)
}
func (m *LastTradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastTradeRequest.Merge(m, src)
}
func (m *LastTradeRequest) XXX_Size() int {
	return xxx_messageInfo_LastTradeRequest.Size(m)
}
func (m *LastTradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LastTradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LastTradeRequest proto.InternalMessageInfo

func (m *LastTradeRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// Response for the latest trade that occurred on Vega for a given market
type LastTradeResponse struct {
	// A trade, if found
	Trade                *vega.Trade `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LastTradeResponse) Reset()         { *m = LastTradeResponse{} }
func (m *LastTradeResponse) String() string { return proto.CompactTextString(m) }
func (*LastTradeResponse) ProtoMessage()    {}
func (*LastTradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{58}
}

func (m *LastTradeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LastTradeResponse.Unmarshal(m, b)
}
func (m *LastTradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LastTradeResponse.Marshal(b, m, deterministic)
}
func (m *LastTradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastTradeResponse.Merge(m, src)
}
func (m *LastTradeResponse) XXX_Size() int {
	return xxx_messageInfo_LastTradeResponse.Size(m)
}
func (m *LastTradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LastTradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LastTradeResponse proto.InternalMessageInfo

func (m *LastTradeResponse) GetTrade() *vega.Trade {
	if m != nil {
		return m.Trade
	}
	return nil
}

// Request for a market given a market identifier
type MarketByIDRequest struct {
	// Market identifier, required field
	MarketId             string   `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketByIDRequest) Reset()         { *m = MarketByIDRequest{} }
func (m *MarketByIDRequest) String() string { return proto.CompactTextString(m) }
func (*MarketByIDRequest) ProtoMessage()    {}
func (*MarketByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{59}
}

func (m *MarketByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketByIDRequest.Unmarshal(m, b)
}
func (m *MarketByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketByIDRequest.Marshal(b, m, deterministic)
}
func (m *MarketByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketByIDRequest.Merge(m, src)
}
func (m *MarketByIDRequest) XXX_Size() int {
	return xxx_messageInfo_MarketByIDRequest.Size(m)
}
func (m *MarketByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketByIDRequest proto.InternalMessageInfo

func (m *MarketByIDRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// Response for a market given a market identifier
type MarketByIDResponse struct {
	// A market, if found
	Market               *vega.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MarketByIDResponse) Reset()         { *m = MarketByIDResponse{} }
func (m *MarketByIDResponse) String() string { return proto.CompactTextString(m) }
func (*MarketByIDResponse) ProtoMessage()    {}
func (*MarketByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{60}
}

func (m *MarketByIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketByIDResponse.Unmarshal(m, b)
}
func (m *MarketByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketByIDResponse.Marshal(b, m, deterministic)
}
func (m *MarketByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketByIDResponse.Merge(m, src)
}
func (m *MarketByIDResponse) XXX_Size() int {
	return xxx_messageInfo_MarketByIDResponse.Size(m)
}
func (m *MarketByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarketByIDResponse proto.InternalMessageInfo

func (m *MarketByIDResponse) GetMarket() *vega.Market {
	if m != nil {
		return m.Market
	}
	return nil
}

// Request for a party given a party identifier
type PartyByIDRequest struct {
	// Party identifier, required field
	PartyId              string   `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartyByIDRequest) Reset()         { *m = PartyByIDRequest{} }
func (m *PartyByIDRequest) String() string { return proto.CompactTextString(m) }
func (*PartyByIDRequest) ProtoMessage()    {}
func (*PartyByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{61}
}

func (m *PartyByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartyByIDRequest.Unmarshal(m, b)
}
func (m *PartyByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartyByIDRequest.Marshal(b, m, deterministic)
}
func (m *PartyByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartyByIDRequest.Merge(m, src)
}
func (m *PartyByIDRequest) XXX_Size() int {
	return xxx_messageInfo_PartyByIDRequest.Size(m)
}
func (m *PartyByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PartyByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PartyByIDRequest proto.InternalMessageInfo

func (m *PartyByIDRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

// Response for a party given a party identifier
type PartyByIDResponse struct {
	// A party, if found
	Party                *vega.Party `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PartyByIDResponse) Reset()         { *m = PartyByIDResponse{} }
func (m *PartyByIDResponse) String() string { return proto.CompactTextString(m) }
func (*PartyByIDResponse) ProtoMessage()    {}
func (*PartyByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{62}
}

func (m *PartyByIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartyByIDResponse.Unmarshal(m, b)
}
func (m *PartyByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartyByIDResponse.Marshal(b, m, deterministic)
}
func (m *PartyByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartyByIDResponse.Merge(m, src)
}
func (m *PartyByIDResponse) XXX_Size() int {
	return xxx_messageInfo_PartyByIDResponse.Size(m)
}
func (m *PartyByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PartyByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PartyByIDResponse proto.InternalMessageInfo

func (m *PartyByIDResponse) GetParty() *vega.Party {
	if m != nil {
		return m.Party
	}
	return nil
}

// Request for a list of all parties
type PartiesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartiesRequest) Reset()         { *m = PartiesRequest{} }
func (m *PartiesRequest) String() string { return proto.CompactTextString(m) }
func (*PartiesRequest) ProtoMessage()    {}
func (*PartiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{63}
}

func (m *PartiesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartiesRequest.Unmarshal(m, b)
}
func (m *PartiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartiesRequest.Marshal(b, m, deterministic)
}
func (m *PartiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartiesRequest.Merge(m, src)
}
func (m *PartiesRequest) XXX_Size() int {
	return xxx_messageInfo_PartiesRequest.Size(m)
}
func (m *PartiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PartiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PartiesRequest proto.InternalMessageInfo

// Response to a request for a list of parties
type PartiesResponse struct {
	// A list of 0 or more parties
	Parties              []*vega.Party `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PartiesResponse) Reset()         { *m = PartiesResponse{} }
func (m *PartiesResponse) String() string { return proto.CompactTextString(m) }
func (*PartiesResponse) ProtoMessage()    {}
func (*PartiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{64}
}

func (m *PartiesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartiesResponse.Unmarshal(m, b)
}
func (m *PartiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartiesResponse.Marshal(b, m, deterministic)
}
func (m *PartiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartiesResponse.Merge(m, src)
}
func (m *PartiesResponse) XXX_Size() int {
	return xxx_messageInfo_PartiesResponse.Size(m)
}
func (m *PartiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PartiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PartiesResponse proto.InternalMessageInfo

func (m *PartiesResponse) GetParties() []*vega.Party {
	if m != nil {
		return m.Parties
	}
	return nil
}

// Request for a list of trades relating to the given party
// Optionally, the list can be additionally filtered for trades by market
type TradesByPartyRequest struct {
	// Party identifier. Required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Pagination controls
	Pagination           *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TradesByPartyRequest) Reset()         { *m = TradesByPartyRequest{} }
func (m *TradesByPartyRequest) String() string { return proto.CompactTextString(m) }
func (*TradesByPartyRequest) ProtoMessage()    {}
func (*TradesByPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{65}
}

func (m *TradesByPartyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesByPartyRequest.Unmarshal(m, b)
}
func (m *TradesByPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesByPartyRequest.Marshal(b, m, deterministic)
}
func (m *TradesByPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesByPartyRequest.Merge(m, src)
}
func (m *TradesByPartyRequest) XXX_Size() int {
	return xxx_messageInfo_TradesByPartyRequest.Size(m)
}
func (m *TradesByPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesByPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradesByPartyRequest proto.InternalMessageInfo

func (m *TradesByPartyRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *TradesByPartyRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *TradesByPartyRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Response for a list of trades relating to a party
type TradesByPartyResponse struct {
	// A list of 0 or more trades
	Trades               []*vega.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TradesByPartyResponse) Reset()         { *m = TradesByPartyResponse{} }
func (m *TradesByPartyResponse) String() string { return proto.CompactTextString(m) }
func (*TradesByPartyResponse) ProtoMessage()    {}
func (*TradesByPartyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{66}
}

func (m *TradesByPartyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesByPartyResponse.Unmarshal(m, b)
}
func (m *TradesByPartyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesByPartyResponse.Marshal(b, m, deterministic)
}
func (m *TradesByPartyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesByPartyResponse.Merge(m, src)
}
func (m *TradesByPartyResponse) XXX_Size() int {
	return xxx_messageInfo_TradesByPartyResponse.Size(m)
}
func (m *TradesByPartyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesByPartyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TradesByPartyResponse proto.InternalMessageInfo

func (m *TradesByPartyResponse) GetTrades() []*vega.Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

// Request for a list of trades related to an order
type TradesByOrderRequest struct {
	// Order identifier, required field
	OrderId              string   `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradesByOrderRequest) Reset()         { *m = TradesByOrderRequest{} }
func (m *TradesByOrderRequest) String() string { return proto.CompactTextString(m) }
func (*TradesByOrderRequest) ProtoMessage()    {}
func (*TradesByOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{67}
}

func (m *TradesByOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesByOrderRequest.Unmarshal(m, b)
}
func (m *TradesByOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesByOrderRequest.Marshal(b, m, deterministic)
}
func (m *TradesByOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesByOrderRequest.Merge(m, src)
}
func (m *TradesByOrderRequest) XXX_Size() int {
	return xxx_messageInfo_TradesByOrderRequest.Size(m)
}
func (m *TradesByOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesByOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradesByOrderRequest proto.InternalMessageInfo

func (m *TradesByOrderRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

// Response for a list of trades related to an order
type TradesByOrderResponse struct {
	// A list of 0 or more trades
	Trades               []*vega.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TradesByOrderResponse) Reset()         { *m = TradesByOrderResponse{} }
func (m *TradesByOrderResponse) String() string { return proto.CompactTextString(m) }
func (*TradesByOrderResponse) ProtoMessage()    {}
func (*TradesByOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{68}
}

func (m *TradesByOrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesByOrderResponse.Unmarshal(m, b)
}
func (m *TradesByOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesByOrderResponse.Marshal(b, m, deterministic)
}
func (m *TradesByOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesByOrderResponse.Merge(m, src)
}
func (m *TradesByOrderResponse) XXX_Size() int {
	return xxx_messageInfo_TradesByOrderResponse.Size(m)
}
func (m *TradesByOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesByOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TradesByOrderResponse proto.InternalMessageInfo

func (m *TradesByOrderResponse) GetTrades() []*vega.Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

// Request to subscribe to a stream of (Accounts)[#vega.Account]
type AccountsSubscribeRequest struct {
	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Asset identifier
	Asset string `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	// Account type to subscribe to, required field
	Type                 vega.AccountType `protobuf:"varint,4,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AccountsSubscribeRequest) Reset()         { *m = AccountsSubscribeRequest{} }
func (m *AccountsSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*AccountsSubscribeRequest) ProtoMessage()    {}
func (*AccountsSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{69}
}

func (m *AccountsSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountsSubscribeRequest.Unmarshal(m, b)
}
func (m *AccountsSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountsSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *AccountsSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountsSubscribeRequest.Merge(m, src)
}
func (m *AccountsSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_AccountsSubscribeRequest.Size(m)
}
func (m *AccountsSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountsSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountsSubscribeRequest proto.InternalMessageInfo

func (m *AccountsSubscribeRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *AccountsSubscribeRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *AccountsSubscribeRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *AccountsSubscribeRequest) GetType() vega.AccountType {
	if m != nil {
		return m.Type
	}
	return vega.AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

type AccountsSubscribeResponse struct {
	Account              *vega.Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AccountsSubscribeResponse) Reset()         { *m = AccountsSubscribeResponse{} }
func (m *AccountsSubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*AccountsSubscribeResponse) ProtoMessage()    {}
func (*AccountsSubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{70}
}

func (m *AccountsSubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountsSubscribeResponse.Unmarshal(m, b)
}
func (m *AccountsSubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountsSubscribeResponse.Marshal(b, m, deterministic)
}
func (m *AccountsSubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountsSubscribeResponse.Merge(m, src)
}
func (m *AccountsSubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_AccountsSubscribeResponse.Size(m)
}
func (m *AccountsSubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountsSubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountsSubscribeResponse proto.InternalMessageInfo

func (m *AccountsSubscribeResponse) GetAccount() *vega.Account {
	if m != nil {
		return m.Account
	}
	return nil
}

// Request to subscribe to a stream of (Orders)[#vega.Order]
type OrdersSubscribeRequest struct {
	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier
	PartyId              string   `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrdersSubscribeRequest) Reset()         { *m = OrdersSubscribeRequest{} }
func (m *OrdersSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*OrdersSubscribeRequest) ProtoMessage()    {}
func (*OrdersSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{71}
}

func (m *OrdersSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersSubscribeRequest.Unmarshal(m, b)
}
func (m *OrdersSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *OrdersSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersSubscribeRequest.Merge(m, src)
}
func (m *OrdersSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_OrdersSubscribeRequest.Size(m)
}
func (m *OrdersSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersSubscribeRequest proto.InternalMessageInfo

func (m *OrdersSubscribeRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *OrdersSubscribeRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

// Request to subscribe to a stream of (Trades)[#vega.Trade]
type TradesSubscribeRequest struct {
	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier
	PartyId              string   `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradesSubscribeRequest) Reset()         { *m = TradesSubscribeRequest{} }
func (m *TradesSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*TradesSubscribeRequest) ProtoMessage()    {}
func (*TradesSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{72}
}

func (m *TradesSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesSubscribeRequest.Unmarshal(m, b)
}
func (m *TradesSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *TradesSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesSubscribeRequest.Merge(m, src)
}
func (m *TradesSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_TradesSubscribeRequest.Size(m)
}
func (m *TradesSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradesSubscribeRequest proto.InternalMessageInfo

func (m *TradesSubscribeRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *TradesSubscribeRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

// Request to subscribe to a stream of (Candles)[#vega.Candle]
type CandlesSubscribeRequest struct {
	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Time interval for the candles, required field.
	Interval             vega.Interval `protobuf:"varint,2,opt,name=interval,proto3,enum=vega.Interval" json:"interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CandlesSubscribeRequest) Reset()         { *m = CandlesSubscribeRequest{} }
func (m *CandlesSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*CandlesSubscribeRequest) ProtoMessage()    {}
func (*CandlesSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{73}
}

func (m *CandlesSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CandlesSubscribeRequest.Unmarshal(m, b)
}
func (m *CandlesSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CandlesSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *CandlesSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandlesSubscribeRequest.Merge(m, src)
}
func (m *CandlesSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_CandlesSubscribeRequest.Size(m)
}
func (m *CandlesSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CandlesSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CandlesSubscribeRequest proto.InternalMessageInfo

func (m *CandlesSubscribeRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *CandlesSubscribeRequest) GetInterval() vega.Interval {
	if m != nil {
		return m.Interval
	}
	return vega.Interval_INTERVAL_UNSPECIFIED
}

type CandlesSubscribeResponse struct {
	Candle               *vega.Candle `protobuf:"bytes,1,opt,name=candle,proto3" json:"candle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CandlesSubscribeResponse) Reset()         { *m = CandlesSubscribeResponse{} }
func (m *CandlesSubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*CandlesSubscribeResponse) ProtoMessage()    {}
func (*CandlesSubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{74}
}

func (m *CandlesSubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CandlesSubscribeResponse.Unmarshal(m, b)
}
func (m *CandlesSubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CandlesSubscribeResponse.Marshal(b, m, deterministic)
}
func (m *CandlesSubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandlesSubscribeResponse.Merge(m, src)
}
func (m *CandlesSubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_CandlesSubscribeResponse.Size(m)
}
func (m *CandlesSubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CandlesSubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CandlesSubscribeResponse proto.InternalMessageInfo

func (m *CandlesSubscribeResponse) GetCandle() *vega.Candle {
	if m != nil {
		return m.Candle
	}
	return nil
}

// Request to subscribe to a stream of (MarketDepth)[#vega.MarketDepth] data
type MarketDepthSubscribeRequest struct {
	// Market identifier, required field.
	MarketId             string   `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketDepthSubscribeRequest) Reset()         { *m = MarketDepthSubscribeRequest{} }
func (m *MarketDepthSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*MarketDepthSubscribeRequest) ProtoMessage()    {}
func (*MarketDepthSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{75}
}

func (m *MarketDepthSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDepthSubscribeRequest.Unmarshal(m, b)
}
func (m *MarketDepthSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDepthSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *MarketDepthSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDepthSubscribeRequest.Merge(m, src)
}
func (m *MarketDepthSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_MarketDepthSubscribeRequest.Size(m)
}
func (m *MarketDepthSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDepthSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDepthSubscribeRequest proto.InternalMessageInfo

func (m *MarketDepthSubscribeRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type MarketDepthSubscribeResponse struct {
	MarketDepth          *vega.MarketDepth `protobuf:"bytes,1,opt,name=market_depth,json=marketDepth,proto3" json:"market_depth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MarketDepthSubscribeResponse) Reset()         { *m = MarketDepthSubscribeResponse{} }
func (m *MarketDepthSubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*MarketDepthSubscribeResponse) ProtoMessage()    {}
func (*MarketDepthSubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{76}
}

func (m *MarketDepthSubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDepthSubscribeResponse.Unmarshal(m, b)
}
func (m *MarketDepthSubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDepthSubscribeResponse.Marshal(b, m, deterministic)
}
func (m *MarketDepthSubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDepthSubscribeResponse.Merge(m, src)
}
func (m *MarketDepthSubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_MarketDepthSubscribeResponse.Size(m)
}
func (m *MarketDepthSubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDepthSubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDepthSubscribeResponse proto.InternalMessageInfo

func (m *MarketDepthSubscribeResponse) GetMarketDepth() *vega.MarketDepth {
	if m != nil {
		return m.MarketDepth
	}
	return nil
}

// Request to subscribe to a stream of (MarketDepth Update)[#vega.MarketDepthUpdate] data
type MarketDepthUpdatesSubscribeRequest struct {
	// Market identifier, required field
	MarketId             string   `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketDepthUpdatesSubscribeRequest) Reset()         { *m = MarketDepthUpdatesSubscribeRequest{} }
func (m *MarketDepthUpdatesSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*MarketDepthUpdatesSubscribeRequest) ProtoMessage()    {}
func (*MarketDepthUpdatesSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{77}
}

func (m *MarketDepthUpdatesSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDepthUpdatesSubscribeRequest.Unmarshal(m, b)
}
func (m *MarketDepthUpdatesSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDepthUpdatesSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *MarketDepthUpdatesSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDepthUpdatesSubscribeRequest.Merge(m, src)
}
func (m *MarketDepthUpdatesSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_MarketDepthUpdatesSubscribeRequest.Size(m)
}
func (m *MarketDepthUpdatesSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDepthUpdatesSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDepthUpdatesSubscribeRequest proto.InternalMessageInfo

func (m *MarketDepthUpdatesSubscribeRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type MarketDepthUpdatesSubscribeResponse struct {
	Update               *vega.MarketDepthUpdate `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *MarketDepthUpdatesSubscribeResponse) Reset()         { *m = MarketDepthUpdatesSubscribeResponse{} }
func (m *MarketDepthUpdatesSubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*MarketDepthUpdatesSubscribeResponse) ProtoMessage()    {}
func (*MarketDepthUpdatesSubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{78}
}

func (m *MarketDepthUpdatesSubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDepthUpdatesSubscribeResponse.Unmarshal(m, b)
}
func (m *MarketDepthUpdatesSubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDepthUpdatesSubscribeResponse.Marshal(b, m, deterministic)
}
func (m *MarketDepthUpdatesSubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDepthUpdatesSubscribeResponse.Merge(m, src)
}
func (m *MarketDepthUpdatesSubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_MarketDepthUpdatesSubscribeResponse.Size(m)
}
func (m *MarketDepthUpdatesSubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDepthUpdatesSubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDepthUpdatesSubscribeResponse proto.InternalMessageInfo

func (m *MarketDepthUpdatesSubscribeResponse) GetUpdate() *vega.MarketDepthUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

// Request to subscribe to a stream of (Positions)[#vega.Position]
type PositionsSubscribeRequest struct {
	// Party identifier, optional field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier, optional field
	MarketId             string   `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PositionsSubscribeRequest) Reset()         { *m = PositionsSubscribeRequest{} }
func (m *PositionsSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*PositionsSubscribeRequest) ProtoMessage()    {}
func (*PositionsSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{79}
}

func (m *PositionsSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionsSubscribeRequest.Unmarshal(m, b)
}
func (m *PositionsSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionsSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *PositionsSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionsSubscribeRequest.Merge(m, src)
}
func (m *PositionsSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_PositionsSubscribeRequest.Size(m)
}
func (m *PositionsSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionsSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PositionsSubscribeRequest proto.InternalMessageInfo

func (m *PositionsSubscribeRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *PositionsSubscribeRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type PositionsSubscribeResponse struct {
	Position             *vega.Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PositionsSubscribeResponse) Reset()         { *m = PositionsSubscribeResponse{} }
func (m *PositionsSubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*PositionsSubscribeResponse) ProtoMessage()    {}
func (*PositionsSubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{80}
}

func (m *PositionsSubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionsSubscribeResponse.Unmarshal(m, b)
}
func (m *PositionsSubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionsSubscribeResponse.Marshal(b, m, deterministic)
}
func (m *PositionsSubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionsSubscribeResponse.Merge(m, src)
}
func (m *PositionsSubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_PositionsSubscribeResponse.Size(m)
}
func (m *PositionsSubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionsSubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PositionsSubscribeResponse proto.InternalMessageInfo

func (m *PositionsSubscribeResponse) GetPosition() *vega.Position {
	if m != nil {
		return m.Position
	}
	return nil
}

// Request for a list of orders for a market
type OrdersByMarketRequest struct {
	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Optional pagination controls
	Pagination           *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrdersByMarketRequest) Reset()         { *m = OrdersByMarketRequest{} }
func (m *OrdersByMarketRequest) String() string { return proto.CompactTextString(m) }
func (*OrdersByMarketRequest) ProtoMessage()    {}
func (*OrdersByMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{81}
}

func (m *OrdersByMarketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersByMarketRequest.Unmarshal(m, b)
}
func (m *OrdersByMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersByMarketRequest.Marshal(b, m, deterministic)
}
func (m *OrdersByMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersByMarketRequest.Merge(m, src)
}
func (m *OrdersByMarketRequest) XXX_Size() int {
	return xxx_messageInfo_OrdersByMarketRequest.Size(m)
}
func (m *OrdersByMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersByMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersByMarketRequest proto.InternalMessageInfo

func (m *OrdersByMarketRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *OrdersByMarketRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Response for a list of orders for a market
type OrdersByMarketResponse struct {
	// A list of 0 or more orders
	Orders               []*vega.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OrdersByMarketResponse) Reset()         { *m = OrdersByMarketResponse{} }
func (m *OrdersByMarketResponse) String() string { return proto.CompactTextString(m) }
func (*OrdersByMarketResponse) ProtoMessage()    {}
func (*OrdersByMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{82}
}

func (m *OrdersByMarketResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersByMarketResponse.Unmarshal(m, b)
}
func (m *OrdersByMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersByMarketResponse.Marshal(b, m, deterministic)
}
func (m *OrdersByMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersByMarketResponse.Merge(m, src)
}
func (m *OrdersByMarketResponse) XXX_Size() int {
	return xxx_messageInfo_OrdersByMarketResponse.Size(m)
}
func (m *OrdersByMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersByMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersByMarketResponse proto.InternalMessageInfo

func (m *OrdersByMarketResponse) GetOrders() []*vega.Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

// Request for a list of orders for a party
type OrdersByPartyRequest struct {
	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Pagination controls
	Pagination           *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrdersByPartyRequest) Reset()         { *m = OrdersByPartyRequest{} }
func (m *OrdersByPartyRequest) String() string { return proto.CompactTextString(m) }
func (*OrdersByPartyRequest) ProtoMessage()    {}
func (*OrdersByPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{83}
}

func (m *OrdersByPartyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersByPartyRequest.Unmarshal(m, b)
}
func (m *OrdersByPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersByPartyRequest.Marshal(b, m, deterministic)
}
func (m *OrdersByPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersByPartyRequest.Merge(m, src)
}
func (m *OrdersByPartyRequest) XXX_Size() int {
	return xxx_messageInfo_OrdersByPartyRequest.Size(m)
}
func (m *OrdersByPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersByPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersByPartyRequest proto.InternalMessageInfo

func (m *OrdersByPartyRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *OrdersByPartyRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Response for a list of orders for a party
type OrdersByPartyResponse struct {
	// A list of 0 or more orders
	Orders               []*vega.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OrdersByPartyResponse) Reset()         { *m = OrdersByPartyResponse{} }
func (m *OrdersByPartyResponse) String() string { return proto.CompactTextString(m) }
func (*OrdersByPartyResponse) ProtoMessage()    {}
func (*OrdersByPartyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{84}
}

func (m *OrdersByPartyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersByPartyResponse.Unmarshal(m, b)
}
func (m *OrdersByPartyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersByPartyResponse.Marshal(b, m, deterministic)
}
func (m *OrdersByPartyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersByPartyResponse.Merge(m, src)
}
func (m *OrdersByPartyResponse) XXX_Size() int {
	return xxx_messageInfo_OrdersByPartyResponse.Size(m)
}
func (m *OrdersByPartyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersByPartyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersByPartyResponse proto.InternalMessageInfo

func (m *OrdersByPartyResponse) GetOrders() []*vega.Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

// Request for an order on a market given an order identifier
type OrderByMarketAndIDRequest struct {
	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Order identifier, required field
	OrderId              string   `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderByMarketAndIDRequest) Reset()         { *m = OrderByMarketAndIDRequest{} }
func (m *OrderByMarketAndIDRequest) String() string { return proto.CompactTextString(m) }
func (*OrderByMarketAndIDRequest) ProtoMessage()    {}
func (*OrderByMarketAndIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{85}
}

func (m *OrderByMarketAndIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderByMarketAndIDRequest.Unmarshal(m, b)
}
func (m *OrderByMarketAndIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderByMarketAndIDRequest.Marshal(b, m, deterministic)
}
func (m *OrderByMarketAndIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderByMarketAndIDRequest.Merge(m, src)
}
func (m *OrderByMarketAndIDRequest) XXX_Size() int {
	return xxx_messageInfo_OrderByMarketAndIDRequest.Size(m)
}
func (m *OrderByMarketAndIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderByMarketAndIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderByMarketAndIDRequest proto.InternalMessageInfo

func (m *OrderByMarketAndIDRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *OrderByMarketAndIDRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

// Response for an order on a market given an order identifier
type OrderByMarketAndIDResponse struct {
	// An order, if found
	Order                *vega.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrderByMarketAndIDResponse) Reset()         { *m = OrderByMarketAndIDResponse{} }
func (m *OrderByMarketAndIDResponse) String() string { return proto.CompactTextString(m) }
func (*OrderByMarketAndIDResponse) ProtoMessage()    {}
func (*OrderByMarketAndIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{86}
}

func (m *OrderByMarketAndIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderByMarketAndIDResponse.Unmarshal(m, b)
}
func (m *OrderByMarketAndIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderByMarketAndIDResponse.Marshal(b, m, deterministic)
}
func (m *OrderByMarketAndIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderByMarketAndIDResponse.Merge(m, src)
}
func (m *OrderByMarketAndIDResponse) XXX_Size() int {
	return xxx_messageInfo_OrderByMarketAndIDResponse.Size(m)
}
func (m *OrderByMarketAndIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderByMarketAndIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrderByMarketAndIDResponse proto.InternalMessageInfo

func (m *OrderByMarketAndIDResponse) GetOrder() *vega.Order {
	if m != nil {
		return m.Order
	}
	return nil
}

// Request for an order given an order reference
type OrderByReferenceRequest struct {
	// Unique reference, required field
	Reference            string   `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderByReferenceRequest) Reset()         { *m = OrderByReferenceRequest{} }
func (m *OrderByReferenceRequest) String() string { return proto.CompactTextString(m) }
func (*OrderByReferenceRequest) ProtoMessage()    {}
func (*OrderByReferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{87}
}

func (m *OrderByReferenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderByReferenceRequest.Unmarshal(m, b)
}
func (m *OrderByReferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderByReferenceRequest.Marshal(b, m, deterministic)
}
func (m *OrderByReferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderByReferenceRequest.Merge(m, src)
}
func (m *OrderByReferenceRequest) XXX_Size() int {
	return xxx_messageInfo_OrderByReferenceRequest.Size(m)
}
func (m *OrderByReferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderByReferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderByReferenceRequest proto.InternalMessageInfo

func (m *OrderByReferenceRequest) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

// Response for an order given an order reference
type OrderByReferenceResponse struct {
	// An order, if found
	Order                *vega.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrderByReferenceResponse) Reset()         { *m = OrderByReferenceResponse{} }
func (m *OrderByReferenceResponse) String() string { return proto.CompactTextString(m) }
func (*OrderByReferenceResponse) ProtoMessage()    {}
func (*OrderByReferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{88}
}

func (m *OrderByReferenceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderByReferenceResponse.Unmarshal(m, b)
}
func (m *OrderByReferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderByReferenceResponse.Marshal(b, m, deterministic)
}
func (m *OrderByReferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderByReferenceResponse.Merge(m, src)
}
func (m *OrderByReferenceResponse) XXX_Size() int {
	return xxx_messageInfo_OrderByReferenceResponse.Size(m)
}
func (m *OrderByReferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderByReferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrderByReferenceResponse proto.InternalMessageInfo

func (m *OrderByReferenceResponse) GetOrder() *vega.Order {
	if m != nil {
		return m.Order
	}
	return nil
}

// Request for a list of markets on Vega
type MarketsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketsRequest) Reset()         { *m = MarketsRequest{} }
func (m *MarketsRequest) String() string { return proto.CompactTextString(m) }
func (*MarketsRequest) ProtoMessage()    {}
func (*MarketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{89}
}

func (m *MarketsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketsRequest.Unmarshal(m, b)
}
func (m *MarketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketsRequest.Marshal(b, m, deterministic)
}
func (m *MarketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketsRequest.Merge(m, src)
}
func (m *MarketsRequest) XXX_Size() int {
	return xxx_messageInfo_MarketsRequest.Size(m)
}
func (m *MarketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketsRequest proto.InternalMessageInfo

// Response for a list of markets on Vega
type MarketsResponse struct {
	// A list of 0 or more markets
	Markets              []*vega.Market `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MarketsResponse) Reset()         { *m = MarketsResponse{} }
func (m *MarketsResponse) String() string { return proto.CompactTextString(m) }
func (*MarketsResponse) ProtoMessage()    {}
func (*MarketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{90}
}

func (m *MarketsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketsResponse.Unmarshal(m, b)
}
func (m *MarketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketsResponse.Marshal(b, m, deterministic)
}
func (m *MarketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketsResponse.Merge(m, src)
}
func (m *MarketsResponse) XXX_Size() int {
	return xxx_messageInfo_MarketsResponse.Size(m)
}
func (m *MarketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarketsResponse proto.InternalMessageInfo

func (m *MarketsResponse) GetMarkets() []*vega.Market {
	if m != nil {
		return m.Markets
	}
	return nil
}

// Request for a list of candles for a market at an interval
type CandlesRequest struct {
	// Market identifier, required field.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Timestamp to retrieve candles since, in nanoseconds since the epoch,
	// required field - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	SinceTimestamp int64 `protobuf:"varint,2,opt,name=since_timestamp,json=sinceTimestamp,proto3" json:"since_timestamp,omitempty"`
	// Time interval for the candles, required field
	Interval             vega.Interval `protobuf:"varint,3,opt,name=interval,proto3,enum=vega.Interval" json:"interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CandlesRequest) Reset()         { *m = CandlesRequest{} }
func (m *CandlesRequest) String() string { return proto.CompactTextString(m) }
func (*CandlesRequest) ProtoMessage()    {}
func (*CandlesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{91}
}

func (m *CandlesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CandlesRequest.Unmarshal(m, b)
}
func (m *CandlesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CandlesRequest.Marshal(b, m, deterministic)
}
func (m *CandlesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandlesRequest.Merge(m, src)
}
func (m *CandlesRequest) XXX_Size() int {
	return xxx_messageInfo_CandlesRequest.Size(m)
}
func (m *CandlesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CandlesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CandlesRequest proto.InternalMessageInfo

func (m *CandlesRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *CandlesRequest) GetSinceTimestamp() int64 {
	if m != nil {
		return m.SinceTimestamp
	}
	return 0
}

func (m *CandlesRequest) GetInterval() vega.Interval {
	if m != nil {
		return m.Interval
	}
	return vega.Interval_INTERVAL_UNSPECIFIED
}

// Response for a list of candles for a market at an interval
type CandlesResponse struct {
	// A list of 0 or more candles
	Candles              []*vega.Candle `protobuf:"bytes,1,rep,name=candles,proto3" json:"candles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CandlesResponse) Reset()         { *m = CandlesResponse{} }
func (m *CandlesResponse) String() string { return proto.CompactTextString(m) }
func (*CandlesResponse) ProtoMessage()    {}
func (*CandlesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{92}
}

func (m *CandlesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CandlesResponse.Unmarshal(m, b)
}
func (m *CandlesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CandlesResponse.Marshal(b, m, deterministic)
}
func (m *CandlesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandlesResponse.Merge(m, src)
}
func (m *CandlesResponse) XXX_Size() int {
	return xxx_messageInfo_CandlesResponse.Size(m)
}
func (m *CandlesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CandlesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CandlesResponse proto.InternalMessageInfo

func (m *CandlesResponse) GetCandles() []*vega.Candle {
	if m != nil {
		return m.Candles
	}
	return nil
}

// Request for the market depth/order book price levels on a market
// Optionally, a maximum depth can be set to limit the number of levels returned
type MarketDepthRequest struct {
	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Max depth limits the number of levels returned. Default is 0, which returns all levels
	MaxDepth             uint64   `protobuf:"varint,2,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketDepthRequest) Reset()         { *m = MarketDepthRequest{} }
func (m *MarketDepthRequest) String() string { return proto.CompactTextString(m) }
func (*MarketDepthRequest) ProtoMessage()    {}
func (*MarketDepthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{93}
}

func (m *MarketDepthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDepthRequest.Unmarshal(m, b)
}
func (m *MarketDepthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDepthRequest.Marshal(b, m, deterministic)
}
func (m *MarketDepthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDepthRequest.Merge(m, src)
}
func (m *MarketDepthRequest) XXX_Size() int {
	return xxx_messageInfo_MarketDepthRequest.Size(m)
}
func (m *MarketDepthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDepthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDepthRequest proto.InternalMessageInfo

func (m *MarketDepthRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *MarketDepthRequest) GetMaxDepth() uint64 {
	if m != nil {
		return m.MaxDepth
	}
	return 0
}

// Response for the market depth/order book price levels on a market
type MarketDepthResponse struct {
	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Zero or more price levels for the buy side of the market depth data
	Buy []*vega.PriceLevel `protobuf:"bytes,2,rep,name=buy,proto3" json:"buy,omitempty"`
	// Zero or more price levels for the sell side of the market depth data
	Sell []*vega.PriceLevel `protobuf:"bytes,3,rep,name=sell,proto3" json:"sell,omitempty"`
	// Last trade recorded on Vega at the time of retrieving the `MarketDepthResponse`
	LastTrade *vega.Trade `protobuf:"bytes,4,opt,name=last_trade,json=lastTrade,proto3" json:"last_trade,omitempty"`
	// Sequence number incremented after each update
	SequenceNumber       uint64   `protobuf:"varint,5,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketDepthResponse) Reset()         { *m = MarketDepthResponse{} }
func (m *MarketDepthResponse) String() string { return proto.CompactTextString(m) }
func (*MarketDepthResponse) ProtoMessage()    {}
func (*MarketDepthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{94}
}

func (m *MarketDepthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDepthResponse.Unmarshal(m, b)
}
func (m *MarketDepthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDepthResponse.Marshal(b, m, deterministic)
}
func (m *MarketDepthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDepthResponse.Merge(m, src)
}
func (m *MarketDepthResponse) XXX_Size() int {
	return xxx_messageInfo_MarketDepthResponse.Size(m)
}
func (m *MarketDepthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDepthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDepthResponse proto.InternalMessageInfo

func (m *MarketDepthResponse) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *MarketDepthResponse) GetBuy() []*vega.PriceLevel {
	if m != nil {
		return m.Buy
	}
	return nil
}

func (m *MarketDepthResponse) GetSell() []*vega.PriceLevel {
	if m != nil {
		return m.Sell
	}
	return nil
}

func (m *MarketDepthResponse) GetLastTrade() *vega.Trade {
	if m != nil {
		return m.LastTrade
	}
	return nil
}

func (m *MarketDepthResponse) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

// Request for a list of trades on a market
type TradesByMarketRequest struct {
	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Pagination controls
	Pagination           *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TradesByMarketRequest) Reset()         { *m = TradesByMarketRequest{} }
func (m *TradesByMarketRequest) String() string { return proto.CompactTextString(m) }
func (*TradesByMarketRequest) ProtoMessage()    {}
func (*TradesByMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{95}
}

func (m *TradesByMarketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesByMarketRequest.Unmarshal(m, b)
}
func (m *TradesByMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesByMarketRequest.Marshal(b, m, deterministic)
}
func (m *TradesByMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesByMarketRequest.Merge(m, src)
}
func (m *TradesByMarketRequest) XXX_Size() int {
	return xxx_messageInfo_TradesByMarketRequest.Size(m)
}
func (m *TradesByMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesByMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradesByMarketRequest proto.InternalMessageInfo

func (m *TradesByMarketRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *TradesByMarketRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Response for a list of trades on a market
type TradesByMarketResponse struct {
	// A list of 0 or more trades
	Trades               []*vega.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TradesByMarketResponse) Reset()         { *m = TradesByMarketResponse{} }
func (m *TradesByMarketResponse) String() string { return proto.CompactTextString(m) }
func (*TradesByMarketResponse) ProtoMessage()    {}
func (*TradesByMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{96}
}

func (m *TradesByMarketResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesByMarketResponse.Unmarshal(m, b)
}
func (m *TradesByMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesByMarketResponse.Marshal(b, m, deterministic)
}
func (m *TradesByMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesByMarketResponse.Merge(m, src)
}
func (m *TradesByMarketResponse) XXX_Size() int {
	return xxx_messageInfo_TradesByMarketResponse.Size(m)
}
func (m *TradesByMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesByMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TradesByMarketResponse proto.InternalMessageInfo

func (m *TradesByMarketResponse) GetTrades() []*vega.Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

// Request for a list of positions for a party
// Optionally, if a market identifier is set, the results will be filtered for that market only
type PositionsByPartyRequest struct {
	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId             string   `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PositionsByPartyRequest) Reset()         { *m = PositionsByPartyRequest{} }
func (m *PositionsByPartyRequest) String() string { return proto.CompactTextString(m) }
func (*PositionsByPartyRequest) ProtoMessage()    {}
func (*PositionsByPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{97}
}

func (m *PositionsByPartyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionsByPartyRequest.Unmarshal(m, b)
}
func (m *PositionsByPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionsByPartyRequest.Marshal(b, m, deterministic)
}
func (m *PositionsByPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionsByPartyRequest.Merge(m, src)
}
func (m *PositionsByPartyRequest) XXX_Size() int {
	return xxx_messageInfo_PositionsByPartyRequest.Size(m)
}
func (m *PositionsByPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionsByPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PositionsByPartyRequest proto.InternalMessageInfo

func (m *PositionsByPartyRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *PositionsByPartyRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// Response for a list of positions for a party
type PositionsByPartyResponse struct {
	// A list of 0 or more positions
	Positions            []*vega.Position `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PositionsByPartyResponse) Reset()         { *m = PositionsByPartyResponse{} }
func (m *PositionsByPartyResponse) String() string { return proto.CompactTextString(m) }
func (*PositionsByPartyResponse) ProtoMessage()    {}
func (*PositionsByPartyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{98}
}

func (m *PositionsByPartyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionsByPartyResponse.Unmarshal(m, b)
}
func (m *PositionsByPartyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionsByPartyResponse.Marshal(b, m, deterministic)
}
func (m *PositionsByPartyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionsByPartyResponse.Merge(m, src)
}
func (m *PositionsByPartyResponse) XXX_Size() int {
	return xxx_messageInfo_PositionsByPartyResponse.Size(m)
}
func (m *PositionsByPartyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionsByPartyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PositionsByPartyResponse proto.InternalMessageInfo

func (m *PositionsByPartyResponse) GetPositions() []*vega.Position {
	if m != nil {
		return m.Positions
	}
	return nil
}

// Request for the current time of the vega network
type GetVegaTimeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVegaTimeRequest) Reset()         { *m = GetVegaTimeRequest{} }
func (m *GetVegaTimeRequest) String() string { return proto.CompactTextString(m) }
func (*GetVegaTimeRequest) ProtoMessage()    {}
func (*GetVegaTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{99}
}

func (m *GetVegaTimeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVegaTimeRequest.Unmarshal(m, b)
}
func (m *GetVegaTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVegaTimeRequest.Marshal(b, m, deterministic)
}
func (m *GetVegaTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVegaTimeRequest.Merge(m, src)
}
func (m *GetVegaTimeRequest) XXX_Size() int {
	return xxx_messageInfo_GetVegaTimeRequest.Size(m)
}
func (m *GetVegaTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVegaTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVegaTimeRequest proto.InternalMessageInfo

// Response for the current consensus coordinated time on the Vega network, referred to as "VegaTime"
type GetVegaTimeResponse struct {
	// Timestamp representation of current VegaTime as represented in
	// Nanoseconds since the epoch, for example `1580473859111222333` corresponds to `2020-01-31T12:30:59.111222333Z`
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVegaTimeResponse) Reset()         { *m = GetVegaTimeResponse{} }
func (m *GetVegaTimeResponse) String() string { return proto.CompactTextString(m) }
func (*GetVegaTimeResponse) ProtoMessage()    {}
func (*GetVegaTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{100}
}

func (m *GetVegaTimeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVegaTimeResponse.Unmarshal(m, b)
}
func (m *GetVegaTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVegaTimeResponse.Marshal(b, m, deterministic)
}
func (m *GetVegaTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVegaTimeResponse.Merge(m, src)
}
func (m *GetVegaTimeResponse) XXX_Size() int {
	return xxx_messageInfo_GetVegaTimeResponse.Size(m)
}
func (m *GetVegaTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVegaTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVegaTimeResponse proto.InternalMessageInfo

func (m *GetVegaTimeResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Pagination controls
type Pagination struct {
	// Skip the number of records specified, default is 0
	Skip uint64 `protobuf:"varint,1,opt,name=skip,proto3" json:"skip,omitempty"`
	// Limit the number of returned records to the value specified, default is 50
	Limit uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Descending reverses the order of the records returned,
	// default is true, if false the results will be returned in ascending order
	Descending           bool     `protobuf:"varint,3,opt,name=descending,proto3" json:"descending,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pagination) Reset()         { *m = Pagination{} }
func (m *Pagination) String() string { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()    {}
func (*Pagination) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{101}
}

func (m *Pagination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pagination.Unmarshal(m, b)
}
func (m *Pagination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pagination.Marshal(b, m, deterministic)
}
func (m *Pagination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pagination.Merge(m, src)
}
func (m *Pagination) XXX_Size() int {
	return xxx_messageInfo_Pagination.Size(m)
}
func (m *Pagination) XXX_DiscardUnknown() {
	xxx_messageInfo_Pagination.DiscardUnknown(m)
}

var xxx_messageInfo_Pagination proto.InternalMessageInfo

func (m *Pagination) GetSkip() uint64 {
	if m != nil {
		return m.Skip
	}
	return 0
}

func (m *Pagination) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Pagination) GetDescending() bool {
	if m != nil {
		return m.Descending
	}
	return false
}

// A stream of orders
type OrdersSubscribeResponse struct {
	// A list of 0 or more orders
	Orders               []*vega.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OrdersSubscribeResponse) Reset()         { *m = OrdersSubscribeResponse{} }
func (m *OrdersSubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*OrdersSubscribeResponse) ProtoMessage()    {}
func (*OrdersSubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{102}
}

func (m *OrdersSubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersSubscribeResponse.Unmarshal(m, b)
}
func (m *OrdersSubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersSubscribeResponse.Marshal(b, m, deterministic)
}
func (m *OrdersSubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersSubscribeResponse.Merge(m, src)
}
func (m *OrdersSubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_OrdersSubscribeResponse.Size(m)
}
func (m *OrdersSubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersSubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersSubscribeResponse proto.InternalMessageInfo

func (m *OrdersSubscribeResponse) GetOrders() []*vega.Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

// A stream of trades
type TradesSubscribeResponse struct {
	// A list of 0 or more trades
	Trades               []*vega.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TradesSubscribeResponse) Reset()         { *m = TradesSubscribeResponse{} }
func (m *TradesSubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*TradesSubscribeResponse) ProtoMessage()    {}
func (*TradesSubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{103}
}

func (m *TradesSubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesSubscribeResponse.Unmarshal(m, b)
}
func (m *TradesSubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesSubscribeResponse.Marshal(b, m, deterministic)
}
func (m *TradesSubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesSubscribeResponse.Merge(m, src)
}
func (m *TradesSubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_TradesSubscribeResponse.Size(m)
}
func (m *TradesSubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesSubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TradesSubscribeResponse proto.InternalMessageInfo

func (m *TradesSubscribeResponse) GetTrades() []*vega.Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

type TransferResponsesSubscribeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferResponsesSubscribeRequest) Reset()         { *m = TransferResponsesSubscribeRequest{} }
func (m *TransferResponsesSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*TransferResponsesSubscribeRequest) ProtoMessage()    {}
func (*TransferResponsesSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{104}
}

func (m *TransferResponsesSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferResponsesSubscribeRequest.Unmarshal(m, b)
}
func (m *TransferResponsesSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferResponsesSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *TransferResponsesSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferResponsesSubscribeRequest.Merge(m, src)
}
func (m *TransferResponsesSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_TransferResponsesSubscribeRequest.Size(m)
}
func (m *TransferResponsesSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferResponsesSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferResponsesSubscribeRequest proto.InternalMessageInfo

type TransferResponsesSubscribeResponse struct {
	Response             *vega.TransferResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TransferResponsesSubscribeResponse) Reset()         { *m = TransferResponsesSubscribeResponse{} }
func (m *TransferResponsesSubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*TransferResponsesSubscribeResponse) ProtoMessage()    {}
func (*TransferResponsesSubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{105}
}

func (m *TransferResponsesSubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferResponsesSubscribeResponse.Unmarshal(m, b)
}
func (m *TransferResponsesSubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferResponsesSubscribeResponse.Marshal(b, m, deterministic)
}
func (m *TransferResponsesSubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferResponsesSubscribeResponse.Merge(m, src)
}
func (m *TransferResponsesSubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_TransferResponsesSubscribeResponse.Size(m)
}
func (m *TransferResponsesSubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferResponsesSubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferResponsesSubscribeResponse proto.InternalMessageInfo

func (m *TransferResponsesSubscribeResponse) GetResponse() *vega.TransferResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Request for a list of accounts for a party
type PartyAccountsRequest struct {
	// Party identifier
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Account type, required field
	Type vega.AccountType `protobuf:"varint,3,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
	// Asset identifier
	Asset                string   `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartyAccountsRequest) Reset()         { *m = PartyAccountsRequest{} }
func (m *PartyAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*PartyAccountsRequest) ProtoMessage()    {}
func (*PartyAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{106}
}

func (m *PartyAccountsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartyAccountsRequest.Unmarshal(m, b)
}
func (m *PartyAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartyAccountsRequest.Marshal(b, m, deterministic)
}
func (m *PartyAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartyAccountsRequest.Merge(m, src)
}
func (m *PartyAccountsRequest) XXX_Size() int {
	return xxx_messageInfo_PartyAccountsRequest.Size(m)
}
func (m *PartyAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PartyAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PartyAccountsRequest proto.InternalMessageInfo

func (m *PartyAccountsRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *PartyAccountsRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *PartyAccountsRequest) GetType() vega.AccountType {
	if m != nil {
		return m.Type
	}
	return vega.AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (m *PartyAccountsRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

// Response for a list of accounts for a party
type PartyAccountsResponse struct {
	// A list of 0 or more accounts
	Accounts             []*vega.Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PartyAccountsResponse) Reset()         { *m = PartyAccountsResponse{} }
func (m *PartyAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*PartyAccountsResponse) ProtoMessage()    {}
func (*PartyAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{107}
}

func (m *PartyAccountsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartyAccountsResponse.Unmarshal(m, b)
}
func (m *PartyAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartyAccountsResponse.Marshal(b, m, deterministic)
}
func (m *PartyAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartyAccountsResponse.Merge(m, src)
}
func (m *PartyAccountsResponse) XXX_Size() int {
	return xxx_messageInfo_PartyAccountsResponse.Size(m)
}
func (m *PartyAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PartyAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PartyAccountsResponse proto.InternalMessageInfo

func (m *PartyAccountsResponse) GetAccounts() []*vega.Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// Request for a list of accounts for a market
type MarketAccountsRequest struct {
	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Asset identifier
	Asset                string   `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketAccountsRequest) Reset()         { *m = MarketAccountsRequest{} }
func (m *MarketAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*MarketAccountsRequest) ProtoMessage()    {}
func (*MarketAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{108}
}

func (m *MarketAccountsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketAccountsRequest.Unmarshal(m, b)
}
func (m *MarketAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketAccountsRequest.Marshal(b, m, deterministic)
}
func (m *MarketAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketAccountsRequest.Merge(m, src)
}
func (m *MarketAccountsRequest) XXX_Size() int {
	return xxx_messageInfo_MarketAccountsRequest.Size(m)
}
func (m *MarketAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketAccountsRequest proto.InternalMessageInfo

func (m *MarketAccountsRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *MarketAccountsRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

// Response for a list of accounts for a market
type MarketAccountsResponse struct {
	// A list of 0 or more accounts
	Accounts             []*vega.Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MarketAccountsResponse) Reset()         { *m = MarketAccountsResponse{} }
func (m *MarketAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*MarketAccountsResponse) ProtoMessage()    {}
func (*MarketAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{109}
}

func (m *MarketAccountsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketAccountsResponse.Unmarshal(m, b)
}
func (m *MarketAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketAccountsResponse.Marshal(b, m, deterministic)
}
func (m *MarketAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketAccountsResponse.Merge(m, src)
}
func (m *MarketAccountsResponse) XXX_Size() int {
	return xxx_messageInfo_MarketAccountsResponse.Size(m)
}
func (m *MarketAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarketAccountsResponse proto.InternalMessageInfo

func (m *MarketAccountsResponse) GetAccounts() []*vega.Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// Request for a list of infrastructure fee accounts
type FeeInfrastructureAccountsRequest struct {
	// Asset identifier, required field
	// - Set to an empty string to return all accounts
	// - Set to an asset ID to return a single infrastructure fee account for a given asset
	Asset                string   `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeeInfrastructureAccountsRequest) Reset()         { *m = FeeInfrastructureAccountsRequest{} }
func (m *FeeInfrastructureAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*FeeInfrastructureAccountsRequest) ProtoMessage()    {}
func (*FeeInfrastructureAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{110}
}

func (m *FeeInfrastructureAccountsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeeInfrastructureAccountsRequest.Unmarshal(m, b)
}
func (m *FeeInfrastructureAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeeInfrastructureAccountsRequest.Marshal(b, m, deterministic)
}
func (m *FeeInfrastructureAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeInfrastructureAccountsRequest.Merge(m, src)
}
func (m *FeeInfrastructureAccountsRequest) XXX_Size() int {
	return xxx_messageInfo_FeeInfrastructureAccountsRequest.Size(m)
}
func (m *FeeInfrastructureAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeInfrastructureAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FeeInfrastructureAccountsRequest proto.InternalMessageInfo

func (m *FeeInfrastructureAccountsRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

// Response for a list of infrastructure fee accounts
type FeeInfrastructureAccountsResponse struct {
	// A list of 0 or more infrastructure fee accounts
	Accounts             []*vega.Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FeeInfrastructureAccountsResponse) Reset()         { *m = FeeInfrastructureAccountsResponse{} }
func (m *FeeInfrastructureAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*FeeInfrastructureAccountsResponse) ProtoMessage()    {}
func (*FeeInfrastructureAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{111}
}

func (m *FeeInfrastructureAccountsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeeInfrastructureAccountsResponse.Unmarshal(m, b)
}
func (m *FeeInfrastructureAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeeInfrastructureAccountsResponse.Marshal(b, m, deterministic)
}
func (m *FeeInfrastructureAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeInfrastructureAccountsResponse.Merge(m, src)
}
func (m *FeeInfrastructureAccountsResponse) XXX_Size() int {
	return xxx_messageInfo_FeeInfrastructureAccountsResponse.Size(m)
}
func (m *FeeInfrastructureAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeInfrastructureAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FeeInfrastructureAccountsResponse proto.InternalMessageInfo

func (m *FeeInfrastructureAccountsResponse) GetAccounts() []*vega.Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// Request to prepare a governance proposal
type PrepareProposalSubmissionRequest struct {
	Submission           *v1.ProposalSubmission `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PrepareProposalSubmissionRequest) Reset()         { *m = PrepareProposalSubmissionRequest{} }
func (m *PrepareProposalSubmissionRequest) String() string { return proto.CompactTextString(m) }
func (*PrepareProposalSubmissionRequest) ProtoMessage()    {}
func (*PrepareProposalSubmissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{112}
}

func (m *PrepareProposalSubmissionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareProposalSubmissionRequest.Unmarshal(m, b)
}
func (m *PrepareProposalSubmissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareProposalSubmissionRequest.Marshal(b, m, deterministic)
}
func (m *PrepareProposalSubmissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareProposalSubmissionRequest.Merge(m, src)
}
func (m *PrepareProposalSubmissionRequest) XXX_Size() int {
	return xxx_messageInfo_PrepareProposalSubmissionRequest.Size(m)
}
func (m *PrepareProposalSubmissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareProposalSubmissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareProposalSubmissionRequest proto.InternalMessageInfo

func (m *PrepareProposalSubmissionRequest) GetSubmission() *v1.ProposalSubmission {
	if m != nil {
		return m.Submission
	}
	return nil
}

// Response to prepare a governance proposal
type PrepareProposalSubmissionResponse struct {
	// A blob is an encoded representation of the proposal ready to sign using the Vega Wallet and then submit as a transaction
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	// A copy of the prepared proposal
	Submission           *v1.ProposalSubmission `protobuf:"bytes,2,opt,name=submission,proto3" json:"submission,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PrepareProposalSubmissionResponse) Reset()         { *m = PrepareProposalSubmissionResponse{} }
func (m *PrepareProposalSubmissionResponse) String() string { return proto.CompactTextString(m) }
func (*PrepareProposalSubmissionResponse) ProtoMessage()    {}
func (*PrepareProposalSubmissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{113}
}

func (m *PrepareProposalSubmissionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareProposalSubmissionResponse.Unmarshal(m, b)
}
func (m *PrepareProposalSubmissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareProposalSubmissionResponse.Marshal(b, m, deterministic)
}
func (m *PrepareProposalSubmissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareProposalSubmissionResponse.Merge(m, src)
}
func (m *PrepareProposalSubmissionResponse) XXX_Size() int {
	return xxx_messageInfo_PrepareProposalSubmissionResponse.Size(m)
}
func (m *PrepareProposalSubmissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareProposalSubmissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareProposalSubmissionResponse proto.InternalMessageInfo

func (m *PrepareProposalSubmissionResponse) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

func (m *PrepareProposalSubmissionResponse) GetSubmission() *v1.ProposalSubmission {
	if m != nil {
		return m.Submission
	}
	return nil
}

// Request to prepare a governance vote
type PrepareVoteSubmissionRequest struct {
	// Vote, required field
	Submission           *v1.VoteSubmission `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PrepareVoteSubmissionRequest) Reset()         { *m = PrepareVoteSubmissionRequest{} }
func (m *PrepareVoteSubmissionRequest) String() string { return proto.CompactTextString(m) }
func (*PrepareVoteSubmissionRequest) ProtoMessage()    {}
func (*PrepareVoteSubmissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{114}
}

func (m *PrepareVoteSubmissionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareVoteSubmissionRequest.Unmarshal(m, b)
}
func (m *PrepareVoteSubmissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareVoteSubmissionRequest.Marshal(b, m, deterministic)
}
func (m *PrepareVoteSubmissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareVoteSubmissionRequest.Merge(m, src)
}
func (m *PrepareVoteSubmissionRequest) XXX_Size() int {
	return xxx_messageInfo_PrepareVoteSubmissionRequest.Size(m)
}
func (m *PrepareVoteSubmissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareVoteSubmissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareVoteSubmissionRequest proto.InternalMessageInfo

func (m *PrepareVoteSubmissionRequest) GetSubmission() *v1.VoteSubmission {
	if m != nil {
		return m.Submission
	}
	return nil
}

// Response to prepare a governance vote
type PrepareVoteSubmissionResponse struct {
	// A blob is an encoded representation of the vote ready to sign using the Vega Wallet and then submit as a transaction
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	// A copy of the prepared vote
	Submission           *v1.VoteSubmission `protobuf:"bytes,2,opt,name=submission,proto3" json:"submission,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PrepareVoteSubmissionResponse) Reset()         { *m = PrepareVoteSubmissionResponse{} }
func (m *PrepareVoteSubmissionResponse) String() string { return proto.CompactTextString(m) }
func (*PrepareVoteSubmissionResponse) ProtoMessage()    {}
func (*PrepareVoteSubmissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{115}
}

func (m *PrepareVoteSubmissionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareVoteSubmissionResponse.Unmarshal(m, b)
}
func (m *PrepareVoteSubmissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareVoteSubmissionResponse.Marshal(b, m, deterministic)
}
func (m *PrepareVoteSubmissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareVoteSubmissionResponse.Merge(m, src)
}
func (m *PrepareVoteSubmissionResponse) XXX_Size() int {
	return xxx_messageInfo_PrepareVoteSubmissionResponse.Size(m)
}
func (m *PrepareVoteSubmissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareVoteSubmissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareVoteSubmissionResponse proto.InternalMessageInfo

func (m *PrepareVoteSubmissionResponse) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

func (m *PrepareVoteSubmissionResponse) GetSubmission() *v1.VoteSubmission {
	if m != nil {
		return m.Submission
	}
	return nil
}

// Request to prepare liquiditity provision
type PrepareLiquidityProvisionRequest struct {
	// Submission, required field
	Submission           *v1.LiquidityProvisionSubmission `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *PrepareLiquidityProvisionRequest) Reset()         { *m = PrepareLiquidityProvisionRequest{} }
func (m *PrepareLiquidityProvisionRequest) String() string { return proto.CompactTextString(m) }
func (*PrepareLiquidityProvisionRequest) ProtoMessage()    {}
func (*PrepareLiquidityProvisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{116}
}

func (m *PrepareLiquidityProvisionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareLiquidityProvisionRequest.Unmarshal(m, b)
}
func (m *PrepareLiquidityProvisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareLiquidityProvisionRequest.Marshal(b, m, deterministic)
}
func (m *PrepareLiquidityProvisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareLiquidityProvisionRequest.Merge(m, src)
}
func (m *PrepareLiquidityProvisionRequest) XXX_Size() int {
	return xxx_messageInfo_PrepareLiquidityProvisionRequest.Size(m)
}
func (m *PrepareLiquidityProvisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareLiquidityProvisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareLiquidityProvisionRequest proto.InternalMessageInfo

func (m *PrepareLiquidityProvisionRequest) GetSubmission() *v1.LiquidityProvisionSubmission {
	if m != nil {
		return m.Submission
	}
	return nil
}

// Response to a liquidity provision request
type PrepareLiquidityProvisionResponse struct {
	// A blob is an encoded representation of the liquidity provision message ready to sign using the Vega Wallet and then submit as a transaction
	Blob                 []byte   `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareLiquidityProvisionResponse) Reset()         { *m = PrepareLiquidityProvisionResponse{} }
func (m *PrepareLiquidityProvisionResponse) String() string { return proto.CompactTextString(m) }
func (*PrepareLiquidityProvisionResponse) ProtoMessage()    {}
func (*PrepareLiquidityProvisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{117}
}

func (m *PrepareLiquidityProvisionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareLiquidityProvisionResponse.Unmarshal(m, b)
}
func (m *PrepareLiquidityProvisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareLiquidityProvisionResponse.Marshal(b, m, deterministic)
}
func (m *PrepareLiquidityProvisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareLiquidityProvisionResponse.Merge(m, src)
}
func (m *PrepareLiquidityProvisionResponse) XXX_Size() int {
	return xxx_messageInfo_PrepareLiquidityProvisionResponse.Size(m)
}
func (m *PrepareLiquidityProvisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareLiquidityProvisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareLiquidityProvisionResponse proto.InternalMessageInfo

func (m *PrepareLiquidityProvisionResponse) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

// Request for an order with the specified order identifier
// Optionally, return a specific version of the order with the `version` field
type OrderByIDRequest struct {
	// Order identifier, required field
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Version of the order:
	// - Set `version` to 0 for most recent version of the order
	// - Set `1` for original version of the order
	// - Set `2` for first amendment, `3` for second amendment, etc
	Version              uint64   `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderByIDRequest) Reset()         { *m = OrderByIDRequest{} }
func (m *OrderByIDRequest) String() string { return proto.CompactTextString(m) }
func (*OrderByIDRequest) ProtoMessage()    {}
func (*OrderByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{118}
}

func (m *OrderByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderByIDRequest.Unmarshal(m, b)
}
func (m *OrderByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderByIDRequest.Marshal(b, m, deterministic)
}
func (m *OrderByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderByIDRequest.Merge(m, src)
}
func (m *OrderByIDRequest) XXX_Size() int {
	return xxx_messageInfo_OrderByIDRequest.Size(m)
}
func (m *OrderByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderByIDRequest proto.InternalMessageInfo

func (m *OrderByIDRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OrderByIDRequest) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type OrderByIDResponse struct {
	Order                *vega.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrderByIDResponse) Reset()         { *m = OrderByIDResponse{} }
func (m *OrderByIDResponse) String() string { return proto.CompactTextString(m) }
func (*OrderByIDResponse) ProtoMessage()    {}
func (*OrderByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{119}
}

func (m *OrderByIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderByIDResponse.Unmarshal(m, b)
}
func (m *OrderByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderByIDResponse.Marshal(b, m, deterministic)
}
func (m *OrderByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderByIDResponse.Merge(m, src)
}
func (m *OrderByIDResponse) XXX_Size() int {
	return xxx_messageInfo_OrderByIDResponse.Size(m)
}
func (m *OrderByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrderByIDResponse proto.InternalMessageInfo

func (m *OrderByIDResponse) GetOrder() *vega.Order {
	if m != nil {
		return m.Order
	}
	return nil
}

// Request for a list of all versions of an order given the specified order identifier
type OrderVersionsByIDRequest struct {
	// Order identifier, required field
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Pagination controls
	Pagination           *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrderVersionsByIDRequest) Reset()         { *m = OrderVersionsByIDRequest{} }
func (m *OrderVersionsByIDRequest) String() string { return proto.CompactTextString(m) }
func (*OrderVersionsByIDRequest) ProtoMessage()    {}
func (*OrderVersionsByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{120}
}

func (m *OrderVersionsByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderVersionsByIDRequest.Unmarshal(m, b)
}
func (m *OrderVersionsByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderVersionsByIDRequest.Marshal(b, m, deterministic)
}
func (m *OrderVersionsByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderVersionsByIDRequest.Merge(m, src)
}
func (m *OrderVersionsByIDRequest) XXX_Size() int {
	return xxx_messageInfo_OrderVersionsByIDRequest.Size(m)
}
func (m *OrderVersionsByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderVersionsByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderVersionsByIDRequest proto.InternalMessageInfo

func (m *OrderVersionsByIDRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OrderVersionsByIDRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Response to a request for a list of all versions of an order
type OrderVersionsByIDResponse struct {
	// A list of 0 or more orders (list will contain the same order but with different versions, if it has been amended)
	Orders               []*vega.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OrderVersionsByIDResponse) Reset()         { *m = OrderVersionsByIDResponse{} }
func (m *OrderVersionsByIDResponse) String() string { return proto.CompactTextString(m) }
func (*OrderVersionsByIDResponse) ProtoMessage()    {}
func (*OrderVersionsByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{121}
}

func (m *OrderVersionsByIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderVersionsByIDResponse.Unmarshal(m, b)
}
func (m *OrderVersionsByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderVersionsByIDResponse.Marshal(b, m, deterministic)
}
func (m *OrderVersionsByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderVersionsByIDResponse.Merge(m, src)
}
func (m *OrderVersionsByIDResponse) XXX_Size() int {
	return xxx_messageInfo_OrderVersionsByIDResponse.Size(m)
}
func (m *OrderVersionsByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderVersionsByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrderVersionsByIDResponse proto.InternalMessageInfo

func (m *OrderVersionsByIDResponse) GetOrders() []*vega.Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

// Request to fetch the estimated fee if an order were to trade immediately
type EstimateFeeRequest struct {
	// Order to estimate fees for
	// the following fields in the order are required:
	// MarketID (used to specify the fee factors)
	// Price (the price at which the order could trade)
	// Size (the size at which the order could eventually trade)
	Order                *vega.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EstimateFeeRequest) Reset()         { *m = EstimateFeeRequest{} }
func (m *EstimateFeeRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateFeeRequest) ProtoMessage()    {}
func (*EstimateFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{122}
}

func (m *EstimateFeeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EstimateFeeRequest.Unmarshal(m, b)
}
func (m *EstimateFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EstimateFeeRequest.Marshal(b, m, deterministic)
}
func (m *EstimateFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateFeeRequest.Merge(m, src)
}
func (m *EstimateFeeRequest) XXX_Size() int {
	return xxx_messageInfo_EstimateFeeRequest.Size(m)
}
func (m *EstimateFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateFeeRequest proto.InternalMessageInfo

func (m *EstimateFeeRequest) GetOrder() *vega.Order {
	if m != nil {
		return m.Order
	}
	return nil
}

// Response to a EstimateFeeRequest, containing the estimated fees for a given order
type EstimateFeeResponse struct {
	// Summary of the estimated fees for this order if it were to trade now
	Fee                  *vega.Fee `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *EstimateFeeResponse) Reset()         { *m = EstimateFeeResponse{} }
func (m *EstimateFeeResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateFeeResponse) ProtoMessage()    {}
func (*EstimateFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{123}
}

func (m *EstimateFeeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EstimateFeeResponse.Unmarshal(m, b)
}
func (m *EstimateFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EstimateFeeResponse.Marshal(b, m, deterministic)
}
func (m *EstimateFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateFeeResponse.Merge(m, src)
}
func (m *EstimateFeeResponse) XXX_Size() int {
	return xxx_messageInfo_EstimateFeeResponse.Size(m)
}
func (m *EstimateFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateFeeResponse proto.InternalMessageInfo

func (m *EstimateFeeResponse) GetFee() *vega.Fee {
	if m != nil {
		return m.Fee
	}
	return nil
}

// Request to fetch the estimated MarginLevels if an order were to trade immediately
type EstimateMarginRequest struct {
	// Order to estimate fees for
	Order                *vega.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EstimateMarginRequest) Reset()         { *m = EstimateMarginRequest{} }
func (m *EstimateMarginRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateMarginRequest) ProtoMessage()    {}
func (*EstimateMarginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{124}
}

func (m *EstimateMarginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EstimateMarginRequest.Unmarshal(m, b)
}
func (m *EstimateMarginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EstimateMarginRequest.Marshal(b, m, deterministic)
}
func (m *EstimateMarginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateMarginRequest.Merge(m, src)
}
func (m *EstimateMarginRequest) XXX_Size() int {
	return xxx_messageInfo_EstimateMarginRequest.Size(m)
}
func (m *EstimateMarginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateMarginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateMarginRequest proto.InternalMessageInfo

func (m *EstimateMarginRequest) GetOrder() *vega.Order {
	if m != nil {
		return m.Order
	}
	return nil
}

// Response to a EstimateMarginRequest, containing the estimated marginLevels for a given order
type EstimateMarginResponse struct {
	// Summary of the estimated margins for this order if it were to trade now
	MarginLevels         *vega.MarginLevels `protobuf:"bytes,2,opt,name=margin_levels,json=marginLevels,proto3" json:"margin_levels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EstimateMarginResponse) Reset()         { *m = EstimateMarginResponse{} }
func (m *EstimateMarginResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateMarginResponse) ProtoMessage()    {}
func (*EstimateMarginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{125}
}

func (m *EstimateMarginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EstimateMarginResponse.Unmarshal(m, b)
}
func (m *EstimateMarginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EstimateMarginResponse.Marshal(b, m, deterministic)
}
func (m *EstimateMarginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateMarginResponse.Merge(m, src)
}
func (m *EstimateMarginResponse) XXX_Size() int {
	return xxx_messageInfo_EstimateMarginResponse.Size(m)
}
func (m *EstimateMarginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateMarginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateMarginResponse proto.InternalMessageInfo

func (m *EstimateMarginResponse) GetMarginLevels() *vega.MarginLevels {
	if m != nil {
		return m.MarginLevels
	}
	return nil
}

// Request to subscribe to a stream of one or more event types from the Vega event bus
type ObserveEventBusRequest struct {
	// One or more types of event, required field
	Type []v11.BusEventType `protobuf:"varint,1,rep,packed,name=type,proto3,enum=vega.events.v1.BusEventType" json:"type,omitempty"`
	// Market identifier, optional field
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier, optional field
	PartyId string `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Batch size, optional field -
	// If not specified, any events received will be sent immediately. If the client is not ready
	// for the next data-set, data may be dropped a number of times, and eventually the stream is closed.
	// if specified, the first batch will be sent when ready. To receive the next set of events, the client
	// must write an `ObserveEventBatch` message on the stream to flush the buffer.
	// If no message is received in 5 seconds, the stream is closed.
	// Default: 0, send any and all events when they are available.
	BatchSize            int64    `protobuf:"varint,4,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObserveEventBusRequest) Reset()         { *m = ObserveEventBusRequest{} }
func (m *ObserveEventBusRequest) String() string { return proto.CompactTextString(m) }
func (*ObserveEventBusRequest) ProtoMessage()    {}
func (*ObserveEventBusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{126}
}

func (m *ObserveEventBusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObserveEventBusRequest.Unmarshal(m, b)
}
func (m *ObserveEventBusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObserveEventBusRequest.Marshal(b, m, deterministic)
}
func (m *ObserveEventBusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObserveEventBusRequest.Merge(m, src)
}
func (m *ObserveEventBusRequest) XXX_Size() int {
	return xxx_messageInfo_ObserveEventBusRequest.Size(m)
}
func (m *ObserveEventBusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ObserveEventBusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ObserveEventBusRequest proto.InternalMessageInfo

func (m *ObserveEventBusRequest) GetType() []v11.BusEventType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ObserveEventBusRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *ObserveEventBusRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *ObserveEventBusRequest) GetBatchSize() int64 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

// Response to a subscribed stream of events from the Vega event bus
type ObserveEventBusResponse struct {
	// One or more events
	Events               []*v11.BusEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ObserveEventBusResponse) Reset()         { *m = ObserveEventBusResponse{} }
func (m *ObserveEventBusResponse) String() string { return proto.CompactTextString(m) }
func (*ObserveEventBusResponse) ProtoMessage()    {}
func (*ObserveEventBusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{127}
}

func (m *ObserveEventBusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObserveEventBusResponse.Unmarshal(m, b)
}
func (m *ObserveEventBusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObserveEventBusResponse.Marshal(b, m, deterministic)
}
func (m *ObserveEventBusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObserveEventBusResponse.Merge(m, src)
}
func (m *ObserveEventBusResponse) XXX_Size() int {
	return xxx_messageInfo_ObserveEventBusResponse.Size(m)
}
func (m *ObserveEventBusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ObserveEventBusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ObserveEventBusResponse proto.InternalMessageInfo

func (m *ObserveEventBusResponse) GetEvents() []*v11.BusEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

// A request to get a list of withdrawal from a given party
type WithdrawalsRequest struct {
	// The party to get the withdrawals for
	PartyId              string   `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WithdrawalsRequest) Reset()         { *m = WithdrawalsRequest{} }
func (m *WithdrawalsRequest) String() string { return proto.CompactTextString(m) }
func (*WithdrawalsRequest) ProtoMessage()    {}
func (*WithdrawalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{128}
}

func (m *WithdrawalsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithdrawalsRequest.Unmarshal(m, b)
}
func (m *WithdrawalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithdrawalsRequest.Marshal(b, m, deterministic)
}
func (m *WithdrawalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawalsRequest.Merge(m, src)
}
func (m *WithdrawalsRequest) XXX_Size() int {
	return xxx_messageInfo_WithdrawalsRequest.Size(m)
}
func (m *WithdrawalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawalsRequest proto.InternalMessageInfo

func (m *WithdrawalsRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

// The response for a list of withdrawals
type WithdrawalsResponse struct {
	// The list of withdrawals for the specified party
	Withdrawals          []*vega.Withdrawal `protobuf:"bytes,1,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *WithdrawalsResponse) Reset()         { *m = WithdrawalsResponse{} }
func (m *WithdrawalsResponse) String() string { return proto.CompactTextString(m) }
func (*WithdrawalsResponse) ProtoMessage()    {}
func (*WithdrawalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{129}
}

func (m *WithdrawalsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithdrawalsResponse.Unmarshal(m, b)
}
func (m *WithdrawalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithdrawalsResponse.Marshal(b, m, deterministic)
}
func (m *WithdrawalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawalsResponse.Merge(m, src)
}
func (m *WithdrawalsResponse) XXX_Size() int {
	return xxx_messageInfo_WithdrawalsResponse.Size(m)
}
func (m *WithdrawalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawalsResponse proto.InternalMessageInfo

func (m *WithdrawalsResponse) GetWithdrawals() []*vega.Withdrawal {
	if m != nil {
		return m.Withdrawals
	}
	return nil
}

// A request to get a specific withdrawal by identifier
type WithdrawalRequest struct {
	// The identifier of the withdrawal
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WithdrawalRequest) Reset()         { *m = WithdrawalRequest{} }
func (m *WithdrawalRequest) String() string { return proto.CompactTextString(m) }
func (*WithdrawalRequest) ProtoMessage()    {}
func (*WithdrawalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{130}
}

func (m *WithdrawalRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithdrawalRequest.Unmarshal(m, b)
}
func (m *WithdrawalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithdrawalRequest.Marshal(b, m, deterministic)
}
func (m *WithdrawalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawalRequest.Merge(m, src)
}
func (m *WithdrawalRequest) XXX_Size() int {
	return xxx_messageInfo_WithdrawalRequest.Size(m)
}
func (m *WithdrawalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawalRequest proto.InternalMessageInfo

func (m *WithdrawalRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// A response for a withdrawal
type WithdrawalResponse struct {
	// The withdrawal matching the identifier from the request
	Withdrawal           *vega.Withdrawal `protobuf:"bytes,1,opt,name=withdrawal,proto3" json:"withdrawal,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *WithdrawalResponse) Reset()         { *m = WithdrawalResponse{} }
func (m *WithdrawalResponse) String() string { return proto.CompactTextString(m) }
func (*WithdrawalResponse) ProtoMessage()    {}
func (*WithdrawalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{131}
}

func (m *WithdrawalResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithdrawalResponse.Unmarshal(m, b)
}
func (m *WithdrawalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithdrawalResponse.Marshal(b, m, deterministic)
}
func (m *WithdrawalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawalResponse.Merge(m, src)
}
func (m *WithdrawalResponse) XXX_Size() int {
	return xxx_messageInfo_WithdrawalResponse.Size(m)
}
func (m *WithdrawalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawalResponse proto.InternalMessageInfo

func (m *WithdrawalResponse) GetWithdrawal() *vega.Withdrawal {
	if m != nil {
		return m.Withdrawal
	}
	return nil
}

// The request to get all information required to bundle the call to finalise the withdrawal on the erc20 bridge
type ERC20WithdrawalApprovalRequest struct {
	// The identifier of the withdrawal
	WithdrawalId         string   `protobuf:"bytes,1,opt,name=withdrawal_id,json=withdrawalId,proto3" json:"withdrawal_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ERC20WithdrawalApprovalRequest) Reset()         { *m = ERC20WithdrawalApprovalRequest{} }
func (m *ERC20WithdrawalApprovalRequest) String() string { return proto.CompactTextString(m) }
func (*ERC20WithdrawalApprovalRequest) ProtoMessage()    {}
func (*ERC20WithdrawalApprovalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{132}
}

func (m *ERC20WithdrawalApprovalRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ERC20WithdrawalApprovalRequest.Unmarshal(m, b)
}
func (m *ERC20WithdrawalApprovalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ERC20WithdrawalApprovalRequest.Marshal(b, m, deterministic)
}
func (m *ERC20WithdrawalApprovalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20WithdrawalApprovalRequest.Merge(m, src)
}
func (m *ERC20WithdrawalApprovalRequest) XXX_Size() int {
	return xxx_messageInfo_ERC20WithdrawalApprovalRequest.Size(m)
}
func (m *ERC20WithdrawalApprovalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20WithdrawalApprovalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20WithdrawalApprovalRequest proto.InternalMessageInfo

func (m *ERC20WithdrawalApprovalRequest) GetWithdrawalId() string {
	if m != nil {
		return m.WithdrawalId
	}
	return ""
}

// The response with all information required to bundle the call to finalise the withdrawal on the erc20 bridge
// function withdraw_asset(address asset_source, uint256 asset_id, uint256 amount, uint256 expiry, uint256 nonce, bytes memory signatures)
type ERC20WithdrawalApprovalResponse struct {
	// The address of asset on ethereum
	AssetSource string `protobuf:"bytes,1,opt,name=asset_source,json=assetSource,proto3" json:"asset_source,omitempty"`
	// The amount to be withdrawn
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The expiry / until what time the request is valid
	Expiry int64 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// The nonce, which is actually the internal reference for the withdrawal
	Nonce string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The signatures bundle as hex encoded data, forward by 0x
	// e.g: 0x + sig1 + sig2 + ... + sixN
	Signatures           string   `protobuf:"bytes,5,opt,name=signatures,proto3" json:"signatures,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ERC20WithdrawalApprovalResponse) Reset()         { *m = ERC20WithdrawalApprovalResponse{} }
func (m *ERC20WithdrawalApprovalResponse) String() string { return proto.CompactTextString(m) }
func (*ERC20WithdrawalApprovalResponse) ProtoMessage()    {}
func (*ERC20WithdrawalApprovalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{133}
}

func (m *ERC20WithdrawalApprovalResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ERC20WithdrawalApprovalResponse.Unmarshal(m, b)
}
func (m *ERC20WithdrawalApprovalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ERC20WithdrawalApprovalResponse.Marshal(b, m, deterministic)
}
func (m *ERC20WithdrawalApprovalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20WithdrawalApprovalResponse.Merge(m, src)
}
func (m *ERC20WithdrawalApprovalResponse) XXX_Size() int {
	return xxx_messageInfo_ERC20WithdrawalApprovalResponse.Size(m)
}
func (m *ERC20WithdrawalApprovalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20WithdrawalApprovalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20WithdrawalApprovalResponse proto.InternalMessageInfo

func (m *ERC20WithdrawalApprovalResponse) GetAssetSource() string {
	if m != nil {
		return m.AssetSource
	}
	return ""
}

func (m *ERC20WithdrawalApprovalResponse) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *ERC20WithdrawalApprovalResponse) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *ERC20WithdrawalApprovalResponse) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *ERC20WithdrawalApprovalResponse) GetSignatures() string {
	if m != nil {
		return m.Signatures
	}
	return ""
}

// A request to get a list of deposit from a given party
type DepositsRequest struct {
	// The party to get the deposits for
	PartyId              string   `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepositsRequest) Reset()         { *m = DepositsRequest{} }
func (m *DepositsRequest) String() string { return proto.CompactTextString(m) }
func (*DepositsRequest) ProtoMessage()    {}
func (*DepositsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{134}
}

func (m *DepositsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepositsRequest.Unmarshal(m, b)
}
func (m *DepositsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepositsRequest.Marshal(b, m, deterministic)
}
func (m *DepositsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositsRequest.Merge(m, src)
}
func (m *DepositsRequest) XXX_Size() int {
	return xxx_messageInfo_DepositsRequest.Size(m)
}
func (m *DepositsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepositsRequest proto.InternalMessageInfo

func (m *DepositsRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

// The response for a list of deposits
type DepositsResponse struct {
	// The list of deposits for the specified party
	Deposits             []*vega.Deposit `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DepositsResponse) Reset()         { *m = DepositsResponse{} }
func (m *DepositsResponse) String() string { return proto.CompactTextString(m) }
func (*DepositsResponse) ProtoMessage()    {}
func (*DepositsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{135}
}

func (m *DepositsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepositsResponse.Unmarshal(m, b)
}
func (m *DepositsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepositsResponse.Marshal(b, m, deterministic)
}
func (m *DepositsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositsResponse.Merge(m, src)
}
func (m *DepositsResponse) XXX_Size() int {
	return xxx_messageInfo_DepositsResponse.Size(m)
}
func (m *DepositsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DepositsResponse proto.InternalMessageInfo

func (m *DepositsResponse) GetDeposits() []*vega.Deposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

// A request to get a specific deposit by identifier
type DepositRequest struct {
	// The identifier of the deposit
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepositRequest) Reset()         { *m = DepositRequest{} }
func (m *DepositRequest) String() string { return proto.CompactTextString(m) }
func (*DepositRequest) ProtoMessage()    {}
func (*DepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{136}
}

func (m *DepositRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepositRequest.Unmarshal(m, b)
}
func (m *DepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepositRequest.Marshal(b, m, deterministic)
}
func (m *DepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositRequest.Merge(m, src)
}
func (m *DepositRequest) XXX_Size() int {
	return xxx_messageInfo_DepositRequest.Size(m)
}
func (m *DepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepositRequest proto.InternalMessageInfo

func (m *DepositRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// A response for a deposit
type DepositResponse struct {
	// The deposit matching the identifier from the request
	Deposit              *vega.Deposit `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DepositResponse) Reset()         { *m = DepositResponse{} }
func (m *DepositResponse) String() string { return proto.CompactTextString(m) }
func (*DepositResponse) ProtoMessage()    {}
func (*DepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{137}
}

func (m *DepositResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepositResponse.Unmarshal(m, b)
}
func (m *DepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepositResponse.Marshal(b, m, deterministic)
}
func (m *DepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositResponse.Merge(m, src)
}
func (m *DepositResponse) XXX_Size() int {
	return xxx_messageInfo_DepositResponse.Size(m)
}
func (m *DepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DepositResponse proto.InternalMessageInfo

func (m *DepositResponse) GetDeposit() *vega.Deposit {
	if m != nil {
		return m.Deposit
	}
	return nil
}

// A message requesting for the list of all network parameters
type NetworkParametersRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkParametersRequest) Reset()         { *m = NetworkParametersRequest{} }
func (m *NetworkParametersRequest) String() string { return proto.CompactTextString(m) }
func (*NetworkParametersRequest) ProtoMessage()    {}
func (*NetworkParametersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{138}
}

func (m *NetworkParametersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkParametersRequest.Unmarshal(m, b)
}
func (m *NetworkParametersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkParametersRequest.Marshal(b, m, deterministic)
}
func (m *NetworkParametersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkParametersRequest.Merge(m, src)
}
func (m *NetworkParametersRequest) XXX_Size() int {
	return xxx_messageInfo_NetworkParametersRequest.Size(m)
}
func (m *NetworkParametersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkParametersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkParametersRequest proto.InternalMessageInfo

// A response containing all of the vega network parameters
type NetworkParametersResponse struct {
	NetworkParameters    []*vega.NetworkParameter `protobuf:"bytes,1,rep,name=network_parameters,json=networkParameters,proto3" json:"network_parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NetworkParametersResponse) Reset()         { *m = NetworkParametersResponse{} }
func (m *NetworkParametersResponse) String() string { return proto.CompactTextString(m) }
func (*NetworkParametersResponse) ProtoMessage()    {}
func (*NetworkParametersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{139}
}

func (m *NetworkParametersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkParametersResponse.Unmarshal(m, b)
}
func (m *NetworkParametersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkParametersResponse.Marshal(b, m, deterministic)
}
func (m *NetworkParametersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkParametersResponse.Merge(m, src)
}
func (m *NetworkParametersResponse) XXX_Size() int {
	return xxx_messageInfo_NetworkParametersResponse.Size(m)
}
func (m *NetworkParametersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkParametersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkParametersResponse proto.InternalMessageInfo

func (m *NetworkParametersResponse) GetNetworkParameters() []*vega.NetworkParameter {
	if m != nil {
		return m.NetworkParameters
	}
	return nil
}

// A message requesting for the list of liquidity provision orders for markets
// One of the two filters is required (or both)
type LiquidityProvisionsRequest struct {
	// The target market for the liquidity provision orders
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The party which submitted the liquidity provision orders
	Party                string   `protobuf:"bytes,2,opt,name=party,proto3" json:"party,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiquidityProvisionsRequest) Reset()         { *m = LiquidityProvisionsRequest{} }
func (m *LiquidityProvisionsRequest) String() string { return proto.CompactTextString(m) }
func (*LiquidityProvisionsRequest) ProtoMessage()    {}
func (*LiquidityProvisionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{140}
}

func (m *LiquidityProvisionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiquidityProvisionsRequest.Unmarshal(m, b)
}
func (m *LiquidityProvisionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiquidityProvisionsRequest.Marshal(b, m, deterministic)
}
func (m *LiquidityProvisionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProvisionsRequest.Merge(m, src)
}
func (m *LiquidityProvisionsRequest) XXX_Size() int {
	return xxx_messageInfo_LiquidityProvisionsRequest.Size(m)
}
func (m *LiquidityProvisionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProvisionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProvisionsRequest proto.InternalMessageInfo

func (m *LiquidityProvisionsRequest) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *LiquidityProvisionsRequest) GetParty() string {
	if m != nil {
		return m.Party
	}
	return ""
}

// A response containing all of the Vega liquidity provision orders
type LiquidityProvisionsResponse struct {
	LiquidityProvisions  []*vega.LiquidityProvision `protobuf:"bytes,1,rep,name=liquidity_provisions,json=liquidityProvisions,proto3" json:"liquidity_provisions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LiquidityProvisionsResponse) Reset()         { *m = LiquidityProvisionsResponse{} }
func (m *LiquidityProvisionsResponse) String() string { return proto.CompactTextString(m) }
func (*LiquidityProvisionsResponse) ProtoMessage()    {}
func (*LiquidityProvisionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{141}
}

func (m *LiquidityProvisionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiquidityProvisionsResponse.Unmarshal(m, b)
}
func (m *LiquidityProvisionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiquidityProvisionsResponse.Marshal(b, m, deterministic)
}
func (m *LiquidityProvisionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProvisionsResponse.Merge(m, src)
}
func (m *LiquidityProvisionsResponse) XXX_Size() int {
	return xxx_messageInfo_LiquidityProvisionsResponse.Size(m)
}
func (m *LiquidityProvisionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProvisionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProvisionsResponse proto.InternalMessageInfo

func (m *LiquidityProvisionsResponse) GetLiquidityProvisions() []*vega.LiquidityProvision {
	if m != nil {
		return m.LiquidityProvisions
	}
	return nil
}

// A request to get a specific oracle spec by identifier
type OracleSpecRequest struct {
	// The id to get the oracle spec for
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OracleSpecRequest) Reset()         { *m = OracleSpecRequest{} }
func (m *OracleSpecRequest) String() string { return proto.CompactTextString(m) }
func (*OracleSpecRequest) ProtoMessage()    {}
func (*OracleSpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{142}
}

func (m *OracleSpecRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OracleSpecRequest.Unmarshal(m, b)
}
func (m *OracleSpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OracleSpecRequest.Marshal(b, m, deterministic)
}
func (m *OracleSpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleSpecRequest.Merge(m, src)
}
func (m *OracleSpecRequest) XXX_Size() int {
	return xxx_messageInfo_OracleSpecRequest.Size(m)
}
func (m *OracleSpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleSpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OracleSpecRequest proto.InternalMessageInfo

func (m *OracleSpecRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// A response for a oracle spec
type OracleSpecResponse struct {
	// The withdrawal matching the identifier from the request
	OracleSpec           *v12.OracleSpec `protobuf:"bytes,1,opt,name=oracle_spec,json=oracleSpec,proto3" json:"oracle_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *OracleSpecResponse) Reset()         { *m = OracleSpecResponse{} }
func (m *OracleSpecResponse) String() string { return proto.CompactTextString(m) }
func (*OracleSpecResponse) ProtoMessage()    {}
func (*OracleSpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{143}
}

func (m *OracleSpecResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OracleSpecResponse.Unmarshal(m, b)
}
func (m *OracleSpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OracleSpecResponse.Marshal(b, m, deterministic)
}
func (m *OracleSpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleSpecResponse.Merge(m, src)
}
func (m *OracleSpecResponse) XXX_Size() int {
	return xxx_messageInfo_OracleSpecResponse.Size(m)
}
func (m *OracleSpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleSpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OracleSpecResponse proto.InternalMessageInfo

func (m *OracleSpecResponse) GetOracleSpec() *v12.OracleSpec {
	if m != nil {
		return m.OracleSpec
	}
	return nil
}

// A request to get a specific oracle spec by identifier
type OracleSpecsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OracleSpecsRequest) Reset()         { *m = OracleSpecsRequest{} }
func (m *OracleSpecsRequest) String() string { return proto.CompactTextString(m) }
func (*OracleSpecsRequest) ProtoMessage()    {}
func (*OracleSpecsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{144}
}

func (m *OracleSpecsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OracleSpecsRequest.Unmarshal(m, b)
}
func (m *OracleSpecsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OracleSpecsRequest.Marshal(b, m, deterministic)
}
func (m *OracleSpecsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleSpecsRequest.Merge(m, src)
}
func (m *OracleSpecsRequest) XXX_Size() int {
	return xxx_messageInfo_OracleSpecsRequest.Size(m)
}
func (m *OracleSpecsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleSpecsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OracleSpecsRequest proto.InternalMessageInfo

// The response for a list of withdrawals
type OracleSpecsResponse struct {
	// The list of oracle specs
	OracleSpecs          []*v12.OracleSpec `protobuf:"bytes,1,rep,name=oracle_specs,json=oracleSpecs,proto3" json:"oracle_specs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *OracleSpecsResponse) Reset()         { *m = OracleSpecsResponse{} }
func (m *OracleSpecsResponse) String() string { return proto.CompactTextString(m) }
func (*OracleSpecsResponse) ProtoMessage()    {}
func (*OracleSpecsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{145}
}

func (m *OracleSpecsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OracleSpecsResponse.Unmarshal(m, b)
}
func (m *OracleSpecsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OracleSpecsResponse.Marshal(b, m, deterministic)
}
func (m *OracleSpecsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleSpecsResponse.Merge(m, src)
}
func (m *OracleSpecsResponse) XXX_Size() int {
	return xxx_messageInfo_OracleSpecsResponse.Size(m)
}
func (m *OracleSpecsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleSpecsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OracleSpecsResponse proto.InternalMessageInfo

func (m *OracleSpecsResponse) GetOracleSpecs() []*v12.OracleSpec {
	if m != nil {
		return m.OracleSpecs
	}
	return nil
}

// A request to all oracle data broadcast to a given spec
type OracleDataBySpecRequest struct {
	// The id to get the oracle spec for
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OracleDataBySpecRequest) Reset()         { *m = OracleDataBySpecRequest{} }
func (m *OracleDataBySpecRequest) String() string { return proto.CompactTextString(m) }
func (*OracleDataBySpecRequest) ProtoMessage()    {}
func (*OracleDataBySpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{146}
}

func (m *OracleDataBySpecRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OracleDataBySpecRequest.Unmarshal(m, b)
}
func (m *OracleDataBySpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OracleDataBySpecRequest.Marshal(b, m, deterministic)
}
func (m *OracleDataBySpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleDataBySpecRequest.Merge(m, src)
}
func (m *OracleDataBySpecRequest) XXX_Size() int {
	return xxx_messageInfo_OracleDataBySpecRequest.Size(m)
}
func (m *OracleDataBySpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleDataBySpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OracleDataBySpecRequest proto.InternalMessageInfo

func (m *OracleDataBySpecRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// The response for a list of all oracle data broadcast to a given spec
type OracleDataBySpecResponse struct {
	// The list of oracle data broadcast to a given spec
	OracleData           []*v12.OracleData `protobuf:"bytes,1,rep,name=oracle_data,json=oracleData,proto3" json:"oracle_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *OracleDataBySpecResponse) Reset()         { *m = OracleDataBySpecResponse{} }
func (m *OracleDataBySpecResponse) String() string { return proto.CompactTextString(m) }
func (*OracleDataBySpecResponse) ProtoMessage()    {}
func (*OracleDataBySpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{147}
}

func (m *OracleDataBySpecResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OracleDataBySpecResponse.Unmarshal(m, b)
}
func (m *OracleDataBySpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OracleDataBySpecResponse.Marshal(b, m, deterministic)
}
func (m *OracleDataBySpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleDataBySpecResponse.Merge(m, src)
}
func (m *OracleDataBySpecResponse) XXX_Size() int {
	return xxx_messageInfo_OracleDataBySpecResponse.Size(m)
}
func (m *OracleDataBySpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleDataBySpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OracleDataBySpecResponse proto.InternalMessageInfo

func (m *OracleDataBySpecResponse) GetOracleData() []*v12.OracleData {
	if m != nil {
		return m.OracleData
	}
	return nil
}

// A request to get the height of the very last block processed
// by tendermint
type LastBlockHeightRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LastBlockHeightRequest) Reset()         { *m = LastBlockHeightRequest{} }
func (m *LastBlockHeightRequest) String() string { return proto.CompactTextString(m) }
func (*LastBlockHeightRequest) ProtoMessage()    {}
func (*LastBlockHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{148}
}

func (m *LastBlockHeightRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LastBlockHeightRequest.Unmarshal(m, b)
}
func (m *LastBlockHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LastBlockHeightRequest.Marshal(b, m, deterministic)
}
func (m *LastBlockHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastBlockHeightRequest.Merge(m, src)
}
func (m *LastBlockHeightRequest) XXX_Size() int {
	return xxx_messageInfo_LastBlockHeightRequest.Size(m)
}
func (m *LastBlockHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LastBlockHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LastBlockHeightRequest proto.InternalMessageInfo

// A response with the height of the last block processed by
// tendermint
type LastBlockHeightResponse struct {
	Height               uint64   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LastBlockHeightResponse) Reset()         { *m = LastBlockHeightResponse{} }
func (m *LastBlockHeightResponse) String() string { return proto.CompactTextString(m) }
func (*LastBlockHeightResponse) ProtoMessage()    {}
func (*LastBlockHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e536cf6517e5fb7, []int{149}
}

func (m *LastBlockHeightResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LastBlockHeightResponse.Unmarshal(m, b)
}
func (m *LastBlockHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LastBlockHeightResponse.Marshal(b, m, deterministic)
}
func (m *LastBlockHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastBlockHeightResponse.Merge(m, src)
}
func (m *LastBlockHeightResponse) XXX_Size() int {
	return xxx_messageInfo_LastBlockHeightResponse.Size(m)
}
func (m *LastBlockHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LastBlockHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LastBlockHeightResponse proto.InternalMessageInfo

func (m *LastBlockHeightResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterEnum("vega.api.v1.SubmitTransactionRequest_Type", SubmitTransactionRequest_Type_name, SubmitTransactionRequest_Type_value)
	proto.RegisterEnum("vega.api.v1.SubmitTransactionV2Request_Type", SubmitTransactionV2Request_Type_name, SubmitTransactionV2Request_Type_value)
	proto.RegisterType((*PropagateChainEventRequest)(nil), "vega.api.v1.PropagateChainEventRequest")
	proto.RegisterType((*PropagateChainEventResponse)(nil), "vega.api.v1.PropagateChainEventResponse")
	proto.RegisterType((*SubmitTransactionRequest)(nil), "vega.api.v1.SubmitTransactionRequest")
	proto.RegisterType((*SubmitTransactionResponse)(nil), "vega.api.v1.SubmitTransactionResponse")
	proto.RegisterType((*SubmitTransactionV2Request)(nil), "vega.api.v1.SubmitTransactionV2Request")
	proto.RegisterType((*SubmitTransactionV2Response)(nil), "vega.api.v1.SubmitTransactionV2Response")
	proto.RegisterType((*PrepareWithdrawRequest)(nil), "vega.api.v1.PrepareWithdrawRequest")
	proto.RegisterType((*PrepareWithdrawResponse)(nil), "vega.api.v1.PrepareWithdrawResponse")
	proto.RegisterType((*PrepareSubmitOrderResponse)(nil), "vega.api.v1.PrepareSubmitOrderResponse")
	proto.RegisterType((*PrepareCancelOrderResponse)(nil), "vega.api.v1.PrepareCancelOrderResponse")
	proto.RegisterType((*PrepareAmendOrderResponse)(nil), "vega.api.v1.PrepareAmendOrderResponse")
	proto.RegisterType((*PrepareSubmitOrderRequest)(nil), "vega.api.v1.PrepareSubmitOrderRequest")
	proto.RegisterType((*PrepareCancelOrderRequest)(nil), "vega.api.v1.PrepareCancelOrderRequest")
	proto.RegisterType((*PrepareAmendOrderRequest)(nil), "vega.api.v1.PrepareAmendOrderRequest")
	proto.RegisterType((*AssetsRequest)(nil), "vega.api.v1.AssetsRequest")
	proto.RegisterType((*AssetsResponse)(nil), "vega.api.v1.AssetsResponse")
	proto.RegisterType((*AssetByIDRequest)(nil), "vega.api.v1.AssetByIDRequest")
	proto.RegisterType((*AssetByIDResponse)(nil), "vega.api.v1.AssetByIDResponse")
	proto.RegisterType((*GetNodeSignaturesAggregateRequest)(nil), "vega.api.v1.GetNodeSignaturesAggregateRequest")
	proto.RegisterType((*GetNodeSignaturesAggregateResponse)(nil), "vega.api.v1.GetNodeSignaturesAggregateResponse")
	proto.RegisterType((*OptionalProposalState)(nil), "vega.api.v1.OptionalProposalState")
	proto.RegisterType((*GetProposalsRequest)(nil), "vega.api.v1.GetProposalsRequest")
	proto.RegisterType((*GetProposalsResponse)(nil), "vega.api.v1.GetProposalsResponse")
	proto.RegisterType((*GetProposalsByPartyRequest)(nil), "vega.api.v1.GetProposalsByPartyRequest")
	proto.RegisterType((*GetProposalsByPartyResponse)(nil), "vega.api.v1.GetProposalsByPartyResponse")
	proto.RegisterType((*GetVotesByPartyRequest)(nil), "vega.api.v1.GetVotesByPartyRequest")
	proto.RegisterType((*GetVotesByPartyResponse)(nil), "vega.api.v1.GetVotesByPartyResponse")
	proto.RegisterType((*GetNewMarketProposalsRequest)(nil), "vega.api.v1.GetNewMarketProposalsRequest")
	proto.RegisterType((*GetNewMarketProposalsResponse)(nil), "vega.api.v1.GetNewMarketProposalsResponse")
	proto.RegisterType((*GetUpdateMarketProposalsRequest)(nil), "vega.api.v1.GetUpdateMarketProposalsRequest")
	proto.RegisterType((*GetUpdateMarketProposalsResponse)(nil), "vega.api.v1.GetUpdateMarketProposalsResponse")
	proto.RegisterType((*GetNetworkParametersProposalsRequest)(nil), "vega.api.v1.GetNetworkParametersProposalsRequest")
	proto.RegisterType((*GetNetworkParametersProposalsResponse)(nil), "vega.api.v1.GetNetworkParametersProposalsResponse")
	proto.RegisterType((*GetNewAssetProposalsRequest)(nil), "vega.api.v1.GetNewAssetProposalsRequest")
	proto.RegisterType((*GetNewAssetProposalsResponse)(nil), "vega.api.v1.GetNewAssetProposalsResponse")
	proto.RegisterType((*GetProposalByIDRequest)(nil), "vega.api.v1.GetProposalByIDRequest")
	proto.RegisterType((*GetProposalByIDResponse)(nil), "vega.api.v1.GetProposalByIDResponse")
	proto.RegisterType((*GetProposalByReferenceRequest)(nil), "vega.api.v1.GetProposalByReferenceRequest")
	proto.RegisterType((*GetProposalByReferenceResponse)(nil), "vega.api.v1.GetProposalByReferenceResponse")
	proto.RegisterType((*ObserveGovernanceRequest)(nil), "vega.api.v1.ObserveGovernanceRequest")
	proto.RegisterType((*ObserveGovernanceResponse)(nil), "vega.api.v1.ObserveGovernanceResponse")
	proto.RegisterType((*ObservePartyProposalsRequest)(nil), "vega.api.v1.ObservePartyProposalsRequest")
	proto.RegisterType((*ObservePartyProposalsResponse)(nil), "vega.api.v1.ObservePartyProposalsResponse")
	proto.RegisterType((*ObserveProposalVotesRequest)(nil), "vega.api.v1.ObserveProposalVotesRequest")
	proto.RegisterType((*ObserveProposalVotesResponse)(nil), "vega.api.v1.ObserveProposalVotesResponse")
	proto.RegisterType((*ObservePartyVotesRequest)(nil), "vega.api.v1.ObservePartyVotesRequest")
	proto.RegisterType((*ObservePartyVotesResponse)(nil), "vega.api.v1.ObservePartyVotesResponse")
	proto.RegisterType((*MarginLevelsSubscribeRequest)(nil), "vega.api.v1.MarginLevelsSubscribeRequest")
	proto.RegisterType((*MarginLevelsSubscribeResponse)(nil), "vega.api.v1.MarginLevelsSubscribeResponse")
	proto.RegisterType((*MarginLevelsRequest)(nil), "vega.api.v1.MarginLevelsRequest")
	proto.RegisterType((*MarginLevelsResponse)(nil), "vega.api.v1.MarginLevelsResponse")
	proto.RegisterType((*MarketsDataSubscribeRequest)(nil), "vega.api.v1.MarketsDataSubscribeRequest")
	proto.RegisterType((*MarketsDataSubscribeResponse)(nil), "vega.api.v1.MarketsDataSubscribeResponse")
	proto.RegisterType((*MarketDataByIDRequest)(nil), "vega.api.v1.MarketDataByIDRequest")
	proto.RegisterType((*MarketDataByIDResponse)(nil), "vega.api.v1.MarketDataByIDResponse")
	proto.RegisterType((*MarketsDataRequest)(nil), "vega.api.v1.MarketsDataRequest")
	proto.RegisterType((*MarketsDataResponse)(nil), "vega.api.v1.MarketsDataResponse")
	proto.RegisterType((*LastTradeRequest)(nil), "vega.api.v1.LastTradeRequest")
	proto.RegisterType((*LastTradeResponse)(nil), "vega.api.v1.LastTradeResponse")
	proto.RegisterType((*MarketByIDRequest)(nil), "vega.api.v1.MarketByIDRequest")
	proto.RegisterType((*MarketByIDResponse)(nil), "vega.api.v1.MarketByIDResponse")
	proto.RegisterType((*PartyByIDRequest)(nil), "vega.api.v1.PartyByIDRequest")
	proto.RegisterType((*PartyByIDResponse)(nil), "vega.api.v1.PartyByIDResponse")
	proto.RegisterType((*PartiesRequest)(nil), "vega.api.v1.PartiesRequest")
	proto.RegisterType((*PartiesResponse)(nil), "vega.api.v1.PartiesResponse")
	proto.RegisterType((*TradesByPartyRequest)(nil), "vega.api.v1.TradesByPartyRequest")
	proto.RegisterType((*TradesByPartyResponse)(nil), "vega.api.v1.TradesByPartyResponse")
	proto.RegisterType((*TradesByOrderRequest)(nil), "vega.api.v1.TradesByOrderRequest")
	proto.RegisterType((*TradesByOrderResponse)(nil), "vega.api.v1.TradesByOrderResponse")
	proto.RegisterType((*AccountsSubscribeRequest)(nil), "vega.api.v1.AccountsSubscribeRequest")
	proto.RegisterType((*AccountsSubscribeResponse)(nil), "vega.api.v1.AccountsSubscribeResponse")
	proto.RegisterType((*OrdersSubscribeRequest)(nil), "vega.api.v1.OrdersSubscribeRequest")
	proto.RegisterType((*TradesSubscribeRequest)(nil), "vega.api.v1.TradesSubscribeRequest")
	proto.RegisterType((*CandlesSubscribeRequest)(nil), "vega.api.v1.CandlesSubscribeRequest")
	proto.RegisterType((*CandlesSubscribeResponse)(nil), "vega.api.v1.CandlesSubscribeResponse")
	proto.RegisterType((*MarketDepthSubscribeRequest)(nil), "vega.api.v1.MarketDepthSubscribeRequest")
	proto.RegisterType((*MarketDepthSubscribeResponse)(nil), "vega.api.v1.MarketDepthSubscribeResponse")
	proto.RegisterType((*MarketDepthUpdatesSubscribeRequest)(nil), "vega.api.v1.MarketDepthUpdatesSubscribeRequest")
	proto.RegisterType((*MarketDepthUpdatesSubscribeResponse)(nil), "vega.api.v1.MarketDepthUpdatesSubscribeResponse")
	proto.RegisterType((*PositionsSubscribeRequest)(nil), "vega.api.v1.PositionsSubscribeRequest")
	proto.RegisterType((*PositionsSubscribeResponse)(nil), "vega.api.v1.PositionsSubscribeResponse")
	proto.RegisterType((*OrdersByMarketRequest)(nil), "vega.api.v1.OrdersByMarketRequest")
	proto.RegisterType((*OrdersByMarketResponse)(nil), "vega.api.v1.OrdersByMarketResponse")
	proto.RegisterType((*OrdersByPartyRequest)(nil), "vega.api.v1.OrdersByPartyRequest")
	proto.RegisterType((*OrdersByPartyResponse)(nil), "vega.api.v1.OrdersByPartyResponse")
	proto.RegisterType((*OrderByMarketAndIDRequest)(nil), "vega.api.v1.OrderByMarketAndIDRequest")
	proto.RegisterType((*OrderByMarketAndIDResponse)(nil), "vega.api.v1.OrderByMarketAndIDResponse")
	proto.RegisterType((*OrderByReferenceRequest)(nil), "vega.api.v1.OrderByReferenceRequest")
	proto.RegisterType((*OrderByReferenceResponse)(nil), "vega.api.v1.OrderByReferenceResponse")
	proto.RegisterType((*MarketsRequest)(nil), "vega.api.v1.MarketsRequest")
	proto.RegisterType((*MarketsResponse)(nil), "vega.api.v1.MarketsResponse")
	proto.RegisterType((*CandlesRequest)(nil), "vega.api.v1.CandlesRequest")
	proto.RegisterType((*CandlesResponse)(nil), "vega.api.v1.CandlesResponse")
	proto.RegisterType((*MarketDepthRequest)(nil), "vega.api.v1.MarketDepthRequest")
	proto.RegisterType((*MarketDepthResponse)(nil), "vega.api.v1.MarketDepthResponse")
	proto.RegisterType((*TradesByMarketRequest)(nil), "vega.api.v1.TradesByMarketRequest")
	proto.RegisterType((*TradesByMarketResponse)(nil), "vega.api.v1.TradesByMarketResponse")
	proto.RegisterType((*PositionsByPartyRequest)(nil), "vega.api.v1.PositionsByPartyRequest")
	proto.RegisterType((*PositionsByPartyResponse)(nil), "vega.api.v1.PositionsByPartyResponse")
	proto.RegisterType((*GetVegaTimeRequest)(nil), "vega.api.v1.GetVegaTimeRequest")
	proto.RegisterType((*GetVegaTimeResponse)(nil), "vega.api.v1.GetVegaTimeResponse")
	proto.RegisterType((*Pagination)(nil), "vega.api.v1.Pagination")
	proto.RegisterType((*OrdersSubscribeResponse)(nil), "vega.api.v1.OrdersSubscribeResponse")
	proto.RegisterType((*TradesSubscribeResponse)(nil), "vega.api.v1.TradesSubscribeResponse")
	proto.RegisterType((*TransferResponsesSubscribeRequest)(nil), "vega.api.v1.TransferResponsesSubscribeRequest")
	proto.RegisterType((*TransferResponsesSubscribeResponse)(nil), "vega.api.v1.TransferResponsesSubscribeResponse")
	proto.RegisterType((*PartyAccountsRequest)(nil), "vega.api.v1.PartyAccountsRequest")
	proto.RegisterType((*PartyAccountsResponse)(nil), "vega.api.v1.PartyAccountsResponse")
	proto.RegisterType((*MarketAccountsRequest)(nil), "vega.api.v1.MarketAccountsRequest")
	proto.RegisterType((*MarketAccountsResponse)(nil), "vega.api.v1.MarketAccountsResponse")
	proto.RegisterType((*FeeInfrastructureAccountsRequest)(nil), "vega.api.v1.FeeInfrastructureAccountsRequest")
	proto.RegisterType((*FeeInfrastructureAccountsResponse)(nil), "vega.api.v1.FeeInfrastructureAccountsResponse")
	proto.RegisterType((*PrepareProposalSubmissionRequest)(nil), "vega.api.v1.PrepareProposalSubmissionRequest")
	proto.RegisterType((*PrepareProposalSubmissionResponse)(nil), "vega.api.v1.PrepareProposalSubmissionResponse")
	proto.RegisterType((*PrepareVoteSubmissionRequest)(nil), "vega.api.v1.PrepareVoteSubmissionRequest")
	proto.RegisterType((*PrepareVoteSubmissionResponse)(nil), "vega.api.v1.PrepareVoteSubmissionResponse")
	proto.RegisterType((*PrepareLiquidityProvisionRequest)(nil), "vega.api.v1.PrepareLiquidityProvisionRequest")
	proto.RegisterType((*PrepareLiquidityProvisionResponse)(nil), "vega.api.v1.PrepareLiquidityProvisionResponse")
	proto.RegisterType((*OrderByIDRequest)(nil), "vega.api.v1.OrderByIDRequest")
	proto.RegisterType((*OrderByIDResponse)(nil), "vega.api.v1.OrderByIDResponse")
	proto.RegisterType((*OrderVersionsByIDRequest)(nil), "vega.api.v1.OrderVersionsByIDRequest")
	proto.RegisterType((*OrderVersionsByIDResponse)(nil), "vega.api.v1.OrderVersionsByIDResponse")
	proto.RegisterType((*EstimateFeeRequest)(nil), "vega.api.v1.EstimateFeeRequest")
	proto.RegisterType((*EstimateFeeResponse)(nil), "vega.api.v1.EstimateFeeResponse")
	proto.RegisterType((*EstimateMarginRequest)(nil), "vega.api.v1.EstimateMarginRequest")
	proto.RegisterType((*EstimateMarginResponse)(nil), "vega.api.v1.EstimateMarginResponse")
	proto.RegisterType((*ObserveEventBusRequest)(nil), "vega.api.v1.ObserveEventBusRequest")
	proto.RegisterType((*ObserveEventBusResponse)(nil), "vega.api.v1.ObserveEventBusResponse")
	proto.RegisterType((*WithdrawalsRequest)(nil), "vega.api.v1.WithdrawalsRequest")
	proto.RegisterType((*WithdrawalsResponse)(nil), "vega.api.v1.WithdrawalsResponse")
	proto.RegisterType((*WithdrawalRequest)(nil), "vega.api.v1.WithdrawalRequest")
	proto.RegisterType((*WithdrawalResponse)(nil), "vega.api.v1.WithdrawalResponse")
	proto.RegisterType((*ERC20WithdrawalApprovalRequest)(nil), "vega.api.v1.ERC20WithdrawalApprovalRequest")
	proto.RegisterType((*ERC20WithdrawalApprovalResponse)(nil), "vega.api.v1.ERC20WithdrawalApprovalResponse")
	proto.RegisterType((*DepositsRequest)(nil), "vega.api.v1.DepositsRequest")
	proto.RegisterType((*DepositsResponse)(nil), "vega.api.v1.DepositsResponse")
	proto.RegisterType((*DepositRequest)(nil), "vega.api.v1.DepositRequest")
	proto.RegisterType((*DepositResponse)(nil), "vega.api.v1.DepositResponse")
	proto.RegisterType((*NetworkParametersRequest)(nil), "vega.api.v1.NetworkParametersRequest")
	proto.RegisterType((*NetworkParametersResponse)(nil), "vega.api.v1.NetworkParametersResponse")
	proto.RegisterType((*LiquidityProvisionsRequest)(nil), "vega.api.v1.LiquidityProvisionsRequest")
	proto.RegisterType((*LiquidityProvisionsResponse)(nil), "vega.api.v1.LiquidityProvisionsResponse")
	proto.RegisterType((*OracleSpecRequest)(nil), "vega.api.v1.OracleSpecRequest")
	proto.RegisterType((*OracleSpecResponse)(nil), "vega.api.v1.OracleSpecResponse")
	proto.RegisterType((*OracleSpecsRequest)(nil), "vega.api.v1.OracleSpecsRequest")
	proto.RegisterType((*OracleSpecsResponse)(nil), "vega.api.v1.OracleSpecsResponse")
	proto.RegisterType((*OracleDataBySpecRequest)(nil), "vega.api.v1.OracleDataBySpecRequest")
	proto.RegisterType((*OracleDataBySpecResponse)(nil), "vega.api.v1.OracleDataBySpecResponse")
	proto.RegisterType((*LastBlockHeightRequest)(nil), "vega.api.v1.LastBlockHeightRequest")
	proto.RegisterType((*LastBlockHeightResponse)(nil), "vega.api.v1.LastBlockHeightResponse")
}

func init() {
	proto.RegisterFile("vega/api/trading.proto", fileDescriptor_5e536cf6517e5fb7)
}

var fileDescriptor_5e536cf6517e5fb7 = []byte{
	// 4349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3c, 0xcb, 0x72, 0x1b, 0xc7,
	0x76, 0x17, 0x24, 0x45, 0x12, 0x87, 0xef, 0x16, 0x1f, 0xe0, 0x50, 0x0f, 0xb2, 0x25, 0x59, 0x94,
	0x6c, 0x91, 0x14, 0x7d, 0x2d, 0xf9, 0x71, 0x2d, 0x8b, 0x2f, 0xd1, 0xa4, 0x45, 0x89, 0x1e, 0xca,
	0x8c, 0xe5, 0x4a, 0x19, 0x19, 0x02, 0x6d, 0x72, 0x4c, 0x60, 0x00, 0xcf, 0x0c, 0x40, 0xd1, 0x55,
	0xb7, 0x52, 0x95, 0x54, 0x25, 0x8b, 0xbb, 0x48, 0xd5, 0xfd, 0x83, 0x6c, 0xf3, 0x15, 0xf9, 0x80,
	0x6c, 0xb2, 0xce, 0x22, 0x55, 0x59, 0xe7, 0x23, 0x52, 0xd3, 0x8f, 0x99, 0xe9, 0xc7, 0x0c, 0x00,
	0xda, 0xca, 0x0e, 0xd3, 0xe7, 0xf4, 0x79, 0x75, 0xf7, 0xe9, 0xd3, 0x7d, 0x4e, 0x03, 0x66, 0xdb,
	0xe4, 0xd4, 0x59, 0x75, 0x9a, 0xee, 0x6a, 0xe8, 0x3b, 0x55, 0xd7, 0x3b, 0x5d, 0x69, 0xfa, 0x8d,
	0xb0, 0x81, 0x46, 0xa2, 0xf6, 0x15, 0xa7, 0xe9, 0xae, 0xb4, 0x1f, 0x5b, 0x13, 0x14, 0x89, 0xb6,
	0x50, 0xa8, 0x85, 0x68, 0x43, 0xdd, 0xf1, 0xcf, 0x49, 0x18, 0xf0, 0xb6, 0x19, 0xda, 0x76, 0xda,
	0x68, 0x13, 0xdf, 0x73, 0xbc, 0x0a, 0xe1, 0xcd, 0x53, 0x8c, 0x41, 0x10, 0x24, 0x98, 0x0b, 0xb4,
	0x89, 0xb4, 0x89, 0x17, 0x06, 0xab, 0xed, 0xc7, 0xfc, 0x17, 0x07, 0x5a, 0x14, 0xd8, 0xf0, 0x9d,
	0x4a, 0x8d, 0x50, 0x68, 0xd0, 0x24, 0x95, 0x2c, 0x58, 0xd5, 0x09, 0x85, 0x48, 0xb7, 0x29, 0xac,
	0xd2, 0xa8, 0xd7, 0x1d, 0xaf, 0x4a, 0x81, 0xe2, 0x37, 0x47, 0xc0, 0x1a, 0x42, 0xe8, 0x3b, 0x5e,
	0xe0, 0x54, 0x42, 0xb7, 0xe1, 0x71, 0x9c, 0x07, 0x1a, 0x4e, 0xdb, 0xa9, 0xb9, 0x55, 0x27, 0x6c,
	0xf8, 0x65, 0x85, 0xdc, 0x93, 0x53, 0x37, 0x3c, 0x6b, 0x9d, 0xac, 0x54, 0x1a, 0xf5, 0xd5, 0xfa,
	0x85, 0x1b, 0x9e, 0x37, 0x2e, 0x56, 0x4f, 0x1b, 0x8f, 0x28, 0xf0, 0x51, 0xdc, 0x2b, 0x48, 0x08,
	0xb0, 0x7e, 0xf8, 0x1f, 0x0b, 0x60, 0x1d, 0xfa, 0x8d, 0xa6, 0x73, 0xea, 0x84, 0x64, 0xeb, 0xcc,
	0x71, 0xbd, 0x9d, 0x48, 0x7d, 0x9b, 0xfc, 0xd2, 0x22, 0x41, 0x88, 0x56, 0xa0, 0x9f, 0xb4, 0xc3,
	0x52, 0x61, 0xb1, 0xb0, 0x3c, 0xb2, 0x7e, 0x63, 0x85, 0xda, 0x3c, 0xe6, 0xdc, 0x7e, 0xbc, 0x92,
	0xea, 0x11, 0x21, 0xa2, 0x39, 0x18, 0x6a, 0xb6, 0x4e, 0xca, 0xe7, 0xe4, 0xb2, 0xd4, 0xb7, 0x58,
	0x58, 0x2e, 0xda, 0x83, 0xcd, 0xd6, 0xc9, 0x37, 0xe4, 0x12, 0xdd, 0x80, 0x62, 0xe0, 0x9e, 0x7a,
	0x4e, 0xd8, 0xf2, 0x49, 0xa9, 0x7f, 0xb1, 0xb0, 0x3c, 0x6a, 0x27, 0x0d, 0xf8, 0x29, 0x2c, 0x18,
	0x85, 0x08, 0x9a, 0x0d, 0x2f, 0x20, 0xa8, 0x04, 0x43, 0x41, 0xab, 0x52, 0x21, 0x41, 0x40, 0x25,
	0x19, 0xb6, 0xc5, 0x27, 0xfe, 0x8f, 0x02, 0x94, 0x8e, 0x5a, 0x27, 0x75, 0x37, 0x7c, 0x93, 0x58,
	0x4f, 0x08, 0x8f, 0xa1, 0x2f, 0x7c, 0xc7, 0x65, 0x47, 0x4c, 0xf6, 0x23, 0xf7, 0xd4, 0x23, 0xd5,
	0xcd, 0x96, 0x57, 0xad, 0x11, 0xbb, 0x2f, 0x7c, 0x87, 0x9e, 0xc1, 0x40, 0x78, 0xd9, 0x24, 0x54,
	0xda, 0xf1, 0xf5, 0x87, 0x2b, 0xa9, 0x79, 0xb6, 0x92, 0x45, 0x78, 0xe5, 0xcd, 0x65, 0x93, 0xd8,
	0xb4, 0x1f, 0x7e, 0x09, 0x03, 0xd1, 0x17, 0x9a, 0x86, 0xc9, 0x37, 0x6f, 0x0f, 0x77, 0xca, 0xdf,
	0xbd, 0x3a, 0x3a, 0xdc, 0xd9, 0xda, 0x7b, 0xb1, 0xb7, 0xb3, 0x3d, 0xf9, 0x07, 0x34, 0x0e, 0x40,
	0x5b, 0x37, 0x8e, 0xde, 0xbe, 0xda, 0x9a, 0x2c, 0xa0, 0x31, 0x28, 0xd2, 0x6f, 0xfa, 0xd9, 0x87,
	0x26, 0x60, 0x84, 0x7e, 0x6e, 0xbd, 0x3e, 0x38, 0xd8, 0x7b, 0x33, 0xd9, 0x8f, 0x3f, 0x81, 0x79,
	0x03, 0xd3, 0x8e, 0x56, 0xf8, 0xaf, 0x02, 0x58, 0x5a, 0xbf, 0xe3, 0x75, 0x61, 0x87, 0x47, 0x29,
	0x3b, 0xdc, 0xd4, 0xc7, 0x30, 0xcd, 0x2b, 0x32, 0xc9, 0x73, 0xc9, 0x24, 0x1f, 0xe5, 0x9b, 0x24,
	0xe6, 0xf2, 0xfe, 0x8c, 0xf2, 0x14, 0x16, 0x8c, 0x6c, 0x3b, 0x9a, 0xe5, 0x07, 0x98, 0x3d, 0xf4,
	0x49, 0xd3, 0xf1, 0xc9, 0xdf, 0xb8, 0xe1, 0x59, 0xd5, 0x77, 0x2e, 0x84, 0x45, 0x9e, 0xc3, 0xf0,
	0x05, 0x6f, 0xe2, 0x76, 0xb9, 0xab, 0xdb, 0x45, 0x74, 0xa2, 0xcc, 0x83, 0x20, 0x32, 0x4f, 0xdc,
	0x0b, 0x3f, 0x82, 0x39, 0x8d, 0x36, 0x17, 0x08, 0xc1, 0xc0, 0x49, 0xad, 0x71, 0x42, 0x09, 0x8f,
	0xda, 0xf4, 0x37, 0x3e, 0x88, 0x56, 0x19, 0x45, 0x67, 0xaa, 0xbc, 0xf6, 0xab, 0xc4, 0xcf, 0xeb,
	0x81, 0x16, 0xa0, 0x18, 0x50, 0xd4, 0xb2, 0x5b, 0xe5, 0x6b, 0x69, 0x98, 0x35, 0xec, 0x55, 0xf1,
	0x5a, 0x4c, 0x6e, 0x2b, 0xf2, 0x6d, 0xb5, 0x8e, 0xe4, 0xf0, 0x2a, 0xcc, 0xf3, 0x1e, 0x1b, 0x75,
	0xe2, 0x55, 0x3b, 0x77, 0xf8, 0x31, 0xee, 0x20, 0x49, 0xcc, 0xec, 0xb7, 0x01, 0x10, 0xc4, 0x56,
	0xe1, 0x16, 0x5c, 0xd2, 0x2d, 0x48, 0xfb, 0xa4, 0xcc, 0x97, 0xea, 0x84, 0xab, 0x31, 0x7d, 0x49,
	0x05, 0x46, 0x7f, 0x17, 0x46, 0x2b, 0xb4, 0xb5, 0xe6, 0x84, 0x09, 0x87, 0x3b, 0x19, 0x1c, 0xb6,
	0x52, 0xa8, 0xb6, 0xd4, 0x11, 0xff, 0x00, 0x25, 0x83, 0xda, 0x8c, 0xc9, 0x33, 0x28, 0x3a, 0x51,
	0x63, 0x9d, 0x78, 0xc2, 0xc3, 0x2d, 0x66, 0x70, 0xd8, 0x10, 0x78, 0x76, 0xd2, 0x05, 0x4f, 0xc0,
	0xd8, 0x06, 0xdd, 0x47, 0x38, 0x41, 0xfc, 0x09, 0x8c, 0x8b, 0x06, 0x6e, 0xd8, 0x3b, 0x30, 0xc8,
	0xb6, 0x9a, 0x52, 0x61, 0xb1, 0x7f, 0x79, 0x64, 0x7d, 0x84, 0xd1, 0xa7, 0x58, 0x36, 0x07, 0xe1,
	0x87, 0x30, 0x49, 0x1b, 0x36, 0x2f, 0xf7, 0xb6, 0x85, 0x6c, 0xb3, 0xd0, 0xe7, 0x56, 0xa9, 0x50,
	0xc5, 0xcd, 0xc1, 0xff, 0xf9, 0xef, 0xdb, 0x7d, 0xdf, 0x17, 0xec, 0x3e, 0xb7, 0x8a, 0x9f, 0xc0,
	0x54, 0x0a, 0x97, 0x73, 0x59, 0x82, 0x6b, 0x94, 0x14, 0x57, 0x42, 0x62, 0xc2, 0x20, 0xf8, 0x0b,
	0x58, 0xda, 0x25, 0xe1, 0xab, 0x46, 0x95, 0x1c, 0x09, 0xa7, 0x1b, 0x6c, 0x9c, 0x9e, 0xfa, 0x24,
	0xf2, 0xb8, 0x9d, 0x98, 0x12, 0xc0, 0x79, 0x9d, 0xb9, 0x14, 0x5f, 0x01, 0xc4, 0x0e, 0x5d, 0xe8,
	0x7b, 0x5b, 0xb7, 0xa7, 0x44, 0xc6, 0x4e, 0x75, 0xc1, 0x5b, 0x30, 0xf3, 0xba, 0x19, 0x8d, 0x9a,
	0x53, 0x8b, 0x36, 0x83, 0x46, 0xe0, 0xd4, 0x8e, 0x42, 0x27, 0x24, 0xe8, 0x21, 0x5c, 0x6b, 0x3b,
	0xb5, 0x16, 0xa1, 0xa2, 0x8d, 0xaf, 0x4f, 0x33, 0xa2, 0x02, 0x67, 0x85, 0x22, 0xd9, 0x0c, 0x05,
	0x3b, 0x70, 0x7d, 0x97, 0x84, 0x02, 0x26, 0x86, 0x06, 0xed, 0xc3, 0x44, 0x40, 0x6a, 0xa4, 0x12,
	0x96, 0x5d, 0xaf, 0x1c, 0x44, 0x1d, 0xb8, 0xb1, 0xb0, 0xe4, 0xde, 0x8c, 0xfc, 0xed, 0x31, 0xd6,
	0x75, 0xcf, 0xa3, 0x9f, 0xf8, 0x39, 0x4c, 0xcb, 0x2c, 0xb8, 0x01, 0x96, 0x61, 0x20, 0x0a, 0x00,
	0xb8, 0xea, 0x5c, 0xca, 0xdd, 0x38, 0x00, 0xd9, 0x76, 0x42, 0xc7, 0xa6, 0x18, 0xf8, 0x2f, 0x05,
	0xb0, 0xd2, 0x24, 0x36, 0x2f, 0x0f, 0x1d, 0x3f, 0xbc, 0x14, 0xc2, 0x2e, 0xc1, 0x70, 0x33, 0xfa,
	0x2e, 0x6b, 0xa3, 0x31, 0x44, 0xdb, 0xf7, 0xaa, 0x26, 0x7d, 0xfa, 0xae, 0xaa, 0xcf, 0x2e, 0x2c,
	0x18, 0x85, 0xe9, 0x59, 0xad, 0x2f, 0x60, 0x76, 0x97, 0x84, 0xc7, 0x8d, 0x90, 0xf4, 0xae, 0x11,
	0xfe, 0x02, 0xe6, 0xb4, 0xce, 0x5c, 0x82, 0x45, 0xb8, 0xd6, 0x8e, 0xda, 0xb9, 0x08, 0xc0, 0x44,
	0x88, 0x50, 0x6d, 0x06, 0xc0, 0x3f, 0xc3, 0x8d, 0x68, 0x86, 0x92, 0x8b, 0x03, 0x1a, 0x03, 0xbe,
	0xd7, 0xe1, 0xdf, 0x83, 0x9b, 0x19, 0xbc, 0x7a, 0x36, 0xd8, 0x5f, 0x0b, 0x70, 0x7b, 0x97, 0x84,
	0xdf, 0x35, 0xab, 0x4e, 0x48, 0x32, 0x44, 0xbf, 0x03, 0x45, 0x16, 0xd8, 0xea, 0xb6, 0x1b, 0x66,
	0x80, 0xdf, 0x79, 0x3a, 0xbc, 0x84, 0xc5, 0x6c, 0x99, 0x7a, 0x56, 0xd1, 0x87, 0xbb, 0xd4, 0x5a,
	0xe1, 0x45, 0xc3, 0x3f, 0x3f, 0x74, 0x7c, 0xa7, 0x4e, 0x42, 0xe2, 0x07, 0xef, 0x75, 0x84, 0xbe,
	0x85, 0x7b, 0x1d, 0x78, 0xf6, 0xac, 0x86, 0x4b, 0xd7, 0xc8, 0x2b, 0x72, 0x41, 0xbd, 0xea, 0x7b,
	0x95, 0xfe, 0x6b, 0x31, 0x97, 0x55, 0x56, 0x3d, 0x0b, 0xbd, 0x41, 0xd7, 0xa3, 0xa0, 0x90, 0xde,
	0x5e, 0xee, 0xc3, 0x48, 0x93, 0x37, 0xeb, 0xd3, 0x0a, 0x04, 0x68, 0xaf, 0x8a, 0xb7, 0xe8, 0xaa,
	0x94, 0x49, 0x68, 0x72, 0x14, 0x3a, 0xc8, 0xb1, 0x43, 0x57, 0x4c, 0x42, 0xc4, 0x26, 0x3f, 0x11,
	0x9f, 0x78, 0x95, 0x78, 0xe3, 0xb9, 0x0b, 0x45, 0x5f, 0xb4, 0x29, 0xc2, 0x24, 0x00, 0xbc, 0x0f,
	0xb7, 0xb2, 0xc8, 0xf4, 0x2c, 0x92, 0x05, 0xa5, 0xd7, 0x27, 0x01, 0xf1, 0xdb, 0x24, 0x01, 0x8b,
	0x6d, 0x7c, 0x07, 0xe6, 0x0d, 0xb0, 0x9e, 0x59, 0x6c, 0xc0, 0x0d, 0x4e, 0x86, 0x7a, 0x33, 0x6d,
	0xce, 0x74, 0xe1, 0x13, 0xf7, 0xe0, 0x66, 0x06, 0x89, 0x9e, 0xa5, 0x79, 0x01, 0x0b, 0x82, 0x14,
	0xa7, 0x42, 0x5d, 0x6d, 0xcf, 0x13, 0xe2, 0x59, 0xa2, 0x95, 0x4c, 0x87, 0x4b, 0x74, 0x0b, 0x06,
	0x22, 0x97, 0xcc, 0x25, 0x4a, 0xbb, 0x6a, 0xda, 0x8e, 0xbf, 0x8c, 0x0d, 0x4f, 0x55, 0x92, 0x84,
	0xe8, 0x6a, 0x97, 0x98, 0x37, 0x74, 0xef, 0x92, 0xf7, 0x8f, 0x70, 0xe3, 0xc0, 0xf1, 0x4f, 0x5d,
	0xef, 0x25, 0x69, 0x93, 0x5a, 0x70, 0xd4, 0x3a, 0x09, 0x2a, 0xbe, 0x7b, 0x42, 0x7a, 0xd8, 0x77,
	0x17, 0xd2, 0xde, 0x98, 0x47, 0xe5, 0xc2, 0x0b, 0xe3, 0xef, 0xe1, 0x66, 0x06, 0x7d, 0x2e, 0xe0,
	0x53, 0x18, 0xab, 0x53, 0x84, 0x72, 0x8d, 0x62, 0xc8, 0x67, 0xd3, 0x74, 0x5f, 0x7b, 0xb4, 0x9e,
	0xfa, 0xc2, 0xdf, 0xc1, 0x75, 0x09, 0xfa, 0x3b, 0x09, 0xfc, 0x1a, 0xa6, 0x65, 0xb2, 0xd9, 0x72,
	0xf6, 0x77, 0x25, 0xe7, 0xe7, 0xb0, 0xc0, 0xb6, 0x8c, 0x20, 0x9a, 0x7a, 0x9a, 0x81, 0x17, 0xb4,
	0xbd, 0x2c, 0x25, 0xcc, 0xb7, 0x74, 0x74, 0x0c, 0x7d, 0xb9, 0x50, 0x8f, 0x61, 0x84, 0x77, 0x4e,
	0x4d, 0xf9, 0xc9, 0x58, 0xa4, 0x73, 0x12, 0xd2, 0xe9, 0x0e, 0xf5, 0xf8, 0x37, 0xfe, 0x13, 0xcc,
	0x24, 0x90, 0xb4, 0xff, 0xeb, 0x66, 0x53, 0xc5, 0xdf, 0xc0, 0xac, 0xda, 0xfb, 0xea, 0xa2, 0x4c,
	0x03, 0x4a, 0x69, 0x27, 0x5c, 0xcd, 0x3e, 0x1d, 0xd7, 0xa4, 0x95, 0xd3, 0xff, 0x18, 0x46, 0xf9,
	0x65, 0x56, 0x39, 0xe5, 0xea, 0x75, 0x06, 0x5c, 0x0a, 0xda, 0x19, 0x3f, 0x85, 0xc9, 0x97, 0x4e,
	0x10, 0x1d, 0x92, 0xab, 0xa4, 0x27, 0x3d, 0x9f, 0xc0, 0x54, 0xaa, 0x63, 0x72, 0xa6, 0x08, 0xa3,
	0x06, 0xf9, 0x4c, 0xc1, 0x70, 0x18, 0x04, 0x7f, 0x0a, 0x53, 0x4c, 0x96, 0x9e, 0x2d, 0xfb, 0xb9,
	0x30, 0x86, 0x64, 0xd5, 0xbb, 0x30, 0xc8, 0x30, 0x38, 0xcf, 0xd1, 0xb4, 0xbe, 0x36, 0x87, 0xe1,
	0x4f, 0x60, 0x92, 0x2e, 0xfd, 0x34, 0xd3, 0x2e, 0x1c, 0xc7, 0x13, 0x98, 0x4a, 0x75, 0x4b, 0x94,
	0xa4, 0x70, 0x59, 0x49, 0x16, 0x7c, 0x32, 0x08, 0x9e, 0x84, 0xf1, 0xe8, 0xdb, 0x8d, 0xbd, 0x14,
	0xfe, 0x14, 0x26, 0xe2, 0x16, 0x4e, 0xe7, 0x1e, 0x50, 0x3e, 0x2e, 0x51, 0xce, 0x79, 0x8c, 0x92,
	0x80, 0xe1, 0x7f, 0x2e, 0xc0, 0x34, 0xb5, 0xa0, 0x1a, 0x1e, 0xcf, 0xab, 0xf2, 0x77, 0xb7, 0x7e,
	0xd1, 0x53, 0x80, 0xa6, 0x73, 0xea, 0x7a, 0xec, 0x90, 0xdc, 0x4f, 0x95, 0x98, 0x93, 0x22, 0x8e,
	0xc3, 0x18, 0x6c, 0xa7, 0x50, 0xa3, 0x85, 0xa1, 0x08, 0x92, 0x1c, 0x58, 0xe9, 0xe0, 0x2a, 0x8a,
	0xb0, 0x71, 0xe7, 0x20, 0xfc, 0x38, 0x51, 0x43, 0x3a, 0x50, 0xcf, 0xc3, 0x70, 0x23, 0xfa, 0x4e,
	0xa9, 0x41, 0xbf, 0xf7, 0xaa, 0x69, 0x86, 0xf2, 0xd5, 0x43, 0x57, 0x0c, 0xff, 0xa5, 0x00, 0xa5,
	0x8d, 0x4a, 0xa5, 0xd1, 0xf2, 0xc2, 0xa0, 0x27, 0xa7, 0x22, 0x59, 0xb6, 0x4f, 0xb6, 0xec, 0xb4,
	0x38, 0x35, 0xf7, 0xd3, 0x76, 0xf6, 0x81, 0xee, 0xf1, 0xcb, 0xaf, 0x01, 0x7a, 0xd4, 0x9c, 0xe2,
	0x47, 0x69, 0xc6, 0x3b, 0x75, 0xc3, 0xb5, 0x0d, 0xf3, 0x06, 0x81, 0xb8, 0x4e, 0xf7, 0x61, 0xc8,
	0x61, 0x40, 0x3e, 0xb1, 0xc6, 0x24, 0x32, 0xb6, 0x80, 0xe2, 0x43, 0x98, 0xa5, 0xd6, 0xf8, 0xdd,
	0x94, 0x8a, 0x28, 0x32, 0x3b, 0xff, 0x6e, 0x14, 0x7f, 0x86, 0xb9, 0x2d, 0xc7, 0xab, 0xd6, 0x0c,
	0x24, 0xbb, 0x3a, 0x9a, 0x3c, 0x84, 0x61, 0xd7, 0x0b, 0x89, 0xdf, 0x76, 0x6a, 0xfc, 0x46, 0x71,
	0x9c, 0x59, 0x63, 0x8f, 0xb7, 0xda, 0x31, 0x1c, 0x3f, 0x87, 0x92, 0xce, 0x2b, 0xf1, 0x0e, 0x15,
	0x0a, 0x93, 0xbd, 0x03, 0xc3, 0xb7, 0x39, 0x0c, 0x6f, 0x8a, 0x0d, 0x68, 0x9b, 0x34, 0xc3, 0xb3,
	0x2b, 0x49, 0x8c, 0xdf, 0x88, 0x8d, 0x48, 0xa5, 0xc1, 0x25, 0xf9, 0xa3, 0xf0, 0xce, 0xe5, 0x6a,
	0x84, 0xc0, 0xe5, 0x99, 0x92, 0xbc, 0x73, 0x04, 0x10, 0xee, 0x99, 0x7e, 0xe0, 0x3d, 0xc0, 0x29,
	0x18, 0x3b, 0x5e, 0x5d, 0xcd, 0xa4, 0xf8, 0x18, 0xee, 0xe4, 0x92, 0xe2, 0x72, 0xae, 0xc2, 0x60,
	0x8b, 0xc2, 0xb8, 0x84, 0x73, 0x9a, 0x84, 0xac, 0xab, 0xcd, 0xd1, 0xf0, 0x11, 0xcc, 0x1f, 0x36,
	0x02, 0x37, 0xf2, 0x10, 0xba, 0x64, 0x57, 0xf4, 0x51, 0xf8, 0x6b, 0xb0, 0x4c, 0x44, 0xb9, 0x8c,
	0x0f, 0x61, 0xb8, 0xc9, 0xa1, 0x5c, 0x4a, 0x3e, 0x3b, 0x44, 0x1f, 0x3b, 0x86, 0xe3, 0x16, 0xcc,
	0xb0, 0xd5, 0xb2, 0x79, 0xc9, 0xf7, 0x84, 0x5e, 0xe6, 0xa1, 0xec, 0x2b, 0xfb, 0xba, 0xf7, 0x95,
	0x5f, 0x8a, 0x45, 0x9a, 0xb0, 0x4d, 0x7c, 0x17, 0xf5, 0x6f, 0x8a, 0xef, 0x62, 0x0e, 0x8e, 0x83,
	0xb0, 0x0f, 0xd3, 0xa2, 0x7b, 0xaf, 0x97, 0x3c, 0x57, 0x16, 0xf9, 0x4f, 0x89, 0xa5, 0x34, 0xf7,
	0xde, 0x59, 0xe2, 0x0a, 0xcc, 0xd3, 0x06, 0xa1, 0xef, 0x86, 0x57, 0xed, 0x6d, 0x7f, 0x8f, 0x74,
	0x8b, 0x37, 0x82, 0x3e, 0x59, 0x37, 0xb1, 0x21, 0x7c, 0x05, 0x96, 0x89, 0x49, 0xb2, 0x31, 0x53,
	0x44, 0x79, 0x63, 0x66, 0x62, 0x32, 0x08, 0xfe, 0x0a, 0xe6, 0x38, 0x81, 0x2b, 0x1e, 0x27, 0xa3,
	0x93, 0x88, 0x46, 0xa0, 0x7b, 0xfe, 0x93, 0x30, 0xce, 0x43, 0x37, 0x11, 0x18, 0x7c, 0x06, 0x13,
	0x71, 0x0b, 0xa7, 0xf3, 0x01, 0x0c, 0xf1, 0x10, 0x8d, 0x1b, 0x5c, 0x8e, 0x69, 0x04, 0x10, 0xff,
	0xb5, 0x00, 0xe3, 0xdc, 0xf3, 0xf5, 0x64, 0xe8, 0x55, 0x98, 0x08, 0x5c, 0xaf, 0x42, 0xca, 0xa1,
	0x5b, 0x27, 0x41, 0xe8, 0xd4, 0x9b, 0xd4, 0xde, 0xfd, 0x0c, 0x75, 0xf2, 0x0f, 0xf6, 0x38, 0x05,
	0xbf, 0x11, 0x50, 0xc9, 0x1b, 0xf7, 0x77, 0xf0, 0xc6, 0x9f, 0xc1, 0x44, 0x2c, 0x53, 0xa2, 0x0f,
	0x73, 0xb4, 0x8a, 0x3e, 0xdc, 0x0b, 0x0b, 0x20, 0x3e, 0x16, 0x01, 0x1e, 0x73, 0x84, 0xbd, 0xa8,
	0x44, 0x9d, 0xc9, 0x3b, 0xee, 0x5a, 0x23, 0x65, 0x06, 0x22, 0xe0, 0x3b, 0xe6, 0x44, 0xff, 0xb3,
	0x20, 0x02, 0x66, 0x4e, 0x98, 0xcb, 0x95, 0xbb, 0xb9, 0x61, 0xe8, 0x3f, 0x69, 0x5d, 0x96, 0xfa,
	0xd2, 0x41, 0xf4, 0xa1, 0xef, 0x56, 0x08, 0x3d, 0xb4, 0xd8, 0x11, 0x10, 0xdd, 0x85, 0x81, 0x80,
	0xd4, 0x22, 0x9b, 0x98, 0x91, 0x28, 0x14, 0x3d, 0x04, 0xa8, 0x39, 0x41, 0x58, 0x66, 0x91, 0xf1,
	0x80, 0x1e, 0x19, 0x17, 0x6b, 0x22, 0x90, 0x46, 0xf7, 0x61, 0x22, 0x88, 0xf4, 0x8e, 0x46, 0xc7,
	0x6b, 0xd5, 0x4f, 0x88, 0x5f, 0xba, 0x46, 0xb5, 0x19, 0x17, 0xcd, 0xaf, 0x68, 0x6b, 0xe4, 0xd6,
	0x44, 0x68, 0xf4, 0xff, 0xec, 0xd6, 0x54, 0xb6, 0xbd, 0x84, 0x64, 0x6f, 0x61, 0x2e, 0x76, 0xeb,
	0xbd, 0x7b, 0xb6, 0x0e, 0x3b, 0x46, 0x49, 0x27, 0xcd, 0x65, 0xfb, 0x08, 0x8a, 0x62, 0x3f, 0x10,
	0xe2, 0xa9, 0x1b, 0x46, 0x82, 0x10, 0x1d, 0xba, 0x76, 0x49, 0x78, 0x4c, 0x4e, 0x9d, 0x68, 0x05,
	0x88, 0x75, 0xfa, 0x31, 0x4d, 0x11, 0x24, 0xad, 0x9c, 0xf4, 0x0d, 0x28, 0x26, 0xab, 0x28, 0x92,
	0xbb, 0xdf, 0x4e, 0x1a, 0xf0, 0x31, 0x40, 0x62, 0x48, 0x84, 0x60, 0x20, 0x38, 0x77, 0x19, 0xda,
	0x80, 0x4d, 0x7f, 0x47, 0xf1, 0x64, 0xcd, 0xad, 0xbb, 0x21, 0x9f, 0xb4, 0xec, 0x03, 0xdd, 0x02,
	0xa8, 0x92, 0xa0, 0x42, 0xbc, 0xaa, 0xeb, 0x9d, 0xd2, 0x25, 0x37, 0x6c, 0xa7, 0x5a, 0xf0, 0x33,
	0xee, 0xc6, 0x0c, 0x7b, 0x63, 0x57, 0xce, 0xfa, 0x19, 0xcc, 0x69, 0x01, 0x5f, 0x2f, 0xe3, 0x78,
	0x07, 0x96, 0x68, 0x5a, 0xf5, 0xa7, 0x24, 0x26, 0xd7, 0xf6, 0x7e, 0xfc, 0x3d, 0xe0, 0x3c, 0x24,
	0xce, 0x6f, 0x1d, 0x86, 0x7d, 0xfe, 0x9b, 0xfb, 0xcd, 0xd9, 0x98, 0xa3, 0xd4, 0xd7, 0x8e, 0xf1,
	0xf0, 0x5f, 0x0a, 0x30, 0x4d, 0x47, 0x58, 0x44, 0xd3, 0xbf, 0xf5, 0x48, 0x24, 0xe2, 0xf7, 0xfe,
	0xdc, 0xf8, 0x3d, 0x09, 0xfe, 0x07, 0x52, 0xc1, 0x3f, 0xde, 0x84, 0x19, 0x45, 0x18, 0xae, 0xda,
	0x03, 0x18, 0xe6, 0x31, 0xbb, 0x30, 0xa6, 0x12, 0xd2, 0xc7, 0x60, 0xbc, 0x2f, 0xee, 0x1c, 0x54,
	0x8d, 0x72, 0x7d, 0x54, 0x2c, 0x4f, 0x5f, 0x5a, 0x9e, 0x2d, 0x71, 0x03, 0xf1, 0x5b, 0x04, 0xfa,
	0x14, 0x16, 0x5f, 0x10, 0xb2, 0xe7, 0xfd, 0xe4, 0x3b, 0x41, 0xe8, 0xb7, 0x2a, 0x61, 0xcb, 0x27,
	0xaa, 0x6c, 0xd3, 0xe9, 0x0c, 0x62, 0xcc, 0xfe, 0x15, 0x2c, 0xe5, 0xf4, 0xec, 0x5d, 0x92, 0x33,
	0x58, 0xe4, 0xc9, 0xd8, 0xf8, 0x02, 0x3c, 0xc9, 0x0d, 0x73, 0x49, 0xb6, 0x0d, 0x99, 0x65, 0x43,
	0x6e, 0xde, 0x40, 0x20, 0x9d, 0x5c, 0xfe, 0x33, 0x2c, 0xe5, 0x70, 0xca, 0xc9, 0xba, 0xcb, 0xec,
	0xfb, 0xae, 0xc8, 0xfe, 0x0c, 0x6e, 0x70, 0xf6, 0xc7, 0x8d, 0x90, 0xe8, 0x4a, 0x7e, 0x6d, 0x50,
	0xd2, 0x90, 0x7a, 0x96, 0x3b, 0x33, 0x2f, 0xba, 0x58, 0x90, 0x38, 0xb5, 0xe0, 0x66, 0x06, 0xa7,
	0x1c, 0x25, 0x9f, 0x1b, 0x94, 0xec, 0xc8, 0x5e, 0x62, 0xfb, 0x6b, 0x3c, 0x92, 0x2f, 0xdd, 0x5f,
	0x5a, 0x6e, 0xd5, 0xa5, 0x97, 0xd3, 0x6d, 0x37, 0xad, 0xe4, 0xb1, 0x41, 0xc9, 0x15, 0x9d, 0x8b,
	0x4e, 0xa0, 0x83, 0xca, 0x4f, 0xe3, 0xb1, 0x35, 0xf1, 0xce, 0xa9, 0x68, 0x78, 0x0d, 0x93, 0x3c,
	0xe0, 0x93, 0x6e, 0x8e, 0xe4, 0x2b, 0x8b, 0x98, 0xa5, 0x88, 0x54, 0x51, 0x09, 0x86, 0xda, 0xc4,
	0x8f, 0x4d, 0x35, 0x60, 0x8b, 0x4f, 0xfc, 0x04, 0xa6, 0x52, 0x04, 0xbb, 0x0f, 0x1d, 0xdb, 0x3c,
	0xf2, 0x3c, 0x66, 0x74, 0x82, 0x1e, 0x05, 0xba, 0xf2, 0x96, 0xff, 0x9c, 0x07, 0xf6, 0x32, 0xdf,
	0x5e, 0x76, 0x9b, 0xa7, 0x80, 0x76, 0x82, 0xd0, 0xad, 0x3b, 0x21, 0x79, 0x41, 0x52, 0xf7, 0xe6,
	0x1d, 0x55, 0x5e, 0x87, 0xeb, 0x52, 0xc7, 0x38, 0x6e, 0xeb, 0xff, 0x89, 0x88, 0x5c, 0x65, 0x91,
	0xf5, 0x8b, 0xe0, 0x51, 0x2b, 0xfe, 0x1c, 0x66, 0x44, 0x1f, 0x76, 0xe5, 0xdc, 0x03, 0xbf, 0x6f,
	0x61, 0x56, 0xed, 0x9b, 0x75, 0xb7, 0xdd, 0xd7, 0xe5, 0x1d, 0xfc, 0xbf, 0x16, 0x60, 0x96, 0xe7,
	0x1e, 0x68, 0x75, 0xda, 0x66, 0x2b, 0x76, 0x9f, 0x6b, 0x7c, 0xd3, 0x89, 0x2c, 0x37, 0x2e, 0xca,
	0xe4, 0x78, 0x19, 0x61, 0xfb, 0xf1, 0xca, 0x66, 0x2b, 0xa0, 0x3d, 0x52, 0xfb, 0x4f, 0xee, 0x1e,
	0x96, 0xde, 0xfb, 0xfa, 0xe5, 0xbd, 0xef, 0x26, 0xc0, 0x89, 0x13, 0x56, 0xce, 0xca, 0x81, 0xfb,
	0x2b, 0x8b, 0x40, 0xfb, 0xed, 0x22, 0x6d, 0x39, 0x72, 0x7f, 0x25, 0xf8, 0x1b, 0x98, 0xd3, 0x44,
	0xe4, 0x7a, 0xaf, 0xc1, 0x20, 0x93, 0x88, 0x8f, 0x6f, 0x29, 0x4b, 0x4a, 0x9b, 0xe3, 0x45, 0x83,
	0x2d, 0x6a, 0x9b, 0x7a, 0x4d, 0x5b, 0x5d, 0x97, 0x3a, 0xc6, 0xf1, 0xc1, 0xc8, 0x45, 0xd2, 0x2c,
	0x5f, 0x6a, 0x27, 0xf8, 0x76, 0x1a, 0x09, 0x7f, 0x08, 0x53, 0x29, 0x50, 0x87, 0x3a, 0x95, 0x17,
	0x69, 0x81, 0x53, 0x8a, 0x43, 0x42, 0x51, 0xbe, 0xab, 0x4f, 0x61, 0xa7, 0x70, 0xf0, 0x01, 0xdc,
	0xda, 0xb1, 0xb7, 0xd6, 0xd7, 0x12, 0xf0, 0x46, 0xb3, 0xe9, 0x37, 0xda, 0x89, 0x04, 0x1f, 0xc2,
	0x58, 0x82, 0xaf, 0x5b, 0x62, 0x34, 0x01, 0xee, 0x55, 0xf1, 0xbf, 0x15, 0xe0, 0x76, 0x26, 0xbd,
	0xd8, 0x6b, 0x8c, 0xd2, 0x3d, 0xb7, 0x1c, 0x34, 0x5a, 0xbe, 0x38, 0xb5, 0xda, 0x23, 0xb4, 0xed,
	0x88, 0x36, 0xa1, 0x59, 0x18, 0x74, 0xea, 0xf4, 0x52, 0x91, 0x57, 0x56, 0xb2, 0xaf, 0xa8, 0x9d,
	0xbc, 0x6b, 0xba, 0xfe, 0x25, 0x9d, 0x2b, 0xfd, 0x36, 0xff, 0x8a, 0xf6, 0x74, 0xaf, 0x11, 0x9d,
	0x80, 0x79, 0x88, 0x43, 0x3f, 0xa2, 0x78, 0x34, 0x55, 0xa5, 0x73, 0x8d, 0x82, 0xd2, 0x45, 0x38,
	0x7f, 0x84, 0x89, 0x6d, 0x42, 0x23, 0xe8, 0x5e, 0x46, 0xfc, 0x4b, 0x98, 0x4c, 0x7a, 0x25, 0x81,
	0x41, 0x95, 0xb7, 0xc9, 0x81, 0x01, 0xc7, 0xb4, 0x63, 0x30, 0x5e, 0x86, 0x71, 0xd1, 0xd8, 0x61,
	0x88, 0x3f, 0x8f, 0xc5, 0x4b, 0xdf, 0xb6, 0x72, 0x42, 0xf2, 0x6d, 0xab, 0xc0, 0x13, 0x50, 0x6c,
	0x41, 0x49, 0xab, 0x09, 0x10, 0x11, 0xee, 0x09, 0xcc, 0x1b, 0x60, 0x9c, 0xc3, 0x0e, 0x20, 0x8f,
	0x01, 0xcb, 0xcd, 0x18, 0xca, 0x75, 0xe2, 0x21, 0xae, 0xda, 0xd9, 0x9e, 0xf2, 0x54, 0x72, 0x78,
	0x1f, 0x2c, 0x7d, 0xc7, 0x0a, 0x12, 0x8d, 0xd3, 0xd9, 0x8f, 0xa2, 0xc8, 0x77, 0x44, 0xc3, 0xc8,
	0x72, 0x14, 0x3c, 0x32, 0x64, 0x69, 0x89, 0x9f, 0x61, 0xc1, 0x48, 0x8b, 0x4b, 0xfc, 0x0d, 0x4c,
	0xd7, 0x04, 0xb8, 0xdc, 0x8c, 0xe1, 0xf2, 0xd2, 0x37, 0x6c, 0x9f, 0xd7, 0x6b, 0x3a, 0xd1, 0x68,
	0x0d, 0xbe, 0xa6, 0x35, 0xce, 0x47, 0x4d, 0x52, 0xe9, 0x34, 0x40, 0x07, 0x80, 0xd2, 0xc8, 0xb1,
	0xd3, 0x1d, 0x61, 0x65, 0xd2, 0xe5, 0xa0, 0x49, 0x2a, 0xf1, 0xe9, 0x80, 0x97, 0x4e, 0xb3, 0x32,
	0xbb, 0xb8, 0x13, 0x34, 0xe2, 0xdf, 0xd1, 0x09, 0x2e, 0x81, 0xc4, 0xa3, 0x75, 0x08, 0xd7, 0xa5,
	0x56, 0xce, 0xe5, 0x33, 0x18, 0x4d, 0x71, 0x49, 0x46, 0xc8, 0xcc, 0x66, 0x24, 0x61, 0x13, 0xe0,
	0xc7, 0xd1, 0x31, 0x2c, 0xfa, 0x64, 0xb9, 0xbe, 0x6e, 0x34, 0x3d, 0x8a, 0x76, 0x71, 0xb5, 0x8b,
	0xa6, 0x6f, 0x2a, 0x7f, 0x67, 0x10, 0x84, 0xa5, 0x09, 0x1b, 0xf1, 0x6f, 0x5c, 0x82, 0xd9, 0x97,
	0x4e, 0x10, 0x6e, 0xd6, 0x1a, 0x95, 0xf3, 0xaf, 0x89, 0x7b, 0x7a, 0x26, 0x56, 0x44, 0x24, 0xa1,
	0x06, 0xe1, 0xdc, 0x66, 0x61, 0xf0, 0x8c, 0xb6, 0xf0, 0xf3, 0x28, 0xff, 0x5a, 0xff, 0xf7, 0x61,
	0x18, 0x7f, 0xc3, 0xca, 0xe8, 0x8f, 0x88, 0xdf, 0x76, 0x2b, 0x04, 0x11, 0x40, 0x7a, 0x55, 0x27,
	0xfa, 0x40, 0x8e, 0x1e, 0xb2, 0xca, 0x3e, 0xad, 0xfb, 0x1d, 0xf1, 0xb8, 0x44, 0x09, 0x9b, 0x54,
	0x71, 0xa7, 0x99, 0x8d, 0x5e, 0xfd, 0x69, 0x66, 0x63, 0x2a, 0x74, 0x3d, 0x81, 0x29, 0xad, 0xba,
	0x13, 0xdd, 0x33, 0xf5, 0xd6, 0xaa, 0x3f, 0xad, 0x0f, 0x3a, 0xa1, 0x71, 0x1e, 0x7f, 0x0b, 0x13,
	0x4a, 0xa1, 0x2f, 0xba, 0x63, 0xea, 0xaa, 0x94, 0x18, 0x5b, 0x77, 0xf3, 0x91, 0x12, 0x0d, 0xb4,
	0xda, 0x66, 0x45, 0x83, 0xac, 0x2a, 0x74, 0x45, 0x83, 0xec, 0xba, 0xf1, 0x33, 0xb8, 0x6e, 0xa8,
	0x9f, 0x46, 0xf7, 0xbb, 0x2c, 0xec, 0xb6, 0x96, 0x3b, 0x23, 0x72, 0x4e, 0xbf, 0xc6, 0x35, 0xbd,
	0xfa, 0x01, 0x09, 0x3d, 0x32, 0x19, 0x24, 0xf3, 0x20, 0x68, 0xad, 0x74, 0x8b, 0xce, 0x79, 0x7b,
	0x30, 0x63, 0x3c, 0x09, 0xa1, 0x07, 0x26, 0x42, 0xc6, 0x73, 0x99, 0xf5, 0xb0, 0x1b, 0xd4, 0xc4,
	0xaa, 0x86, 0x27, 0x0b, 0x48, 0x9d, 0xbb, 0x59, 0x2f, 0x2b, 0x14, 0xab, 0xe6, 0xbd, 0x7e, 0x48,
	0xac, 0xaa, 0x7b, 0x6c, 0xb3, 0x55, 0x33, 0x0f, 0x65, 0x66, 0xab, 0x66, 0x9f, 0xa3, 0xd6, 0xff,
	0x77, 0x15, 0x10, 0x77, 0x21, 0xb4, 0x2a, 0x83, 0xbb, 0x91, 0xb7, 0xe2, 0xf2, 0x5b, 0x5c, 0x07,
	0x20, 0xb9, 0xd0, 0xcd, 0x78, 0x03, 0x62, 0xdd, 0xc9, 0xc5, 0xe1, 0xda, 0x1e, 0xc3, 0x98, 0x74,
	0x07, 0x83, 0x96, 0x94, 0xa3, 0x8d, 0x7e, 0x59, 0x64, 0xe1, 0x3c, 0x94, 0xc4, 0x8a, 0x99, 0x97,
	0x19, 0x8a, 0x15, 0x3b, 0x5d, 0x97, 0x28, 0x56, 0xec, 0x7c, 0x47, 0xb2, 0x0d, 0x43, 0xfc, 0x26,
	0x1d, 0x2d, 0x48, 0x5d, 0xe5, 0x3b, 0x7f, 0xeb, 0x86, 0x19, 0xc8, 0xa9, 0xc4, 0x46, 0x17, 0xf5,
	0x28, 0x46, 0xa3, 0x2b, 0xa5, 0x2e, 0x46, 0xa3, 0x6b, 0x05, 0x2d, 0x87, 0x30, 0x92, 0xaa, 0x43,
	0x41, 0xb7, 0x0d, 0x7d, 0xd2, 0x75, 0x2b, 0xd6, 0x62, 0x36, 0x02, 0xa7, 0x78, 0x00, 0x90, 0x94,
	0x78, 0xa0, 0x5b, 0x06, 0xfc, 0xb4, 0x90, 0xb7, 0x33, 0xe1, 0xaa, 0x80, 0xf4, 0xde, 0xdf, 0x28,
	0x60, 0x3a, 0xd5, 0x60, 0x14, 0x50, 0x4e, 0x19, 0x6c, 0xc3, 0x10, 0x97, 0x5b, 0x19, 0x13, 0x39,
	0xab, 0xa3, 0x8c, 0x89, 0x9a, 0xe0, 0x21, 0x51, 0x7c, 0xa2, 0xa6, 0xb1, 0x94, 0x8d, 0x2e, 0x33,
	0x99, 0xa6, 0x6c, 0x74, 0x39, 0xf9, 0xb0, 0x72, 0x7c, 0x75, 0x11, 0xe7, 0xaa, 0xd0, 0x5d, 0x53,
	0x67, 0x35, 0x17, 0x66, 0xdd, 0xeb, 0x80, 0x95, 0xcc, 0x2d, 0x39, 0xc9, 0xa9, 0xcc, 0x2d, 0x63,
	0xe2, 0x55, 0x99, 0x5b, 0x19, 0x59, 0xd2, 0x63, 0x18, 0x93, 0x92, 0x91, 0xca, 0x82, 0x36, 0x25,
	0x47, 0x2d, 0x9c, 0x87, 0xc2, 0xe9, 0xee, 0x43, 0x31, 0xbe, 0x7d, 0x41, 0x37, 0x4d, 0x6a, 0x26,
	0x86, 0xbe, 0x95, 0x05, 0x4e, 0xb6, 0x61, 0xed, 0x66, 0x04, 0x19, 0x4c, 0x67, 0xb8, 0xb1, 0xb1,
	0x3e, 0xe8, 0x84, 0xc6, 0x79, 0x1c, 0xc1, 0x68, 0xfa, 0x76, 0x01, 0x69, 0x53, 0x54, 0x2d, 0xef,
	0xb3, 0x96, 0x72, 0x30, 0x92, 0x59, 0xcc, 0x8b, 0x91, 0x94, 0x59, 0x2c, 0x17, 0x2d, 0x29, 0xb3,
	0x58, 0xad, 0x5f, 0xda, 0x87, 0x62, 0x5c, 0x1c, 0xa5, 0x98, 0x52, 0xad, 0xb5, 0x52, 0x4c, 0xa9,
	0xd7, 0x54, 0x95, 0x61, 0x52, 0xcd, 0xde, 0x28, 0x53, 0x35, 0x23, 0x6f, 0xa4, 0x4c, 0xd5, 0xcc,
	0x14, 0xd0, 0x3e, 0x14, 0xe3, 0x72, 0x35, 0x45, 0x58, 0xb5, 0xfe, 0x4d, 0x11, 0x56, 0xaf, 0x72,
	0x7b, 0xcb, 0x02, 0x64, 0x92, 0x35, 0xed, 0x8d, 0x89, 0x39, 0x65, 0xda, 0x67, 0x64, 0xd1, 0x8e,
	0x61, 0x4c, 0xaa, 0x78, 0x52, 0xa6, 0xbd, 0xa9, 0x80, 0xca, 0xc2, 0x79, 0x28, 0x3a, 0x5d, 0xd3,
	0x72, 0x32, 0xd5, 0x97, 0x65, 0xd0, 0x95, 0xcd, 0x7a, 0x04, 0xa3, 0xe9, 0x57, 0x20, 0xca, 0xf4,
	0x34, 0xbc, 0xa9, 0x51, 0xa6, 0xa7, 0xf1, 0x49, 0xcc, 0x99, 0xfc, 0x1a, 0x47, 0x88, 0x7c, 0x3f,
	0xb3, 0xa7, 0x22, 0xf8, 0x72, 0x67, 0xc4, 0x24, 0x4c, 0x57, 0x9e, 0x8f, 0x28, 0x61, 0xba, 0xf9,
	0x65, 0x8a, 0x12, 0xa6, 0x67, 0xbd, 0x40, 0xf1, 0x60, 0xc6, 0xf8, 0xe6, 0x43, 0x09, 0x2e, 0xf3,
	0xde, 0xa0, 0x28, 0xc1, 0x65, 0xfe, 0x13, 0x92, 0x0b, 0x28, 0x65, 0xbd, 0xc1, 0x40, 0x1f, 0xa9,
	0x74, 0xf2, 0x9e, 0x8f, 0x58, 0x8f, 0xba, 0xc4, 0xe6, 0x8c, 0xff, 0xa9, 0xc0, 0x5f, 0xb7, 0x64,
	0xbd, 0x9d, 0x40, 0x8f, 0x75, 0x35, 0x3a, 0xbc, 0xed, 0xb0, 0xd6, 0x7b, 0xe9, 0xc2, 0x05, 0x39,
	0xa7, 0x8f, 0xac, 0xb4, 0x57, 0x10, 0x68, 0xd9, 0x60, 0x45, 0xe3, 0x9b, 0x0c, 0xeb, 0x41, 0x17,
	0x98, 0xd2, 0xe4, 0x49, 0xbf, 0x72, 0xd0, 0x27, 0x8f, 0xe1, 0x19, 0x85, 0x3e, 0x79, 0x8c, 0x0f,
	0x25, 0x7e, 0x51, 0x9e, 0x61, 0x24, 0x5b, 0xf8, 0xc3, 0xec, 0xfe, 0xda, 0x46, 0xfe, 0x61, 0x57,
	0xb8, 0x9c, 0x65, 0x15, 0xa6, 0xb4, 0x27, 0x0c, 0xea, 0x7e, 0x96, 0xf1, 0xfc, 0x41, 0xdd, 0xcf,
	0xb2, 0x5e, 0x42, 0xac, 0x15, 0x50, 0x13, 0x66, 0x8c, 0xcf, 0x13, 0x94, 0x55, 0x91, 0xf7, 0x0a,
	0x42, 0x59, 0x15, 0xb9, 0xaf, 0x1d, 0xd6, 0x0a, 0x29, 0xbd, 0x92, 0xf2, 0x7f, 0xb3, 0x5e, 0xda,
	0xeb, 0x02, 0xb3, 0x5e, 0xfa, 0x2b, 0x82, 0xb5, 0x02, 0xaa, 0xc3, 0xb4, 0xe9, 0x8d, 0x83, 0x32,
	0xf7, 0x72, 0x9e, 0x53, 0x58, 0x0f, 0xba, 0xc0, 0x8c, 0xd9, 0xfd, 0x1d, 0x4c, 0x28, 0x97, 0xf6,
	0xca, 0xec, 0x33, 0x67, 0x1d, 0x94, 0xd9, 0x97, 0x71, 0xef, 0xbf, 0x5c, 0x58, 0x2b, 0x44, 0xf3,
	0x5b, 0xb9, 0x3b, 0x52, 0x38, 0x98, 0xef, 0x9c, 0x14, 0x0e, 0x59, 0xd7, 0x4f, 0x87, 0x30, 0x92,
	0xaa, 0xa7, 0x50, 0x62, 0x73, 0xbd, 0xfe, 0xc2, 0x5a, 0xcc, 0x46, 0x48, 0xa6, 0xaf, 0x56, 0x5d,
	0xab, 0x0c, 0x73, 0x56, 0x39, 0xb0, 0x32, 0xcc, 0x99, 0x45, 0xba, 0x6b, 0x05, 0xe4, 0xc0, 0xa4,
	0x5a, 0x6d, 0xaa, 0x44, 0x2a, 0x19, 0x85, 0xaf, 0x4a, 0xa4, 0x92, 0x55, 0xb2, 0xca, 0x56, 0x88,
	0xf1, 0x45, 0x88, 0xb2, 0x42, 0xf2, 0x5e, 0xa5, 0x28, 0x2b, 0x24, 0xf7, 0x81, 0x09, 0x9b, 0xbb,
	0xa6, 0xe2, 0x55, 0x65, 0xee, 0xe6, 0xd4, 0xc8, 0x5a, 0x0f, 0xba, 0xc0, 0x8c, 0xd9, 0xfd, 0x43,
	0x41, 0x2a, 0xb8, 0x55, 0x6b, 0x51, 0xd1, 0x6a, 0x16, 0xb1, 0x8c, 0x02, 0x58, 0x6b, 0xad, 0xfb,
	0x0e, 0xba, 0xce, 0xf2, 0xcb, 0x11, 0xa3, 0xce, 0xc6, 0x87, 0x29, 0x46, 0x9d, 0xcd, 0xcf, 0x50,
	0xd6, 0x0a, 0xe8, 0x47, 0x98, 0x50, 0x4a, 0x76, 0x90, 0xe9, 0x20, 0xa4, 0x31, 0xb9, 0x9b, 0x8f,
	0x14, 0xd3, 0x3f, 0x05, 0xa4, 0x57, 0xcc, 0xaa, 0x97, 0xa7, 0x59, 0x75, 0xba, 0xea, 0xe5, 0x69,
	0x66, 0xe9, 0x2d, 0x53, 0x44, 0xa9, 0x1d, 0x42, 0xa6, 0xd0, 0xb6, 0x83, 0x22, 0x19, 0xe5, 0x47,
	0x6b, 0x05, 0xf4, 0xf7, 0x60, 0x65, 0x97, 0x0d, 0xa1, 0x15, 0x95, 0x4a, 0x7e, 0x11, 0x92, 0xb5,
	0xda, 0x35, 0x7e, 0x2c, 0xc0, 0x9f, 0xe9, 0x33, 0xeb, 0x8c, 0x87, 0xeb, 0x8a, 0x00, 0x1d, 0x9f,
	0xc7, 0x2b, 0x02, 0x74, 0xf1, 0x22, 0x7e, 0x1f, 0x8a, 0xf1, 0x63, 0x7d, 0xe5, 0xa4, 0xa2, 0x3e,
	0xf8, 0x57, 0x4e, 0x2a, 0xfa, 0x1b, 0xff, 0x0d, 0x18, 0x64, 0xff, 0x2d, 0x80, 0x2c, 0x1d, 0x33,
	0xde, 0x12, 0x16, 0x8c, 0xb0, 0xc4, 0x4f, 0xa7, 0x72, 0xf0, 0x8a, 0x9f, 0xd6, 0xd3, 0xfa, 0x8a,
	0x9f, 0x36, 0xa5, 0xef, 0xdf, 0xc2, 0xb8, 0x9c, 0x65, 0x57, 0x8e, 0x4f, 0xc6, 0xf4, 0xbd, 0x72,
	0x7c, 0xca, 0x48, 0xd3, 0x87, 0x30, 0x97, 0x91, 0x33, 0x45, 0x72, 0x24, 0x94, 0x9f, 0xa9, 0xb5,
	0x3e, 0xea, 0x0e, 0x39, 0xb9, 0xb5, 0x4a, 0xa0, 0xca, 0xad, 0x95, 0x96, 0x87, 0x56, 0x6e, 0xad,
	0x0c, 0xa9, 0xe7, 0x43, 0x18, 0x49, 0x25, 0xc2, 0x51, 0x16, 0x7e, 0x60, 0xb6, 0xb8, 0x29, 0x87,
	0xbe, 0x0d, 0x43, 0x3c, 0xaf, 0xa9, 0x9c, 0xf7, 0xe5, 0xfc, 0xa9, 0x72, 0xde, 0x57, 0x53, 0xa6,
	0xbb, 0x30, 0x2c, 0xd2, 0xb5, 0xc8, 0x88, 0x19, 0x4b, 0x74, 0x33, 0x03, 0x9a, 0xdc, 0x9b, 0x68,
	0xb1, 0xbc, 0xb2, 0x51, 0x67, 0xa5, 0x5c, 0x95, 0x8d, 0x3a, 0x3b, 0xfb, 0x7a, 0x06, 0xd7, 0x0d,
	0xa9, 0x4e, 0xe5, 0x0c, 0x99, 0x9d, 0x58, 0x55, 0xce, 0x90, 0x79, 0x59, 0xd3, 0x03, 0x80, 0x24,
	0x3f, 0x88, 0xd4, 0x3b, 0x23, 0x25, 0x03, 0xaa, 0x8c, 0xbe, 0x21, 0xe9, 0x79, 0x08, 0x23, 0xa9,
	0x2c, 0x25, 0xca, 0xc2, 0xcf, 0x18, 0x7d, 0x53, 0x82, 0x93, 0x5e, 0x03, 0xca, 0x29, 0x47, 0xed,
	0x1a, 0xd0, 0x98, 0xc4, 0xd4, 0xae, 0x01, 0xcd, 0x79, 0xcb, 0xcd, 0xd5, 0x1f, 0x1e, 0x55, 0x1a,
	0x55, 0x42, 0x91, 0xe9, 0xff, 0x43, 0x55, 0x1a, 0xb5, 0x15, 0xb7, 0x41, 0xff, 0xd8, 0xea, 0x91,
	0xd7, 0xa8, 0x92, 0x55, 0xda, 0xba, 0x2a, 0xfe, 0xa5, 0xeb, 0x64, 0x90, 0x7e, 0x7f, 0xfc, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x5a, 0x9b, 0xf5, 0xb8, 0x4b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TradingServiceClient is the client API for TradingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TradingServiceClient interface {
	// Prepare a submit order request
	PrepareSubmitOrder(ctx context.Context, in *PrepareSubmitOrderRequest, opts ...grpc.CallOption) (*PrepareSubmitOrderResponse, error)
	// Prepare a cancel order request
	PrepareCancelOrder(ctx context.Context, in *PrepareCancelOrderRequest, opts ...grpc.CallOption) (*PrepareCancelOrderResponse, error)
	// Prepare an amend order request
	PrepareAmendOrder(ctx context.Context, in *PrepareAmendOrderRequest, opts ...grpc.CallOption) (*PrepareAmendOrderResponse, error)
	// Request a withdrawal
	PrepareWithdraw(ctx context.Context, in *PrepareWithdrawRequest, opts ...grpc.CallOption) (*PrepareWithdrawResponse, error)
	// Submit a signed transaction
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error)
	// Submit a signed transaction (v2)
	SubmitTransactionV2(ctx context.Context, in *SubmitTransactionV2Request, opts ...grpc.CallOption) (*SubmitTransactionV2Response, error)
	// Prepare a governance proposal
	PrepareProposalSubmission(ctx context.Context, in *PrepareProposalSubmissionRequest, opts ...grpc.CallOption) (*PrepareProposalSubmissionResponse, error)
	// Prepare a governance vote
	PrepareVoteSubmission(ctx context.Context, in *PrepareVoteSubmissionRequest, opts ...grpc.CallOption) (*PrepareVoteSubmissionResponse, error)
	// Propagate a chain event
	PropagateChainEvent(ctx context.Context, in *PropagateChainEventRequest, opts ...grpc.CallOption) (*PropagateChainEventResponse, error)
	// Prepare a liquidity provision request
	PrepareLiquidityProvision(ctx context.Context, in *PrepareLiquidityProvisionRequest, opts ...grpc.CallOption) (*PrepareLiquidityProvisionResponse, error)
}

type tradingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingServiceClient(cc grpc.ClientConnInterface) TradingServiceClient {
	return &tradingServiceClient{cc}
}

func (c *tradingServiceClient) PrepareSubmitOrder(ctx context.Context, in *PrepareSubmitOrderRequest, opts ...grpc.CallOption) (*PrepareSubmitOrderResponse, error) {
	out := new(PrepareSubmitOrderResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingService/PrepareSubmitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) PrepareCancelOrder(ctx context.Context, in *PrepareCancelOrderRequest, opts ...grpc.CallOption) (*PrepareCancelOrderResponse, error) {
	out := new(PrepareCancelOrderResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingService/PrepareCancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) PrepareAmendOrder(ctx context.Context, in *PrepareAmendOrderRequest, opts ...grpc.CallOption) (*PrepareAmendOrderResponse, error) {
	out := new(PrepareAmendOrderResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingService/PrepareAmendOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) PrepareWithdraw(ctx context.Context, in *PrepareWithdrawRequest, opts ...grpc.CallOption) (*PrepareWithdrawResponse, error) {
	out := new(PrepareWithdrawResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingService/PrepareWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error) {
	out := new(SubmitTransactionResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingService/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) SubmitTransactionV2(ctx context.Context, in *SubmitTransactionV2Request, opts ...grpc.CallOption) (*SubmitTransactionV2Response, error) {
	out := new(SubmitTransactionV2Response)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingService/SubmitTransactionV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) PrepareProposalSubmission(ctx context.Context, in *PrepareProposalSubmissionRequest, opts ...grpc.CallOption) (*PrepareProposalSubmissionResponse, error) {
	out := new(PrepareProposalSubmissionResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingService/PrepareProposalSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) PrepareVoteSubmission(ctx context.Context, in *PrepareVoteSubmissionRequest, opts ...grpc.CallOption) (*PrepareVoteSubmissionResponse, error) {
	out := new(PrepareVoteSubmissionResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingService/PrepareVoteSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) PropagateChainEvent(ctx context.Context, in *PropagateChainEventRequest, opts ...grpc.CallOption) (*PropagateChainEventResponse, error) {
	out := new(PropagateChainEventResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingService/PropagateChainEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) PrepareLiquidityProvision(ctx context.Context, in *PrepareLiquidityProvisionRequest, opts ...grpc.CallOption) (*PrepareLiquidityProvisionResponse, error) {
	out := new(PrepareLiquidityProvisionResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingService/PrepareLiquidityProvision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingServiceServer is the server API for TradingService service.
type TradingServiceServer interface {
	// Prepare a submit order request
	PrepareSubmitOrder(context.Context, *PrepareSubmitOrderRequest) (*PrepareSubmitOrderResponse, error)
	// Prepare a cancel order request
	PrepareCancelOrder(context.Context, *PrepareCancelOrderRequest) (*PrepareCancelOrderResponse, error)
	// Prepare an amend order request
	PrepareAmendOrder(context.Context, *PrepareAmendOrderRequest) (*PrepareAmendOrderResponse, error)
	// Request a withdrawal
	PrepareWithdraw(context.Context, *PrepareWithdrawRequest) (*PrepareWithdrawResponse, error)
	// Submit a signed transaction
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error)
	// Submit a signed transaction (v2)
	SubmitTransactionV2(context.Context, *SubmitTransactionV2Request) (*SubmitTransactionV2Response, error)
	// Prepare a governance proposal
	PrepareProposalSubmission(context.Context, *PrepareProposalSubmissionRequest) (*PrepareProposalSubmissionResponse, error)
	// Prepare a governance vote
	PrepareVoteSubmission(context.Context, *PrepareVoteSubmissionRequest) (*PrepareVoteSubmissionResponse, error)
	// Propagate a chain event
	PropagateChainEvent(context.Context, *PropagateChainEventRequest) (*PropagateChainEventResponse, error)
	// Prepare a liquidity provision request
	PrepareLiquidityProvision(context.Context, *PrepareLiquidityProvisionRequest) (*PrepareLiquidityProvisionResponse, error)
}

// UnimplementedTradingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTradingServiceServer struct {
}

func (*UnimplementedTradingServiceServer) PrepareSubmitOrder(ctx context.Context, req *PrepareSubmitOrderRequest) (*PrepareSubmitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareSubmitOrder not implemented")
}
func (*UnimplementedTradingServiceServer) PrepareCancelOrder(ctx context.Context, req *PrepareCancelOrderRequest) (*PrepareCancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareCancelOrder not implemented")
}
func (*UnimplementedTradingServiceServer) PrepareAmendOrder(ctx context.Context, req *PrepareAmendOrderRequest) (*PrepareAmendOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareAmendOrder not implemented")
}
func (*UnimplementedTradingServiceServer) PrepareWithdraw(ctx context.Context, req *PrepareWithdrawRequest) (*PrepareWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareWithdraw not implemented")
}
func (*UnimplementedTradingServiceServer) SubmitTransaction(ctx context.Context, req *SubmitTransactionRequest) (*SubmitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (*UnimplementedTradingServiceServer) SubmitTransactionV2(ctx context.Context, req *SubmitTransactionV2Request) (*SubmitTransactionV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransactionV2 not implemented")
}
func (*UnimplementedTradingServiceServer) PrepareProposalSubmission(ctx context.Context, req *PrepareProposalSubmissionRequest) (*PrepareProposalSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareProposalSubmission not implemented")
}
func (*UnimplementedTradingServiceServer) PrepareVoteSubmission(ctx context.Context, req *PrepareVoteSubmissionRequest) (*PrepareVoteSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareVoteSubmission not implemented")
}
func (*UnimplementedTradingServiceServer) PropagateChainEvent(ctx context.Context, req *PropagateChainEventRequest) (*PropagateChainEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropagateChainEvent not implemented")
}
func (*UnimplementedTradingServiceServer) PrepareLiquidityProvision(ctx context.Context, req *PrepareLiquidityProvisionRequest) (*PrepareLiquidityProvisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareLiquidityProvision not implemented")
}

func RegisterTradingServiceServer(s *grpc.Server, srv TradingServiceServer) {
	s.RegisterService(&_TradingService_serviceDesc, srv)
}

func _TradingService_PrepareSubmitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareSubmitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).PrepareSubmitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingService/PrepareSubmitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).PrepareSubmitOrder(ctx, req.(*PrepareSubmitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_PrepareCancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareCancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).PrepareCancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingService/PrepareCancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).PrepareCancelOrder(ctx, req.(*PrepareCancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_PrepareAmendOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareAmendOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).PrepareAmendOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingService/PrepareAmendOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).PrepareAmendOrder(ctx, req.(*PrepareAmendOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_PrepareWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).PrepareWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingService/PrepareWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).PrepareWithdraw(ctx, req.(*PrepareWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingService/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_SubmitTransactionV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).SubmitTransactionV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingService/SubmitTransactionV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).SubmitTransactionV2(ctx, req.(*SubmitTransactionV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_PrepareProposalSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareProposalSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).PrepareProposalSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingService/PrepareProposalSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).PrepareProposalSubmission(ctx, req.(*PrepareProposalSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_PrepareVoteSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareVoteSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).PrepareVoteSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingService/PrepareVoteSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).PrepareVoteSubmission(ctx, req.(*PrepareVoteSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_PropagateChainEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropagateChainEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).PropagateChainEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingService/PropagateChainEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).PropagateChainEvent(ctx, req.(*PropagateChainEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_PrepareLiquidityProvision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareLiquidityProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).PrepareLiquidityProvision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingService/PrepareLiquidityProvision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).PrepareLiquidityProvision(ctx, req.(*PrepareLiquidityProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TradingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vega.api.v1.TradingService",
	HandlerType: (*TradingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareSubmitOrder",
			Handler:    _TradingService_PrepareSubmitOrder_Handler,
		},
		{
			MethodName: "PrepareCancelOrder",
			Handler:    _TradingService_PrepareCancelOrder_Handler,
		},
		{
			MethodName: "PrepareAmendOrder",
			Handler:    _TradingService_PrepareAmendOrder_Handler,
		},
		{
			MethodName: "PrepareWithdraw",
			Handler:    _TradingService_PrepareWithdraw_Handler,
		},
		{
			MethodName: "SubmitTransaction",
			Handler:    _TradingService_SubmitTransaction_Handler,
		},
		{
			MethodName: "SubmitTransactionV2",
			Handler:    _TradingService_SubmitTransactionV2_Handler,
		},
		{
			MethodName: "PrepareProposalSubmission",
			Handler:    _TradingService_PrepareProposalSubmission_Handler,
		},
		{
			MethodName: "PrepareVoteSubmission",
			Handler:    _TradingService_PrepareVoteSubmission_Handler,
		},
		{
			MethodName: "PropagateChainEvent",
			Handler:    _TradingService_PropagateChainEvent_Handler,
		},
		{
			MethodName: "PrepareLiquidityProvision",
			Handler:    _TradingService_PrepareLiquidityProvision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vega/api/trading.proto",
}

// TradingDataServiceClient is the client API for TradingDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TradingDataServiceClient interface {
	// Get a list of Accounts by Market
	MarketAccounts(ctx context.Context, in *MarketAccountsRequest, opts ...grpc.CallOption) (*MarketAccountsResponse, error)
	// Get a list of Accounts by Party
	PartyAccounts(ctx context.Context, in *PartyAccountsRequest, opts ...grpc.CallOption) (*PartyAccountsResponse, error)
	// Get a list of accounts holding infrastructure fees.
	// Can be filtered by asset, there will be 1 infrastructure fee account per
	// asset in the network.
	FeeInfrastructureAccounts(ctx context.Context, in *FeeInfrastructureAccountsRequest, opts ...grpc.CallOption) (*FeeInfrastructureAccountsResponse, error)
	// Get a list of Candles by Market
	Candles(ctx context.Context, in *CandlesRequest, opts ...grpc.CallOption) (*CandlesResponse, error)
	// Get Market Data by Market ID
	MarketDataByID(ctx context.Context, in *MarketDataByIDRequest, opts ...grpc.CallOption) (*MarketDataByIDResponse, error)
	// Get a list of Market Data
	MarketsData(ctx context.Context, in *MarketsDataRequest, opts ...grpc.CallOption) (*MarketsDataResponse, error)
	// Get a Market by ID
	MarketByID(ctx context.Context, in *MarketByIDRequest, opts ...grpc.CallOption) (*MarketByIDResponse, error)
	// Get Market Depth
	MarketDepth(ctx context.Context, in *MarketDepthRequest, opts ...grpc.CallOption) (*MarketDepthResponse, error)
	// Get a list of Markets
	Markets(ctx context.Context, in *MarketsRequest, opts ...grpc.CallOption) (*MarketsResponse, error)
	// Get an Order by Market and Order ID
	OrderByMarketAndID(ctx context.Context, in *OrderByMarketAndIDRequest, opts ...grpc.CallOption) (*OrderByMarketAndIDResponse, error)
	// Get an Order by Pending Order reference (UUID)
	OrderByReference(ctx context.Context, in *OrderByReferenceRequest, opts ...grpc.CallOption) (*OrderByReferenceResponse, error)
	// Get a list of Orders by Market
	OrdersByMarket(ctx context.Context, in *OrdersByMarketRequest, opts ...grpc.CallOption) (*OrdersByMarketResponse, error)
	// Get a list of Orders by Party
	OrdersByParty(ctx context.Context, in *OrdersByPartyRequest, opts ...grpc.CallOption) (*OrdersByPartyResponse, error)
	// Get a specific order by order ID
	OrderByID(ctx context.Context, in *OrderByIDRequest, opts ...grpc.CallOption) (*OrderByIDResponse, error)
	// Get all versions of the order by its orderID
	OrderVersionsByID(ctx context.Context, in *OrderVersionsByIDRequest, opts ...grpc.CallOption) (*OrderVersionsByIDResponse, error)
	// Get Margin Levels by Party ID
	MarginLevels(ctx context.Context, in *MarginLevelsRequest, opts ...grpc.CallOption) (*MarginLevelsResponse, error)
	// Get a list of Parties
	Parties(ctx context.Context, in *PartiesRequest, opts ...grpc.CallOption) (*PartiesResponse, error)
	// Get a Party by ID
	PartyByID(ctx context.Context, in *PartyByIDRequest, opts ...grpc.CallOption) (*PartyByIDResponse, error)
	// Get a list of Positions by Party
	PositionsByParty(ctx context.Context, in *PositionsByPartyRequest, opts ...grpc.CallOption) (*PositionsByPartyResponse, error)
	// Get latest Trade
	LastTrade(ctx context.Context, in *LastTradeRequest, opts ...grpc.CallOption) (*LastTradeResponse, error)
	// Get a list of Trades by Market
	TradesByMarket(ctx context.Context, in *TradesByMarketRequest, opts ...grpc.CallOption) (*TradesByMarketResponse, error)
	// Get a list of Trades by Order
	TradesByOrder(ctx context.Context, in *TradesByOrderRequest, opts ...grpc.CallOption) (*TradesByOrderResponse, error)
	// Get a list of Trades by Party
	TradesByParty(ctx context.Context, in *TradesByPartyRequest, opts ...grpc.CallOption) (*TradesByPartyResponse, error)
	// Get governance data (proposals and votes) for all proposals
	GetProposals(ctx context.Context, in *GetProposalsRequest, opts ...grpc.CallOption) (*GetProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals by party authoring them
	GetProposalsByParty(ctx context.Context, in *GetProposalsByPartyRequest, opts ...grpc.CallOption) (*GetProposalsByPartyResponse, error)
	// Get votes by party casting them
	GetVotesByParty(ctx context.Context, in *GetVotesByPartyRequest, opts ...grpc.CallOption) (*GetVotesByPartyResponse, error)
	// Get governance data (proposals and votes) for proposals that aim creating new markets
	GetNewMarketProposals(ctx context.Context, in *GetNewMarketProposalsRequest, opts ...grpc.CallOption) (*GetNewMarketProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals that aim updating markets
	GetUpdateMarketProposals(ctx context.Context, in *GetUpdateMarketProposalsRequest, opts ...grpc.CallOption) (*GetUpdateMarketProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals that aim updating Vega network parameters
	GetNetworkParametersProposals(ctx context.Context, in *GetNetworkParametersProposalsRequest, opts ...grpc.CallOption) (*GetNetworkParametersProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals aiming to create new assets
	GetNewAssetProposals(ctx context.Context, in *GetNewAssetProposalsRequest, opts ...grpc.CallOption) (*GetNewAssetProposalsResponse, error)
	// Get governance data (proposals and votes) for a proposal located by ID
	GetProposalByID(ctx context.Context, in *GetProposalByIDRequest, opts ...grpc.CallOption) (*GetProposalByIDResponse, error)
	// Get governance data (proposals and votes) for a proposal located by reference
	GetProposalByReference(ctx context.Context, in *GetProposalByReferenceRequest, opts ...grpc.CallOption) (*GetProposalByReferenceResponse, error)
	// Subscribe to a stream of all governance updates
	ObserveGovernance(ctx context.Context, in *ObserveGovernanceRequest, opts ...grpc.CallOption) (TradingDataService_ObserveGovernanceClient, error)
	// Subscribe to a stream of proposal updates
	ObservePartyProposals(ctx context.Context, in *ObservePartyProposalsRequest, opts ...grpc.CallOption) (TradingDataService_ObservePartyProposalsClient, error)
	// Subscribe to a stream of votes cast by a specific party
	ObservePartyVotes(ctx context.Context, in *ObservePartyVotesRequest, opts ...grpc.CallOption) (TradingDataService_ObservePartyVotesClient, error)
	// Subscribe to a stream of proposal votes
	ObserveProposalVotes(ctx context.Context, in *ObserveProposalVotesRequest, opts ...grpc.CallOption) (TradingDataService_ObserveProposalVotesClient, error)
	// Subscribe to a stream of events from the core
	ObserveEventBus(ctx context.Context, opts ...grpc.CallOption) (TradingDataService_ObserveEventBusClient, error)
	LastBlockHeight(ctx context.Context, in *LastBlockHeightRequest, opts ...grpc.CallOption) (*LastBlockHeightResponse, error)
	// Get Time
	GetVegaTime(ctx context.Context, in *GetVegaTimeRequest, opts ...grpc.CallOption) (*GetVegaTimeResponse, error)
	// Subscribe to a stream of Accounts
	AccountsSubscribe(ctx context.Context, in *AccountsSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_AccountsSubscribeClient, error)
	// Subscribe to a stream of Candles
	CandlesSubscribe(ctx context.Context, in *CandlesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_CandlesSubscribeClient, error)
	// Subscribe to a stream of Margin Levels
	MarginLevelsSubscribe(ctx context.Context, in *MarginLevelsSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarginLevelsSubscribeClient, error)
	// Subscribe to a stream of Market Depth
	MarketDepthSubscribe(ctx context.Context, in *MarketDepthSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketDepthSubscribeClient, error)
	// Subscribe to a stream of Market Depth Price Level Updates
	MarketDepthUpdatesSubscribe(ctx context.Context, in *MarketDepthUpdatesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketDepthUpdatesSubscribeClient, error)
	// Subscribe to a stream of Markets Data
	MarketsDataSubscribe(ctx context.Context, in *MarketsDataSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketsDataSubscribeClient, error)
	// Subscribe to a stream of Orders
	OrdersSubscribe(ctx context.Context, in *OrdersSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_OrdersSubscribeClient, error)
	// Subscribe to a stream of Positions
	PositionsSubscribe(ctx context.Context, in *PositionsSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_PositionsSubscribeClient, error)
	// Subscribe to a stream of Trades
	TradesSubscribe(ctx context.Context, in *TradesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_TradesSubscribeClient, error)
	// Subscribe to a stream of Transfer Responses
	TransferResponsesSubscribe(ctx context.Context, in *TransferResponsesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_TransferResponsesSubscribeClient, error)
	// Get an aggregate of signatures from all the nodes of the network
	GetNodeSignaturesAggregate(ctx context.Context, in *GetNodeSignaturesAggregateRequest, opts ...grpc.CallOption) (*GetNodeSignaturesAggregateResponse, error)
	// Get an asset by its identifier
	AssetByID(ctx context.Context, in *AssetByIDRequest, opts ...grpc.CallOption) (*AssetByIDResponse, error)
	// Get a list of all assets on Vega
	Assets(ctx context.Context, in *AssetsRequest, opts ...grpc.CallOption) (*AssetsResponse, error)
	// Get an estimate for the fee to be paid for a given order
	EstimateFee(ctx context.Context, in *EstimateFeeRequest, opts ...grpc.CallOption) (*EstimateFeeResponse, error)
	// Get an estimate for the margin required for a new order
	EstimateMargin(ctx context.Context, in *EstimateMarginRequest, opts ...grpc.CallOption) (*EstimateMarginResponse, error)
	// Get the bundle approval for an ERC20 withdrawal,
	// these data are being used to bundle the call to the smart contract on the ethereum bridge
	ERC20WithdrawalApproval(ctx context.Context, in *ERC20WithdrawalApprovalRequest, opts ...grpc.CallOption) (*ERC20WithdrawalApprovalResponse, error)
	// Get a withdrawal by its identifier
	Withdrawal(ctx context.Context, in *WithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error)
	// Get withdrawals for a party
	Withdrawals(ctx context.Context, in *WithdrawalsRequest, opts ...grpc.CallOption) (*WithdrawalsResponse, error)
	// Get a deposit by its identifier
	Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	// Get deposits for a party
	Deposits(ctx context.Context, in *DepositsRequest, opts ...grpc.CallOption) (*DepositsResponse, error)
	// Get the network parameters
	NetworkParameters(ctx context.Context, in *NetworkParametersRequest, opts ...grpc.CallOption) (*NetworkParametersResponse, error)
	// Get the liquidity provision orders
	LiquidityProvisions(ctx context.Context, in *LiquidityProvisionsRequest, opts ...grpc.CallOption) (*LiquidityProvisionsResponse, error)
	// Get an oracle spec by ID
	OracleSpec(ctx context.Context, in *OracleSpecRequest, opts ...grpc.CallOption) (*OracleSpecResponse, error)
	// Get the oracle specs
	OracleSpecs(ctx context.Context, in *OracleSpecsRequest, opts ...grpc.CallOption) (*OracleSpecsResponse, error)
	// Get all oracle data
	OracleDataBySpec(ctx context.Context, in *OracleDataBySpecRequest, opts ...grpc.CallOption) (*OracleDataBySpecResponse, error)
}

type tradingDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingDataServiceClient(cc grpc.ClientConnInterface) TradingDataServiceClient {
	return &tradingDataServiceClient{cc}
}

func (c *tradingDataServiceClient) MarketAccounts(ctx context.Context, in *MarketAccountsRequest, opts ...grpc.CallOption) (*MarketAccountsResponse, error) {
	out := new(MarketAccountsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/MarketAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) PartyAccounts(ctx context.Context, in *PartyAccountsRequest, opts ...grpc.CallOption) (*PartyAccountsResponse, error) {
	out := new(PartyAccountsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/PartyAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) FeeInfrastructureAccounts(ctx context.Context, in *FeeInfrastructureAccountsRequest, opts ...grpc.CallOption) (*FeeInfrastructureAccountsResponse, error) {
	out := new(FeeInfrastructureAccountsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/FeeInfrastructureAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Candles(ctx context.Context, in *CandlesRequest, opts ...grpc.CallOption) (*CandlesResponse, error) {
	out := new(CandlesResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/Candles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) MarketDataByID(ctx context.Context, in *MarketDataByIDRequest, opts ...grpc.CallOption) (*MarketDataByIDResponse, error) {
	out := new(MarketDataByIDResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/MarketDataByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) MarketsData(ctx context.Context, in *MarketsDataRequest, opts ...grpc.CallOption) (*MarketsDataResponse, error) {
	out := new(MarketsDataResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/MarketsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) MarketByID(ctx context.Context, in *MarketByIDRequest, opts ...grpc.CallOption) (*MarketByIDResponse, error) {
	out := new(MarketByIDResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/MarketByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) MarketDepth(ctx context.Context, in *MarketDepthRequest, opts ...grpc.CallOption) (*MarketDepthResponse, error) {
	out := new(MarketDepthResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/MarketDepth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Markets(ctx context.Context, in *MarketsRequest, opts ...grpc.CallOption) (*MarketsResponse, error) {
	out := new(MarketsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/Markets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OrderByMarketAndID(ctx context.Context, in *OrderByMarketAndIDRequest, opts ...grpc.CallOption) (*OrderByMarketAndIDResponse, error) {
	out := new(OrderByMarketAndIDResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/OrderByMarketAndID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OrderByReference(ctx context.Context, in *OrderByReferenceRequest, opts ...grpc.CallOption) (*OrderByReferenceResponse, error) {
	out := new(OrderByReferenceResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/OrderByReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OrdersByMarket(ctx context.Context, in *OrdersByMarketRequest, opts ...grpc.CallOption) (*OrdersByMarketResponse, error) {
	out := new(OrdersByMarketResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/OrdersByMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OrdersByParty(ctx context.Context, in *OrdersByPartyRequest, opts ...grpc.CallOption) (*OrdersByPartyResponse, error) {
	out := new(OrdersByPartyResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/OrdersByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OrderByID(ctx context.Context, in *OrderByIDRequest, opts ...grpc.CallOption) (*OrderByIDResponse, error) {
	out := new(OrderByIDResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/OrderByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OrderVersionsByID(ctx context.Context, in *OrderVersionsByIDRequest, opts ...grpc.CallOption) (*OrderVersionsByIDResponse, error) {
	out := new(OrderVersionsByIDResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/OrderVersionsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) MarginLevels(ctx context.Context, in *MarginLevelsRequest, opts ...grpc.CallOption) (*MarginLevelsResponse, error) {
	out := new(MarginLevelsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/MarginLevels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Parties(ctx context.Context, in *PartiesRequest, opts ...grpc.CallOption) (*PartiesResponse, error) {
	out := new(PartiesResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/Parties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) PartyByID(ctx context.Context, in *PartyByIDRequest, opts ...grpc.CallOption) (*PartyByIDResponse, error) {
	out := new(PartyByIDResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/PartyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) PositionsByParty(ctx context.Context, in *PositionsByPartyRequest, opts ...grpc.CallOption) (*PositionsByPartyResponse, error) {
	out := new(PositionsByPartyResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/PositionsByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) LastTrade(ctx context.Context, in *LastTradeRequest, opts ...grpc.CallOption) (*LastTradeResponse, error) {
	out := new(LastTradeResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/LastTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) TradesByMarket(ctx context.Context, in *TradesByMarketRequest, opts ...grpc.CallOption) (*TradesByMarketResponse, error) {
	out := new(TradesByMarketResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/TradesByMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) TradesByOrder(ctx context.Context, in *TradesByOrderRequest, opts ...grpc.CallOption) (*TradesByOrderResponse, error) {
	out := new(TradesByOrderResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/TradesByOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) TradesByParty(ctx context.Context, in *TradesByPartyRequest, opts ...grpc.CallOption) (*TradesByPartyResponse, error) {
	out := new(TradesByPartyResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/TradesByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetProposals(ctx context.Context, in *GetProposalsRequest, opts ...grpc.CallOption) (*GetProposalsResponse, error) {
	out := new(GetProposalsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/GetProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetProposalsByParty(ctx context.Context, in *GetProposalsByPartyRequest, opts ...grpc.CallOption) (*GetProposalsByPartyResponse, error) {
	out := new(GetProposalsByPartyResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/GetProposalsByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetVotesByParty(ctx context.Context, in *GetVotesByPartyRequest, opts ...grpc.CallOption) (*GetVotesByPartyResponse, error) {
	out := new(GetVotesByPartyResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/GetVotesByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNewMarketProposals(ctx context.Context, in *GetNewMarketProposalsRequest, opts ...grpc.CallOption) (*GetNewMarketProposalsResponse, error) {
	out := new(GetNewMarketProposalsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/GetNewMarketProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetUpdateMarketProposals(ctx context.Context, in *GetUpdateMarketProposalsRequest, opts ...grpc.CallOption) (*GetUpdateMarketProposalsResponse, error) {
	out := new(GetUpdateMarketProposalsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/GetUpdateMarketProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNetworkParametersProposals(ctx context.Context, in *GetNetworkParametersProposalsRequest, opts ...grpc.CallOption) (*GetNetworkParametersProposalsResponse, error) {
	out := new(GetNetworkParametersProposalsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/GetNetworkParametersProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNewAssetProposals(ctx context.Context, in *GetNewAssetProposalsRequest, opts ...grpc.CallOption) (*GetNewAssetProposalsResponse, error) {
	out := new(GetNewAssetProposalsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/GetNewAssetProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetProposalByID(ctx context.Context, in *GetProposalByIDRequest, opts ...grpc.CallOption) (*GetProposalByIDResponse, error) {
	out := new(GetProposalByIDResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/GetProposalByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetProposalByReference(ctx context.Context, in *GetProposalByReferenceRequest, opts ...grpc.CallOption) (*GetProposalByReferenceResponse, error) {
	out := new(GetProposalByReferenceResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/GetProposalByReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObserveGovernance(ctx context.Context, in *ObserveGovernanceRequest, opts ...grpc.CallOption) (TradingDataService_ObserveGovernanceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingDataService_serviceDesc.Streams[0], "/vega.api.v1.TradingDataService/ObserveGovernance", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveGovernanceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveGovernanceClient interface {
	Recv() (*ObserveGovernanceResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveGovernanceClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveGovernanceClient) Recv() (*ObserveGovernanceResponse, error) {
	m := new(ObserveGovernanceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ObservePartyProposals(ctx context.Context, in *ObservePartyProposalsRequest, opts ...grpc.CallOption) (TradingDataService_ObservePartyProposalsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingDataService_serviceDesc.Streams[1], "/vega.api.v1.TradingDataService/ObservePartyProposals", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObservePartyProposalsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObservePartyProposalsClient interface {
	Recv() (*ObservePartyProposalsResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObservePartyProposalsClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObservePartyProposalsClient) Recv() (*ObservePartyProposalsResponse, error) {
	m := new(ObservePartyProposalsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ObservePartyVotes(ctx context.Context, in *ObservePartyVotesRequest, opts ...grpc.CallOption) (TradingDataService_ObservePartyVotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingDataService_serviceDesc.Streams[2], "/vega.api.v1.TradingDataService/ObservePartyVotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObservePartyVotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObservePartyVotesClient interface {
	Recv() (*ObservePartyVotesResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObservePartyVotesClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObservePartyVotesClient) Recv() (*ObservePartyVotesResponse, error) {
	m := new(ObservePartyVotesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ObserveProposalVotes(ctx context.Context, in *ObserveProposalVotesRequest, opts ...grpc.CallOption) (TradingDataService_ObserveProposalVotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingDataService_serviceDesc.Streams[3], "/vega.api.v1.TradingDataService/ObserveProposalVotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveProposalVotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveProposalVotesClient interface {
	Recv() (*ObserveProposalVotesResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveProposalVotesClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveProposalVotesClient) Recv() (*ObserveProposalVotesResponse, error) {
	m := new(ObserveProposalVotesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ObserveEventBus(ctx context.Context, opts ...grpc.CallOption) (TradingDataService_ObserveEventBusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingDataService_serviceDesc.Streams[4], "/vega.api.v1.TradingDataService/ObserveEventBus", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveEventBusClient{stream}
	return x, nil
}

type TradingDataService_ObserveEventBusClient interface {
	Send(*ObserveEventBusRequest) error
	Recv() (*ObserveEventBusResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveEventBusClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveEventBusClient) Send(m *ObserveEventBusRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tradingDataServiceObserveEventBusClient) Recv() (*ObserveEventBusResponse, error) {
	m := new(ObserveEventBusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) LastBlockHeight(ctx context.Context, in *LastBlockHeightRequest, opts ...grpc.CallOption) (*LastBlockHeightResponse, error) {
	out := new(LastBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/LastBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetVegaTime(ctx context.Context, in *GetVegaTimeRequest, opts ...grpc.CallOption) (*GetVegaTimeResponse, error) {
	out := new(GetVegaTimeResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/GetVegaTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) AccountsSubscribe(ctx context.Context, in *AccountsSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_AccountsSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingDataService_serviceDesc.Streams[5], "/vega.api.v1.TradingDataService/AccountsSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceAccountsSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_AccountsSubscribeClient interface {
	Recv() (*AccountsSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceAccountsSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceAccountsSubscribeClient) Recv() (*AccountsSubscribeResponse, error) {
	m := new(AccountsSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) CandlesSubscribe(ctx context.Context, in *CandlesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_CandlesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingDataService_serviceDesc.Streams[6], "/vega.api.v1.TradingDataService/CandlesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceCandlesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_CandlesSubscribeClient interface {
	Recv() (*CandlesSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceCandlesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceCandlesSubscribeClient) Recv() (*CandlesSubscribeResponse, error) {
	m := new(CandlesSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) MarginLevelsSubscribe(ctx context.Context, in *MarginLevelsSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarginLevelsSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingDataService_serviceDesc.Streams[7], "/vega.api.v1.TradingDataService/MarginLevelsSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceMarginLevelsSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_MarginLevelsSubscribeClient interface {
	Recv() (*MarginLevelsSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceMarginLevelsSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceMarginLevelsSubscribeClient) Recv() (*MarginLevelsSubscribeResponse, error) {
	m := new(MarginLevelsSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) MarketDepthSubscribe(ctx context.Context, in *MarketDepthSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketDepthSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingDataService_serviceDesc.Streams[8], "/vega.api.v1.TradingDataService/MarketDepthSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceMarketDepthSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_MarketDepthSubscribeClient interface {
	Recv() (*MarketDepthSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceMarketDepthSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceMarketDepthSubscribeClient) Recv() (*MarketDepthSubscribeResponse, error) {
	m := new(MarketDepthSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) MarketDepthUpdatesSubscribe(ctx context.Context, in *MarketDepthUpdatesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketDepthUpdatesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingDataService_serviceDesc.Streams[9], "/vega.api.v1.TradingDataService/MarketDepthUpdatesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceMarketDepthUpdatesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_MarketDepthUpdatesSubscribeClient interface {
	Recv() (*MarketDepthUpdatesSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceMarketDepthUpdatesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceMarketDepthUpdatesSubscribeClient) Recv() (*MarketDepthUpdatesSubscribeResponse, error) {
	m := new(MarketDepthUpdatesSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) MarketsDataSubscribe(ctx context.Context, in *MarketsDataSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketsDataSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingDataService_serviceDesc.Streams[10], "/vega.api.v1.TradingDataService/MarketsDataSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceMarketsDataSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_MarketsDataSubscribeClient interface {
	Recv() (*MarketsDataSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceMarketsDataSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceMarketsDataSubscribeClient) Recv() (*MarketsDataSubscribeResponse, error) {
	m := new(MarketsDataSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) OrdersSubscribe(ctx context.Context, in *OrdersSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_OrdersSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingDataService_serviceDesc.Streams[11], "/vega.api.v1.TradingDataService/OrdersSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceOrdersSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_OrdersSubscribeClient interface {
	Recv() (*OrdersSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceOrdersSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceOrdersSubscribeClient) Recv() (*OrdersSubscribeResponse, error) {
	m := new(OrdersSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) PositionsSubscribe(ctx context.Context, in *PositionsSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_PositionsSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingDataService_serviceDesc.Streams[12], "/vega.api.v1.TradingDataService/PositionsSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServicePositionsSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_PositionsSubscribeClient interface {
	Recv() (*PositionsSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServicePositionsSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServicePositionsSubscribeClient) Recv() (*PositionsSubscribeResponse, error) {
	m := new(PositionsSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) TradesSubscribe(ctx context.Context, in *TradesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_TradesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingDataService_serviceDesc.Streams[13], "/vega.api.v1.TradingDataService/TradesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceTradesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_TradesSubscribeClient interface {
	Recv() (*TradesSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceTradesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceTradesSubscribeClient) Recv() (*TradesSubscribeResponse, error) {
	m := new(TradesSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) TransferResponsesSubscribe(ctx context.Context, in *TransferResponsesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_TransferResponsesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingDataService_serviceDesc.Streams[14], "/vega.api.v1.TradingDataService/TransferResponsesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceTransferResponsesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_TransferResponsesSubscribeClient interface {
	Recv() (*TransferResponsesSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceTransferResponsesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceTransferResponsesSubscribeClient) Recv() (*TransferResponsesSubscribeResponse, error) {
	m := new(TransferResponsesSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) GetNodeSignaturesAggregate(ctx context.Context, in *GetNodeSignaturesAggregateRequest, opts ...grpc.CallOption) (*GetNodeSignaturesAggregateResponse, error) {
	out := new(GetNodeSignaturesAggregateResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/GetNodeSignaturesAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) AssetByID(ctx context.Context, in *AssetByIDRequest, opts ...grpc.CallOption) (*AssetByIDResponse, error) {
	out := new(AssetByIDResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/AssetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Assets(ctx context.Context, in *AssetsRequest, opts ...grpc.CallOption) (*AssetsResponse, error) {
	out := new(AssetsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/Assets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) EstimateFee(ctx context.Context, in *EstimateFeeRequest, opts ...grpc.CallOption) (*EstimateFeeResponse, error) {
	out := new(EstimateFeeResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/EstimateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) EstimateMargin(ctx context.Context, in *EstimateMarginRequest, opts ...grpc.CallOption) (*EstimateMarginResponse, error) {
	out := new(EstimateMarginResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/EstimateMargin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ERC20WithdrawalApproval(ctx context.Context, in *ERC20WithdrawalApprovalRequest, opts ...grpc.CallOption) (*ERC20WithdrawalApprovalResponse, error) {
	out := new(ERC20WithdrawalApprovalResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/ERC20WithdrawalApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Withdrawal(ctx context.Context, in *WithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	out := new(WithdrawalResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/Withdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Withdrawals(ctx context.Context, in *WithdrawalsRequest, opts ...grpc.CallOption) (*WithdrawalsResponse, error) {
	out := new(WithdrawalsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/Withdrawals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Deposits(ctx context.Context, in *DepositsRequest, opts ...grpc.CallOption) (*DepositsResponse, error) {
	out := new(DepositsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/Deposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) NetworkParameters(ctx context.Context, in *NetworkParametersRequest, opts ...grpc.CallOption) (*NetworkParametersResponse, error) {
	out := new(NetworkParametersResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/NetworkParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) LiquidityProvisions(ctx context.Context, in *LiquidityProvisionsRequest, opts ...grpc.CallOption) (*LiquidityProvisionsResponse, error) {
	out := new(LiquidityProvisionsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/LiquidityProvisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OracleSpec(ctx context.Context, in *OracleSpecRequest, opts ...grpc.CallOption) (*OracleSpecResponse, error) {
	out := new(OracleSpecResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/OracleSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OracleSpecs(ctx context.Context, in *OracleSpecsRequest, opts ...grpc.CallOption) (*OracleSpecsResponse, error) {
	out := new(OracleSpecsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/OracleSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OracleDataBySpec(ctx context.Context, in *OracleDataBySpecRequest, opts ...grpc.CallOption) (*OracleDataBySpecResponse, error) {
	out := new(OracleDataBySpecResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.TradingDataService/OracleDataBySpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingDataServiceServer is the server API for TradingDataService service.
type TradingDataServiceServer interface {
	// Get a list of Accounts by Market
	MarketAccounts(context.Context, *MarketAccountsRequest) (*MarketAccountsResponse, error)
	// Get a list of Accounts by Party
	PartyAccounts(context.Context, *PartyAccountsRequest) (*PartyAccountsResponse, error)
	// Get a list of accounts holding infrastructure fees.
	// Can be filtered by asset, there will be 1 infrastructure fee account per
	// asset in the network.
	FeeInfrastructureAccounts(context.Context, *FeeInfrastructureAccountsRequest) (*FeeInfrastructureAccountsResponse, error)
	// Get a list of Candles by Market
	Candles(context.Context, *CandlesRequest) (*CandlesResponse, error)
	// Get Market Data by Market ID
	MarketDataByID(context.Context, *MarketDataByIDRequest) (*MarketDataByIDResponse, error)
	// Get a list of Market Data
	MarketsData(context.Context, *MarketsDataRequest) (*MarketsDataResponse, error)
	// Get a Market by ID
	MarketByID(context.Context, *MarketByIDRequest) (*MarketByIDResponse, error)
	// Get Market Depth
	MarketDepth(context.Context, *MarketDepthRequest) (*MarketDepthResponse, error)
	// Get a list of Markets
	Markets(context.Context, *MarketsRequest) (*MarketsResponse, error)
	// Get an Order by Market and Order ID
	OrderByMarketAndID(context.Context, *OrderByMarketAndIDRequest) (*OrderByMarketAndIDResponse, error)
	// Get an Order by Pending Order reference (UUID)
	OrderByReference(context.Context, *OrderByReferenceRequest) (*OrderByReferenceResponse, error)
	// Get a list of Orders by Market
	OrdersByMarket(context.Context, *OrdersByMarketRequest) (*OrdersByMarketResponse, error)
	// Get a list of Orders by Party
	OrdersByParty(context.Context, *OrdersByPartyRequest) (*OrdersByPartyResponse, error)
	// Get a specific order by order ID
	OrderByID(context.Context, *OrderByIDRequest) (*OrderByIDResponse, error)
	// Get all versions of the order by its orderID
	OrderVersionsByID(context.Context, *OrderVersionsByIDRequest) (*OrderVersionsByIDResponse, error)
	// Get Margin Levels by Party ID
	MarginLevels(context.Context, *MarginLevelsRequest) (*MarginLevelsResponse, error)
	// Get a list of Parties
	Parties(context.Context, *PartiesRequest) (*PartiesResponse, error)
	// Get a Party by ID
	PartyByID(context.Context, *PartyByIDRequest) (*PartyByIDResponse, error)
	// Get a list of Positions by Party
	PositionsByParty(context.Context, *PositionsByPartyRequest) (*PositionsByPartyResponse, error)
	// Get latest Trade
	LastTrade(context.Context, *LastTradeRequest) (*LastTradeResponse, error)
	// Get a list of Trades by Market
	TradesByMarket(context.Context, *TradesByMarketRequest) (*TradesByMarketResponse, error)
	// Get a list of Trades by Order
	TradesByOrder(context.Context, *TradesByOrderRequest) (*TradesByOrderResponse, error)
	// Get a list of Trades by Party
	TradesByParty(context.Context, *TradesByPartyRequest) (*TradesByPartyResponse, error)
	// Get governance data (proposals and votes) for all proposals
	GetProposals(context.Context, *GetProposalsRequest) (*GetProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals by party authoring them
	GetProposalsByParty(context.Context, *GetProposalsByPartyRequest) (*GetProposalsByPartyResponse, error)
	// Get votes by party casting them
	GetVotesByParty(context.Context, *GetVotesByPartyRequest) (*GetVotesByPartyResponse, error)
	// Get governance data (proposals and votes) for proposals that aim creating new markets
	GetNewMarketProposals(context.Context, *GetNewMarketProposalsRequest) (*GetNewMarketProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals that aim updating markets
	GetUpdateMarketProposals(context.Context, *GetUpdateMarketProposalsRequest) (*GetUpdateMarketProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals that aim updating Vega network parameters
	GetNetworkParametersProposals(context.Context, *GetNetworkParametersProposalsRequest) (*GetNetworkParametersProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals aiming to create new assets
	GetNewAssetProposals(context.Context, *GetNewAssetProposalsRequest) (*GetNewAssetProposalsResponse, error)
	// Get governance data (proposals and votes) for a proposal located by ID
	GetProposalByID(context.Context, *GetProposalByIDRequest) (*GetProposalByIDResponse, error)
	// Get governance data (proposals and votes) for a proposal located by reference
	GetProposalByReference(context.Context, *GetProposalByReferenceRequest) (*GetProposalByReferenceResponse, error)
	// Subscribe to a stream of all governance updates
	ObserveGovernance(*ObserveGovernanceRequest, TradingDataService_ObserveGovernanceServer) error
	// Subscribe to a stream of proposal updates
	ObservePartyProposals(*ObservePartyProposalsRequest, TradingDataService_ObservePartyProposalsServer) error
	// Subscribe to a stream of votes cast by a specific party
	ObservePartyVotes(*ObservePartyVotesRequest, TradingDataService_ObservePartyVotesServer) error
	// Subscribe to a stream of proposal votes
	ObserveProposalVotes(*ObserveProposalVotesRequest, TradingDataService_ObserveProposalVotesServer) error
	// Subscribe to a stream of events from the core
	ObserveEventBus(TradingDataService_ObserveEventBusServer) error
	LastBlockHeight(context.Context, *LastBlockHeightRequest) (*LastBlockHeightResponse, error)
	// Get Time
	GetVegaTime(context.Context, *GetVegaTimeRequest) (*GetVegaTimeResponse, error)
	// Subscribe to a stream of Accounts
	AccountsSubscribe(*AccountsSubscribeRequest, TradingDataService_AccountsSubscribeServer) error
	// Subscribe to a stream of Candles
	CandlesSubscribe(*CandlesSubscribeRequest, TradingDataService_CandlesSubscribeServer) error
	// Subscribe to a stream of Margin Levels
	MarginLevelsSubscribe(*MarginLevelsSubscribeRequest, TradingDataService_MarginLevelsSubscribeServer) error
	// Subscribe to a stream of Market Depth
	MarketDepthSubscribe(*MarketDepthSubscribeRequest, TradingDataService_MarketDepthSubscribeServer) error
	// Subscribe to a stream of Market Depth Price Level Updates
	MarketDepthUpdatesSubscribe(*MarketDepthUpdatesSubscribeRequest, TradingDataService_MarketDepthUpdatesSubscribeServer) error
	// Subscribe to a stream of Markets Data
	MarketsDataSubscribe(*MarketsDataSubscribeRequest, TradingDataService_MarketsDataSubscribeServer) error
	// Subscribe to a stream of Orders
	OrdersSubscribe(*OrdersSubscribeRequest, TradingDataService_OrdersSubscribeServer) error
	// Subscribe to a stream of Positions
	PositionsSubscribe(*PositionsSubscribeRequest, TradingDataService_PositionsSubscribeServer) error
	// Subscribe to a stream of Trades
	TradesSubscribe(*TradesSubscribeRequest, TradingDataService_TradesSubscribeServer) error
	// Subscribe to a stream of Transfer Responses
	TransferResponsesSubscribe(*TransferResponsesSubscribeRequest, TradingDataService_TransferResponsesSubscribeServer) error
	// Get an aggregate of signatures from all the nodes of the network
	GetNodeSignaturesAggregate(context.Context, *GetNodeSignaturesAggregateRequest) (*GetNodeSignaturesAggregateResponse, error)
	// Get an asset by its identifier
	AssetByID(context.Context, *AssetByIDRequest) (*AssetByIDResponse, error)
	// Get a list of all assets on Vega
	Assets(context.Context, *AssetsRequest) (*AssetsResponse, error)
	// Get an estimate for the fee to be paid for a given order
	EstimateFee(context.Context, *EstimateFeeRequest) (*EstimateFeeResponse, error)
	// Get an estimate for the margin required for a new order
	EstimateMargin(context.Context, *EstimateMarginRequest) (*EstimateMarginResponse, error)
	// Get the bundle approval for an ERC20 withdrawal,
	// these data are being used to bundle the call to the smart contract on the ethereum bridge
	ERC20WithdrawalApproval(context.Context, *ERC20WithdrawalApprovalRequest) (*ERC20WithdrawalApprovalResponse, error)
	// Get a withdrawal by its identifier
	Withdrawal(context.Context, *WithdrawalRequest) (*WithdrawalResponse, error)
	// Get withdrawals for a party
	Withdrawals(context.Context, *WithdrawalsRequest) (*WithdrawalsResponse, error)
	// Get a deposit by its identifier
	Deposit(context.Context, *DepositRequest) (*DepositResponse, error)
	// Get deposits for a party
	Deposits(context.Context, *DepositsRequest) (*DepositsResponse, error)
	// Get the network parameters
	NetworkParameters(context.Context, *NetworkParametersRequest) (*NetworkParametersResponse, error)
	// Get the liquidity provision orders
	LiquidityProvisions(context.Context, *LiquidityProvisionsRequest) (*LiquidityProvisionsResponse, error)
	// Get an oracle spec by ID
	OracleSpec(context.Context, *OracleSpecRequest) (*OracleSpecResponse, error)
	// Get the oracle specs
	OracleSpecs(context.Context, *OracleSpecsRequest) (*OracleSpecsResponse, error)
	// Get all oracle data
	OracleDataBySpec(context.Context, *OracleDataBySpecRequest) (*OracleDataBySpecResponse, error)
}

// UnimplementedTradingDataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTradingDataServiceServer struct {
}

func (*UnimplementedTradingDataServiceServer) MarketAccounts(ctx context.Context, req *MarketAccountsRequest) (*MarketAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketAccounts not implemented")
}
func (*UnimplementedTradingDataServiceServer) PartyAccounts(ctx context.Context, req *PartyAccountsRequest) (*PartyAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartyAccounts not implemented")
}
func (*UnimplementedTradingDataServiceServer) FeeInfrastructureAccounts(ctx context.Context, req *FeeInfrastructureAccountsRequest) (*FeeInfrastructureAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeInfrastructureAccounts not implemented")
}
func (*UnimplementedTradingDataServiceServer) Candles(ctx context.Context, req *CandlesRequest) (*CandlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Candles not implemented")
}
func (*UnimplementedTradingDataServiceServer) MarketDataByID(ctx context.Context, req *MarketDataByIDRequest) (*MarketDataByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketDataByID not implemented")
}
func (*UnimplementedTradingDataServiceServer) MarketsData(ctx context.Context, req *MarketsDataRequest) (*MarketsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketsData not implemented")
}
func (*UnimplementedTradingDataServiceServer) MarketByID(ctx context.Context, req *MarketByIDRequest) (*MarketByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketByID not implemented")
}
func (*UnimplementedTradingDataServiceServer) MarketDepth(ctx context.Context, req *MarketDepthRequest) (*MarketDepthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketDepth not implemented")
}
func (*UnimplementedTradingDataServiceServer) Markets(ctx context.Context, req *MarketsRequest) (*MarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Markets not implemented")
}
func (*UnimplementedTradingDataServiceServer) OrderByMarketAndID(ctx context.Context, req *OrderByMarketAndIDRequest) (*OrderByMarketAndIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderByMarketAndID not implemented")
}
func (*UnimplementedTradingDataServiceServer) OrderByReference(ctx context.Context, req *OrderByReferenceRequest) (*OrderByReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderByReference not implemented")
}
func (*UnimplementedTradingDataServiceServer) OrdersByMarket(ctx context.Context, req *OrdersByMarketRequest) (*OrdersByMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersByMarket not implemented")
}
func (*UnimplementedTradingDataServiceServer) OrdersByParty(ctx context.Context, req *OrdersByPartyRequest) (*OrdersByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersByParty not implemented")
}
func (*UnimplementedTradingDataServiceServer) OrderByID(ctx context.Context, req *OrderByIDRequest) (*OrderByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderByID not implemented")
}
func (*UnimplementedTradingDataServiceServer) OrderVersionsByID(ctx context.Context, req *OrderVersionsByIDRequest) (*OrderVersionsByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderVersionsByID not implemented")
}
func (*UnimplementedTradingDataServiceServer) MarginLevels(ctx context.Context, req *MarginLevelsRequest) (*MarginLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarginLevels not implemented")
}
func (*UnimplementedTradingDataServiceServer) Parties(ctx context.Context, req *PartiesRequest) (*PartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parties not implemented")
}
func (*UnimplementedTradingDataServiceServer) PartyByID(ctx context.Context, req *PartyByIDRequest) (*PartyByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartyByID not implemented")
}
func (*UnimplementedTradingDataServiceServer) PositionsByParty(ctx context.Context, req *PositionsByPartyRequest) (*PositionsByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionsByParty not implemented")
}
func (*UnimplementedTradingDataServiceServer) LastTrade(ctx context.Context, req *LastTradeRequest) (*LastTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastTrade not implemented")
}
func (*UnimplementedTradingDataServiceServer) TradesByMarket(ctx context.Context, req *TradesByMarketRequest) (*TradesByMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradesByMarket not implemented")
}
func (*UnimplementedTradingDataServiceServer) TradesByOrder(ctx context.Context, req *TradesByOrderRequest) (*TradesByOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradesByOrder not implemented")
}
func (*UnimplementedTradingDataServiceServer) TradesByParty(ctx context.Context, req *TradesByPartyRequest) (*TradesByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradesByParty not implemented")
}
func (*UnimplementedTradingDataServiceServer) GetProposals(ctx context.Context, req *GetProposalsRequest) (*GetProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposals not implemented")
}
func (*UnimplementedTradingDataServiceServer) GetProposalsByParty(ctx context.Context, req *GetProposalsByPartyRequest) (*GetProposalsByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposalsByParty not implemented")
}
func (*UnimplementedTradingDataServiceServer) GetVotesByParty(ctx context.Context, req *GetVotesByPartyRequest) (*GetVotesByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVotesByParty not implemented")
}
func (*UnimplementedTradingDataServiceServer) GetNewMarketProposals(ctx context.Context, req *GetNewMarketProposalsRequest) (*GetNewMarketProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewMarketProposals not implemented")
}
func (*UnimplementedTradingDataServiceServer) GetUpdateMarketProposals(ctx context.Context, req *GetUpdateMarketProposalsRequest) (*GetUpdateMarketProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdateMarketProposals not implemented")
}
func (*UnimplementedTradingDataServiceServer) GetNetworkParametersProposals(ctx context.Context, req *GetNetworkParametersProposalsRequest) (*GetNetworkParametersProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkParametersProposals not implemented")
}
func (*UnimplementedTradingDataServiceServer) GetNewAssetProposals(ctx context.Context, req *GetNewAssetProposalsRequest) (*GetNewAssetProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewAssetProposals not implemented")
}
func (*UnimplementedTradingDataServiceServer) GetProposalByID(ctx context.Context, req *GetProposalByIDRequest) (*GetProposalByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposalByID not implemented")
}
func (*UnimplementedTradingDataServiceServer) GetProposalByReference(ctx context.Context, req *GetProposalByReferenceRequest) (*GetProposalByReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposalByReference not implemented")
}
func (*UnimplementedTradingDataServiceServer) ObserveGovernance(req *ObserveGovernanceRequest, srv TradingDataService_ObserveGovernanceServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveGovernance not implemented")
}
func (*UnimplementedTradingDataServiceServer) ObservePartyProposals(req *ObservePartyProposalsRequest, srv TradingDataService_ObservePartyProposalsServer) error {
	return status.Errorf(codes.Unimplemented, "method ObservePartyProposals not implemented")
}
func (*UnimplementedTradingDataServiceServer) ObservePartyVotes(req *ObservePartyVotesRequest, srv TradingDataService_ObservePartyVotesServer) error {
	return status.Errorf(codes.Unimplemented, "method ObservePartyVotes not implemented")
}
func (*UnimplementedTradingDataServiceServer) ObserveProposalVotes(req *ObserveProposalVotesRequest, srv TradingDataService_ObserveProposalVotesServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveProposalVotes not implemented")
}
func (*UnimplementedTradingDataServiceServer) ObserveEventBus(srv TradingDataService_ObserveEventBusServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveEventBus not implemented")
}
func (*UnimplementedTradingDataServiceServer) LastBlockHeight(ctx context.Context, req *LastBlockHeightRequest) (*LastBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastBlockHeight not implemented")
}
func (*UnimplementedTradingDataServiceServer) GetVegaTime(ctx context.Context, req *GetVegaTimeRequest) (*GetVegaTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVegaTime not implemented")
}
func (*UnimplementedTradingDataServiceServer) AccountsSubscribe(req *AccountsSubscribeRequest, srv TradingDataService_AccountsSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountsSubscribe not implemented")
}
func (*UnimplementedTradingDataServiceServer) CandlesSubscribe(req *CandlesSubscribeRequest, srv TradingDataService_CandlesSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method CandlesSubscribe not implemented")
}
func (*UnimplementedTradingDataServiceServer) MarginLevelsSubscribe(req *MarginLevelsSubscribeRequest, srv TradingDataService_MarginLevelsSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method MarginLevelsSubscribe not implemented")
}
func (*UnimplementedTradingDataServiceServer) MarketDepthSubscribe(req *MarketDepthSubscribeRequest, srv TradingDataService_MarketDepthSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method MarketDepthSubscribe not implemented")
}
func (*UnimplementedTradingDataServiceServer) MarketDepthUpdatesSubscribe(req *MarketDepthUpdatesSubscribeRequest, srv TradingDataService_MarketDepthUpdatesSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method MarketDepthUpdatesSubscribe not implemented")
}
func (*UnimplementedTradingDataServiceServer) MarketsDataSubscribe(req *MarketsDataSubscribeRequest, srv TradingDataService_MarketsDataSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method MarketsDataSubscribe not implemented")
}
func (*UnimplementedTradingDataServiceServer) OrdersSubscribe(req *OrdersSubscribeRequest, srv TradingDataService_OrdersSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method OrdersSubscribe not implemented")
}
func (*UnimplementedTradingDataServiceServer) PositionsSubscribe(req *PositionsSubscribeRequest, srv TradingDataService_PositionsSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method PositionsSubscribe not implemented")
}
func (*UnimplementedTradingDataServiceServer) TradesSubscribe(req *TradesSubscribeRequest, srv TradingDataService_TradesSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method TradesSubscribe not implemented")
}
func (*UnimplementedTradingDataServiceServer) TransferResponsesSubscribe(req *TransferResponsesSubscribeRequest, srv TradingDataService_TransferResponsesSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method TransferResponsesSubscribe not implemented")
}
func (*UnimplementedTradingDataServiceServer) GetNodeSignaturesAggregate(ctx context.Context, req *GetNodeSignaturesAggregateRequest) (*GetNodeSignaturesAggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeSignaturesAggregate not implemented")
}
func (*UnimplementedTradingDataServiceServer) AssetByID(ctx context.Context, req *AssetByIDRequest) (*AssetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetByID not implemented")
}
func (*UnimplementedTradingDataServiceServer) Assets(ctx context.Context, req *AssetsRequest) (*AssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assets not implemented")
}
func (*UnimplementedTradingDataServiceServer) EstimateFee(ctx context.Context, req *EstimateFeeRequest) (*EstimateFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateFee not implemented")
}
func (*UnimplementedTradingDataServiceServer) EstimateMargin(ctx context.Context, req *EstimateMarginRequest) (*EstimateMarginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateMargin not implemented")
}
func (*UnimplementedTradingDataServiceServer) ERC20WithdrawalApproval(ctx context.Context, req *ERC20WithdrawalApprovalRequest) (*ERC20WithdrawalApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC20WithdrawalApproval not implemented")
}
func (*UnimplementedTradingDataServiceServer) Withdrawal(ctx context.Context, req *WithdrawalRequest) (*WithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdrawal not implemented")
}
func (*UnimplementedTradingDataServiceServer) Withdrawals(ctx context.Context, req *WithdrawalsRequest) (*WithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdrawals not implemented")
}
func (*UnimplementedTradingDataServiceServer) Deposit(ctx context.Context, req *DepositRequest) (*DepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (*UnimplementedTradingDataServiceServer) Deposits(ctx context.Context, req *DepositsRequest) (*DepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposits not implemented")
}
func (*UnimplementedTradingDataServiceServer) NetworkParameters(ctx context.Context, req *NetworkParametersRequest) (*NetworkParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkParameters not implemented")
}
func (*UnimplementedTradingDataServiceServer) LiquidityProvisions(ctx context.Context, req *LiquidityProvisionsRequest) (*LiquidityProvisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityProvisions not implemented")
}
func (*UnimplementedTradingDataServiceServer) OracleSpec(ctx context.Context, req *OracleSpecRequest) (*OracleSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleSpec not implemented")
}
func (*UnimplementedTradingDataServiceServer) OracleSpecs(ctx context.Context, req *OracleSpecsRequest) (*OracleSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleSpecs not implemented")
}
func (*UnimplementedTradingDataServiceServer) OracleDataBySpec(ctx context.Context, req *OracleDataBySpecRequest) (*OracleDataBySpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleDataBySpec not implemented")
}

func RegisterTradingDataServiceServer(s *grpc.Server, srv TradingDataServiceServer) {
	s.RegisterService(&_TradingDataService_serviceDesc, srv)
}

func _TradingDataService_MarketAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).MarketAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/MarketAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).MarketAccounts(ctx, req.(*MarketAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_PartyAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).PartyAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/PartyAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).PartyAccounts(ctx, req.(*PartyAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_FeeInfrastructureAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeeInfrastructureAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).FeeInfrastructureAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/FeeInfrastructureAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).FeeInfrastructureAccounts(ctx, req.(*FeeInfrastructureAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Candles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Candles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/Candles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Candles(ctx, req.(*CandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_MarketDataByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketDataByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).MarketDataByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/MarketDataByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).MarketDataByID(ctx, req.(*MarketDataByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_MarketsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).MarketsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/MarketsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).MarketsData(ctx, req.(*MarketsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_MarketByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).MarketByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/MarketByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).MarketByID(ctx, req.(*MarketByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_MarketDepth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketDepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).MarketDepth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/MarketDepth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).MarketDepth(ctx, req.(*MarketDepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Markets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Markets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/Markets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Markets(ctx, req.(*MarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OrderByMarketAndID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderByMarketAndIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OrderByMarketAndID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/OrderByMarketAndID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OrderByMarketAndID(ctx, req.(*OrderByMarketAndIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OrderByReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderByReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OrderByReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/OrderByReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OrderByReference(ctx, req.(*OrderByReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OrdersByMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersByMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OrdersByMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/OrdersByMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OrdersByMarket(ctx, req.(*OrdersByMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OrdersByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OrdersByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/OrdersByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OrdersByParty(ctx, req.(*OrdersByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/OrderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OrderByID(ctx, req.(*OrderByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OrderVersionsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderVersionsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OrderVersionsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/OrderVersionsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OrderVersionsByID(ctx, req.(*OrderVersionsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_MarginLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarginLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).MarginLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/MarginLevels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).MarginLevels(ctx, req.(*MarginLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Parties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Parties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/Parties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Parties(ctx, req.(*PartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_PartyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).PartyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/PartyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).PartyByID(ctx, req.(*PartyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_PositionsByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionsByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).PositionsByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/PositionsByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).PositionsByParty(ctx, req.(*PositionsByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_LastTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).LastTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/LastTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).LastTrade(ctx, req.(*LastTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_TradesByMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesByMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).TradesByMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/TradesByMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).TradesByMarket(ctx, req.(*TradesByMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_TradesByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesByOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).TradesByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/TradesByOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).TradesByOrder(ctx, req.(*TradesByOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_TradesByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).TradesByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/TradesByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).TradesByParty(ctx, req.(*TradesByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/GetProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetProposals(ctx, req.(*GetProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetProposalsByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposalsByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetProposalsByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/GetProposalsByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetProposalsByParty(ctx, req.(*GetProposalsByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetVotesByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVotesByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetVotesByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/GetVotesByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetVotesByParty(ctx, req.(*GetVotesByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNewMarketProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewMarketProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNewMarketProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/GetNewMarketProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNewMarketProposals(ctx, req.(*GetNewMarketProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetUpdateMarketProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdateMarketProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetUpdateMarketProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/GetUpdateMarketProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetUpdateMarketProposals(ctx, req.(*GetUpdateMarketProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNetworkParametersProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkParametersProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNetworkParametersProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/GetNetworkParametersProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNetworkParametersProposals(ctx, req.(*GetNetworkParametersProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNewAssetProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewAssetProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNewAssetProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/GetNewAssetProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNewAssetProposals(ctx, req.(*GetNewAssetProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetProposalByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposalByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetProposalByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/GetProposalByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetProposalByID(ctx, req.(*GetProposalByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetProposalByReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposalByReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetProposalByReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/GetProposalByReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetProposalByReference(ctx, req.(*GetProposalByReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObserveGovernance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveGovernanceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveGovernance(m, &tradingDataServiceObserveGovernanceServer{stream})
}

type TradingDataService_ObserveGovernanceServer interface {
	Send(*ObserveGovernanceResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveGovernanceServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveGovernanceServer) Send(m *ObserveGovernanceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ObservePartyProposals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObservePartyProposalsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObservePartyProposals(m, &tradingDataServiceObservePartyProposalsServer{stream})
}

type TradingDataService_ObservePartyProposalsServer interface {
	Send(*ObservePartyProposalsResponse) error
	grpc.ServerStream
}

type tradingDataServiceObservePartyProposalsServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObservePartyProposalsServer) Send(m *ObservePartyProposalsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ObservePartyVotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObservePartyVotesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObservePartyVotes(m, &tradingDataServiceObservePartyVotesServer{stream})
}

type TradingDataService_ObservePartyVotesServer interface {
	Send(*ObservePartyVotesResponse) error
	grpc.ServerStream
}

type tradingDataServiceObservePartyVotesServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObservePartyVotesServer) Send(m *ObservePartyVotesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ObserveProposalVotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveProposalVotesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveProposalVotes(m, &tradingDataServiceObserveProposalVotesServer{stream})
}

type TradingDataService_ObserveProposalVotesServer interface {
	Send(*ObserveProposalVotesResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveProposalVotesServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveProposalVotesServer) Send(m *ObserveProposalVotesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ObserveEventBus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TradingDataServiceServer).ObserveEventBus(&tradingDataServiceObserveEventBusServer{stream})
}

type TradingDataService_ObserveEventBusServer interface {
	Send(*ObserveEventBusResponse) error
	Recv() (*ObserveEventBusRequest, error)
	grpc.ServerStream
}

type tradingDataServiceObserveEventBusServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveEventBusServer) Send(m *ObserveEventBusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tradingDataServiceObserveEventBusServer) Recv() (*ObserveEventBusRequest, error) {
	m := new(ObserveEventBusRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TradingDataService_LastBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).LastBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/LastBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).LastBlockHeight(ctx, req.(*LastBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetVegaTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVegaTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetVegaTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/GetVegaTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetVegaTime(ctx, req.(*GetVegaTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_AccountsSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountsSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).AccountsSubscribe(m, &tradingDataServiceAccountsSubscribeServer{stream})
}

type TradingDataService_AccountsSubscribeServer interface {
	Send(*AccountsSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceAccountsSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceAccountsSubscribeServer) Send(m *AccountsSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_CandlesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CandlesSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).CandlesSubscribe(m, &tradingDataServiceCandlesSubscribeServer{stream})
}

type TradingDataService_CandlesSubscribeServer interface {
	Send(*CandlesSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceCandlesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceCandlesSubscribeServer) Send(m *CandlesSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_MarginLevelsSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarginLevelsSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).MarginLevelsSubscribe(m, &tradingDataServiceMarginLevelsSubscribeServer{stream})
}

type TradingDataService_MarginLevelsSubscribeServer interface {
	Send(*MarginLevelsSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceMarginLevelsSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceMarginLevelsSubscribeServer) Send(m *MarginLevelsSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_MarketDepthSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketDepthSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).MarketDepthSubscribe(m, &tradingDataServiceMarketDepthSubscribeServer{stream})
}

type TradingDataService_MarketDepthSubscribeServer interface {
	Send(*MarketDepthSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceMarketDepthSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceMarketDepthSubscribeServer) Send(m *MarketDepthSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_MarketDepthUpdatesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketDepthUpdatesSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).MarketDepthUpdatesSubscribe(m, &tradingDataServiceMarketDepthUpdatesSubscribeServer{stream})
}

type TradingDataService_MarketDepthUpdatesSubscribeServer interface {
	Send(*MarketDepthUpdatesSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceMarketDepthUpdatesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceMarketDepthUpdatesSubscribeServer) Send(m *MarketDepthUpdatesSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_MarketsDataSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketsDataSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).MarketsDataSubscribe(m, &tradingDataServiceMarketsDataSubscribeServer{stream})
}

type TradingDataService_MarketsDataSubscribeServer interface {
	Send(*MarketsDataSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceMarketsDataSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceMarketsDataSubscribeServer) Send(m *MarketsDataSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_OrdersSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrdersSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).OrdersSubscribe(m, &tradingDataServiceOrdersSubscribeServer{stream})
}

type TradingDataService_OrdersSubscribeServer interface {
	Send(*OrdersSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceOrdersSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceOrdersSubscribeServer) Send(m *OrdersSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_PositionsSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PositionsSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).PositionsSubscribe(m, &tradingDataServicePositionsSubscribeServer{stream})
}

type TradingDataService_PositionsSubscribeServer interface {
	Send(*PositionsSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServicePositionsSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServicePositionsSubscribeServer) Send(m *PositionsSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_TradesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TradesSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).TradesSubscribe(m, &tradingDataServiceTradesSubscribeServer{stream})
}

type TradingDataService_TradesSubscribeServer interface {
	Send(*TradesSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceTradesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceTradesSubscribeServer) Send(m *TradesSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_TransferResponsesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransferResponsesSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).TransferResponsesSubscribe(m, &tradingDataServiceTransferResponsesSubscribeServer{stream})
}

type TradingDataService_TransferResponsesSubscribeServer interface {
	Send(*TransferResponsesSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceTransferResponsesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceTransferResponsesSubscribeServer) Send(m *TransferResponsesSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_GetNodeSignaturesAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeSignaturesAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNodeSignaturesAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/GetNodeSignaturesAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNodeSignaturesAggregate(ctx, req.(*GetNodeSignaturesAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_AssetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).AssetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/AssetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).AssetByID(ctx, req.(*AssetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Assets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Assets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/Assets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Assets(ctx, req.(*AssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_EstimateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).EstimateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/EstimateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).EstimateFee(ctx, req.(*EstimateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_EstimateMargin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateMarginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).EstimateMargin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/EstimateMargin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).EstimateMargin(ctx, req.(*EstimateMarginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ERC20WithdrawalApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ERC20WithdrawalApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ERC20WithdrawalApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/ERC20WithdrawalApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ERC20WithdrawalApproval(ctx, req.(*ERC20WithdrawalApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Withdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Withdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/Withdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Withdrawal(ctx, req.(*WithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Withdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Withdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/Withdrawals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Withdrawals(ctx, req.(*WithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Deposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Deposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Deposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/Deposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Deposits(ctx, req.(*DepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_NetworkParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).NetworkParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/NetworkParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).NetworkParameters(ctx, req.(*NetworkParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_LiquidityProvisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiquidityProvisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).LiquidityProvisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/LiquidityProvisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).LiquidityProvisions(ctx, req.(*LiquidityProvisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OracleSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OracleSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OracleSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/OracleSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OracleSpec(ctx, req.(*OracleSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OracleSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OracleSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OracleSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/OracleSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OracleSpecs(ctx, req.(*OracleSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OracleDataBySpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OracleDataBySpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OracleDataBySpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.TradingDataService/OracleDataBySpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OracleDataBySpec(ctx, req.(*OracleDataBySpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TradingDataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vega.api.v1.TradingDataService",
	HandlerType: (*TradingDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MarketAccounts",
			Handler:    _TradingDataService_MarketAccounts_Handler,
		},
		{
			MethodName: "PartyAccounts",
			Handler:    _TradingDataService_PartyAccounts_Handler,
		},
		{
			MethodName: "FeeInfrastructureAccounts",
			Handler:    _TradingDataService_FeeInfrastructureAccounts_Handler,
		},
		{
			MethodName: "Candles",
			Handler:    _TradingDataService_Candles_Handler,
		},
		{
			MethodName: "MarketDataByID",
			Handler:    _TradingDataService_MarketDataByID_Handler,
		},
		{
			MethodName: "MarketsData",
			Handler:    _TradingDataService_MarketsData_Handler,
		},
		{
			MethodName: "MarketByID",
			Handler:    _TradingDataService_MarketByID_Handler,
		},
		{
			MethodName: "MarketDepth",
			Handler:    _TradingDataService_MarketDepth_Handler,
		},
		{
			MethodName: "Markets",
			Handler:    _TradingDataService_Markets_Handler,
		},
		{
			MethodName: "OrderByMarketAndID",
			Handler:    _TradingDataService_OrderByMarketAndID_Handler,
		},
		{
			MethodName: "OrderByReference",
			Handler:    _TradingDataService_OrderByReference_Handler,
		},
		{
			MethodName: "OrdersByMarket",
			Handler:    _TradingDataService_OrdersByMarket_Handler,
		},
		{
			MethodName: "OrdersByParty",
			Handler:    _TradingDataService_OrdersByParty_Handler,
		},
		{
			MethodName: "OrderByID",
			Handler:    _TradingDataService_OrderByID_Handler,
		},
		{
			MethodName: "OrderVersionsByID",
			Handler:    _TradingDataService_OrderVersionsByID_Handler,
		},
		{
			MethodName: "MarginLevels",
			Handler:    _TradingDataService_MarginLevels_Handler,
		},
		{
			MethodName: "Parties",
			Handler:    _TradingDataService_Parties_Handler,
		},
		{
			MethodName: "PartyByID",
			Handler:    _TradingDataService_PartyByID_Handler,
		},
		{
			MethodName: "PositionsByParty",
			Handler:    _TradingDataService_PositionsByParty_Handler,
		},
		{
			MethodName: "LastTrade",
			Handler:    _TradingDataService_LastTrade_Handler,
		},
		{
			MethodName: "TradesByMarket",
			Handler:    _TradingDataService_TradesByMarket_Handler,
		},
		{
			MethodName: "TradesByOrder",
			Handler:    _TradingDataService_TradesByOrder_Handler,
		},
		{
			MethodName: "TradesByParty",
			Handler:    _TradingDataService_TradesByParty_Handler,
		},
		{
			MethodName: "GetProposals",
			Handler:    _TradingDataService_GetProposals_Handler,
		},
		{
			MethodName: "GetProposalsByParty",
			Handler:    _TradingDataService_GetProposalsByParty_Handler,
		},
		{
			MethodName: "GetVotesByParty",
			Handler:    _TradingDataService_GetVotesByParty_Handler,
		},
		{
			MethodName: "GetNewMarketProposals",
			Handler:    _TradingDataService_GetNewMarketProposals_Handler,
		},
		{
			MethodName: "GetUpdateMarketProposals",
			Handler:    _TradingDataService_GetUpdateMarketProposals_Handler,
		},
		{
			MethodName: "GetNetworkParametersProposals",
			Handler:    _TradingDataService_GetNetworkParametersProposals_Handler,
		},
		{
			MethodName: "GetNewAssetProposals",
			Handler:    _TradingDataService_GetNewAssetProposals_Handler,
		},
		{
			MethodName: "GetProposalByID",
			Handler:    _TradingDataService_GetProposalByID_Handler,
		},
		{
			MethodName: "GetProposalByReference",
			Handler:    _TradingDataService_GetProposalByReference_Handler,
		},
		{
			MethodName: "LastBlockHeight",
			Handler:    _TradingDataService_LastBlockHeight_Handler,
		},
		{
			MethodName: "GetVegaTime",
			Handler:    _TradingDataService_GetVegaTime_Handler,
		},
		{
			MethodName: "GetNodeSignaturesAggregate",
			Handler:    _TradingDataService_GetNodeSignaturesAggregate_Handler,
		},
		{
			MethodName: "AssetByID",
			Handler:    _TradingDataService_AssetByID_Handler,
		},
		{
			MethodName: "Assets",
			Handler:    _TradingDataService_Assets_Handler,
		},
		{
			MethodName: "EstimateFee",
			Handler:    _TradingDataService_EstimateFee_Handler,
		},
		{
			MethodName: "EstimateMargin",
			Handler:    _TradingDataService_EstimateMargin_Handler,
		},
		{
			MethodName: "ERC20WithdrawalApproval",
			Handler:    _TradingDataService_ERC20WithdrawalApproval_Handler,
		},
		{
			MethodName: "Withdrawal",
			Handler:    _TradingDataService_Withdrawal_Handler,
		},
		{
			MethodName: "Withdrawals",
			Handler:    _TradingDataService_Withdrawals_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _TradingDataService_Deposit_Handler,
		},
		{
			MethodName: "Deposits",
			Handler:    _TradingDataService_Deposits_Handler,
		},
		{
			MethodName: "NetworkParameters",
			Handler:    _TradingDataService_NetworkParameters_Handler,
		},
		{
			MethodName: "LiquidityProvisions",
			Handler:    _TradingDataService_LiquidityProvisions_Handler,
		},
		{
			MethodName: "OracleSpec",
			Handler:    _TradingDataService_OracleSpec_Handler,
		},
		{
			MethodName: "OracleSpecs",
			Handler:    _TradingDataService_OracleSpecs_Handler,
		},
		{
			MethodName: "OracleDataBySpec",
			Handler:    _TradingDataService_OracleDataBySpec_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObserveGovernance",
			Handler:       _TradingDataService_ObserveGovernance_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObservePartyProposals",
			Handler:       _TradingDataService_ObservePartyProposals_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObservePartyVotes",
			Handler:       _TradingDataService_ObservePartyVotes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveProposalVotes",
			Handler:       _TradingDataService_ObserveProposalVotes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveEventBus",
			Handler:       _TradingDataService_ObserveEventBus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AccountsSubscribe",
			Handler:       _TradingDataService_AccountsSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CandlesSubscribe",
			Handler:       _TradingDataService_CandlesSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MarginLevelsSubscribe",
			Handler:       _TradingDataService_MarginLevelsSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MarketDepthSubscribe",
			Handler:       _TradingDataService_MarketDepthSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MarketDepthUpdatesSubscribe",
			Handler:       _TradingDataService_MarketDepthUpdatesSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MarketsDataSubscribe",
			Handler:       _TradingDataService_MarketsDataSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OrdersSubscribe",
			Handler:       _TradingDataService_OrdersSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PositionsSubscribe",
			Handler:       _TradingDataService_PositionsSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TradesSubscribe",
			Handler:       _TradingDataService_TradesSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TransferResponsesSubscribe",
			Handler:       _TradingDataService_TransferResponsesSubscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vega/api/trading.proto",
}

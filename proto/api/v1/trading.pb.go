// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/v1/trading.proto

package v1

import (
	v1 "code.vegaprotocol.io/data-node/proto/commands/v1"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Blockchain transaction type
type SubmitTransactionRequest_Type int32

const (
	SubmitTransactionRequest_TYPE_UNSPECIFIED SubmitTransactionRequest_Type = 0
	// The transaction will be submitted without waiting for response
	SubmitTransactionRequest_TYPE_ASYNC SubmitTransactionRequest_Type = 1
	// The transaction will be submitted, and blocking until the
	// tendermint mempool return a response
	SubmitTransactionRequest_TYPE_SYNC SubmitTransactionRequest_Type = 2
	// The transaction will submitted, and blocking until the tendermint
	// network will have committed it into a block
	SubmitTransactionRequest_TYPE_COMMIT SubmitTransactionRequest_Type = 3
)

var SubmitTransactionRequest_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "TYPE_ASYNC",
	2: "TYPE_SYNC",
	3: "TYPE_COMMIT",
}

var SubmitTransactionRequest_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"TYPE_ASYNC":       1,
	"TYPE_SYNC":        2,
	"TYPE_COMMIT":      3,
}

func (x SubmitTransactionRequest_Type) String() string {
	return proto.EnumName(SubmitTransactionRequest_Type_name, int32(x))
}

func (SubmitTransactionRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ea796b90b6f6f9ec, []int{0, 0}
}

// Request for submitting a transaction V2 on Vega
type SubmitTransactionRequest struct {
	// A bundle of signed payload and signature, to form a transaction that will be submitted to the Vega blockchain
	Tx *v1.Transaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// Type of transaction request, for example ASYNC, meaning the transaction will be submitted and not block on a response
	Type                 SubmitTransactionRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=api.v1.SubmitTransactionRequest_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *SubmitTransactionRequest) Reset()         { *m = SubmitTransactionRequest{} }
func (m *SubmitTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitTransactionRequest) ProtoMessage()    {}
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea796b90b6f6f9ec, []int{0}
}

func (m *SubmitTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTransactionRequest.Unmarshal(m, b)
}
func (m *SubmitTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTransactionRequest.Marshal(b, m, deterministic)
}
func (m *SubmitTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTransactionRequest.Merge(m, src)
}
func (m *SubmitTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitTransactionRequest.Size(m)
}
func (m *SubmitTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTransactionRequest proto.InternalMessageInfo

func (m *SubmitTransactionRequest) GetTx() *v1.Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *SubmitTransactionRequest) GetType() SubmitTransactionRequest_Type {
	if m != nil {
		return m.Type
	}
	return SubmitTransactionRequest_TYPE_UNSPECIFIED
}

// Response for submitting a transaction V2 on Vega
type SubmitTransactionResponse struct {
	// Success will be true if the transaction was accepted by the node,
	// **Important** - success does not mean that the event is confirmed by consensus
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitTransactionResponse) Reset()         { *m = SubmitTransactionResponse{} }
func (m *SubmitTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitTransactionResponse) ProtoMessage()    {}
func (*SubmitTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea796b90b6f6f9ec, []int{1}
}

func (m *SubmitTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTransactionResponse.Unmarshal(m, b)
}
func (m *SubmitTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTransactionResponse.Marshal(b, m, deterministic)
}
func (m *SubmitTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTransactionResponse.Merge(m, src)
}
func (m *SubmitTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_SubmitTransactionResponse.Size(m)
}
func (m *SubmitTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTransactionResponse proto.InternalMessageInfo

func (m *SubmitTransactionResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Request for preparing a withdrawal
type PrepareWithdrawRequest struct {
	// An asset withdrawal
	Withdraw             *v1.WithdrawSubmission `protobuf:"bytes,1,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PrepareWithdrawRequest) Reset()         { *m = PrepareWithdrawRequest{} }
func (m *PrepareWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*PrepareWithdrawRequest) ProtoMessage()    {}
func (*PrepareWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea796b90b6f6f9ec, []int{2}
}

func (m *PrepareWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareWithdrawRequest.Unmarshal(m, b)
}
func (m *PrepareWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareWithdrawRequest.Marshal(b, m, deterministic)
}
func (m *PrepareWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareWithdrawRequest.Merge(m, src)
}
func (m *PrepareWithdrawRequest) XXX_Size() int {
	return xxx_messageInfo_PrepareWithdrawRequest.Size(m)
}
func (m *PrepareWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareWithdrawRequest proto.InternalMessageInfo

func (m *PrepareWithdrawRequest) GetWithdraw() *v1.WithdrawSubmission {
	if m != nil {
		return m.Withdraw
	}
	return nil
}

func init() {
	proto.RegisterEnum("api.v1.SubmitTransactionRequest_Type", SubmitTransactionRequest_Type_name, SubmitTransactionRequest_Type_value)
	proto.RegisterType((*SubmitTransactionRequest)(nil), "api.v1.SubmitTransactionRequest")
	proto.RegisterType((*SubmitTransactionResponse)(nil), "api.v1.SubmitTransactionResponse")
	proto.RegisterType((*PrepareWithdrawRequest)(nil), "api.v1.PrepareWithdrawRequest")
}

func init() {
	proto.RegisterFile("api/v1/trading.proto", fileDescriptor_ea796b90b6f6f9ec)
}

var fileDescriptor_ea796b90b6f6f9ec = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xdf, 0x8b, 0xda, 0x40,
	0x10, 0x6e, 0x52, 0xb1, 0x76, 0xa4, 0x36, 0xdd, 0x4a, 0x49, 0x03, 0x82, 0x0d, 0x2d, 0x08, 0xc5,
	0x0d, 0x5a, 0xfa, 0xd0, 0xb7, 0xb6, 0x9e, 0x07, 0xc2, 0xe9, 0x05, 0x93, 0xe3, 0x4e, 0x5f, 0x8e,
	0x35, 0x59, 0xbc, 0x85, 0x33, 0x9b, 0xdb, 0x5d, 0xa3, 0xfe, 0x9b, 0xf7, 0x17, 0x1d, 0x6e, 0x8c,
	0x27, 0x78, 0x3f, 0xde, 0xf6, 0x9b, 0x99, 0x6f, 0xe6, 0x9b, 0x6f, 0x16, 0xea, 0x24, 0x65, 0x5e,
	0xd6, 0xf1, 0x94, 0x20, 0x31, 0x4b, 0xe6, 0x38, 0x15, 0x5c, 0x71, 0x54, 0x26, 0x29, 0xc3, 0x59,
	0xc7, 0x71, 0x22, 0xbe, 0x58, 0x90, 0x24, 0x96, 0xdb, 0x92, 0xe2, 0x9d, 0xd7, 0x38, 0x8d, 0xc3,
	0x9c, 0x12, 0x24, 0x91, 0x24, 0x52, 0x8c, 0x27, 0x79, 0xda, 0xbd, 0x37, 0xc0, 0x0e, 0x96, 0xb3,
	0x05, 0x53, 0xe1, 0x63, 0x6e, 0x4c, 0xef, 0x96, 0x54, 0x2a, 0xd4, 0x06, 0x53, 0xad, 0x6d, 0xa3,
	0x69, 0xb4, 0xaa, 0xdd, 0x06, 0xce, 0xe8, 0x9c, 0xe0, 0x7d, 0xf7, 0xac, 0x83, 0x0f, 0x19, 0xa6,
	0x5a, 0xa3, 0x3f, 0x50, 0x52, 0x9b, 0x94, 0xda, 0x66, 0xd3, 0x68, 0xd5, 0xba, 0x3f, 0x70, 0xae,
	0x0e, 0x3f, 0xd7, 0x1e, 0x87, 0x9b, 0x94, 0x8e, 0x35, 0xc5, 0x3d, 0x83, 0xd2, 0x16, 0xa1, 0x3a,
	0x58, 0xe1, 0xc4, 0xef, 0x5f, 0x5f, 0x8c, 0x02, 0xbf, 0xdf, 0x1b, 0x9c, 0x0e, 0xfa, 0x27, 0xd6,
	0x1b, 0x54, 0x03, 0xd0, 0xd1, 0x7f, 0xc1, 0x64, 0xd4, 0xb3, 0x0c, 0xf4, 0x01, 0xde, 0x6b, 0xac,
	0xa1, 0x89, 0x3e, 0x42, 0x55, 0xc3, 0xde, 0xf9, 0x70, 0x38, 0x08, 0xad, 0xb7, 0xee, 0x6f, 0xf8,
	0xfa, 0xc4, 0x50, 0x99, 0xf2, 0x44, 0x52, 0x64, 0xc3, 0x3b, 0xb9, 0x8c, 0x22, 0x2a, 0xa5, 0xde,
	0xac, 0x32, 0x2e, 0xa0, 0x3b, 0x85, 0x2f, 0xbe, 0xa0, 0x29, 0x11, 0xf4, 0x92, 0xa9, 0x9b, 0x58,
	0x90, 0x55, 0x61, 0xc4, 0x5f, 0xa8, 0xac, 0x76, 0xa1, 0x9d, 0x1d, 0xdf, 0x8f, 0xed, 0x28, 0x48,
	0x7a, 0xb4, 0x94, 0xdb, 0x99, 0x7b, 0x56, 0x97, 0xc3, 0xe7, 0x30, 0xbf, 0x9d, 0x2f, 0xf8, 0x7a,
	0x13, 0x50, 0x91, 0xb1, 0x88, 0xa2, 0x2b, 0xf8, 0x74, 0xa4, 0x14, 0x35, 0x5f, 0x73, 0xce, 0xf9,
	0xf6, 0x42, 0x45, 0xbe, 0xe6, 0xff, 0xf6, 0xf4, 0x67, 0xc4, 0x63, 0xaa, 0x65, 0xea, 0x53, 0x47,
	0xfc, 0x16, 0x33, 0xee, 0xc5, 0x44, 0x91, 0x76, 0xc2, 0x63, 0xea, 0xe9, 0xa8, 0x97, 0x7f, 0xac,
	0x59, 0x59, 0xa3, 0x5f, 0x0f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x31, 0xf9, 0x0c, 0xd1, 0x69, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TradingProxyServiceClient is the client API for TradingProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TradingProxyServiceClient interface {
	// Submit a signed transaction
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error)
}

type tradingProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingProxyServiceClient(cc grpc.ClientConnInterface) TradingProxyServiceClient {
	return &tradingProxyServiceClient{cc}
}

func (c *tradingProxyServiceClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error) {
	out := new(SubmitTransactionResponse)
	err := c.cc.Invoke(ctx, "/api.v1.TradingProxyService/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingProxyServiceServer is the server API for TradingProxyService service.
type TradingProxyServiceServer interface {
	// Submit a signed transaction
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error)
}

// UnimplementedTradingProxyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTradingProxyServiceServer struct {
}

func (*UnimplementedTradingProxyServiceServer) SubmitTransaction(ctx context.Context, req *SubmitTransactionRequest) (*SubmitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}

func RegisterTradingProxyServiceServer(s *grpc.Server, srv TradingProxyServiceServer) {
	s.RegisterService(&_TradingProxyService_serviceDesc, srv)
}

func _TradingProxyService_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingProxyServiceServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TradingProxyService/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingProxyServiceServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TradingProxyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.TradingProxyService",
	HandlerType: (*TradingProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTransaction",
			Handler:    _TradingProxyService_SubmitTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/trading.proto",
}

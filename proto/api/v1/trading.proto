syntax = "proto3";

option go_package = "code.vegaprotocol.io/data-node/proto/api/v1";

import "commands/v1/commands.proto";
import "commands/v1/transaction.proto";

package api.v1;

service TradingProxyService {
    // Submit a signed transaction
    rpc SubmitTransaction(SubmitTransactionRequest) returns (SubmitTransactionResponse);
}

// Request for submitting a transaction V2 on Vega
message SubmitTransactionRequest {
    // Blockchain transaction type
    enum Type {
        TYPE_UNSPECIFIED = 0;
        // The transaction will be submitted without waiting for response
        TYPE_ASYNC = 1;
        // The transaction will be submitted, and blocking until the
        // tendermint mempool return a response
        TYPE_SYNC = 2;
        // The transaction will submitted, and blocking until the tendermint
        // network will have committed it into a block
        TYPE_COMMIT = 3;
    }

    // A bundle of signed payload and signature, to form a transaction that will be submitted to the Vega blockchain
    vega.commands.v1.Transaction tx = 1;
    // Type of transaction request, for example ASYNC, meaning the transaction will be submitted and not block on a response
    Type type = 2;
}
  
// Response for submitting a transaction V2 on Vega
message SubmitTransactionResponse {
    // Success will be true if the transaction was accepted by the node,
    // **Important** - success does not mean that the event is confirmed by consensus
    bool success = 1;
}

// Request for preparing a withdrawal
message PrepareWithdrawRequest {
    // An asset withdrawal
    vega.commands.v1.WithdrawSubmission withdraw = 1;
}
// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/data-node/sqlsubscribers (interfaces: BlockStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "code.vegaprotocol.io/data-node/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockBlockStore is a mock of BlockStore interface.
type MockBlockStore struct {
	ctrl     *gomock.Controller
	recorder *MockBlockStoreMockRecorder
}

// MockBlockStoreMockRecorder is the mock recorder for MockBlockStore.
type MockBlockStoreMockRecorder struct {
	mock *MockBlockStore
}

// NewMockBlockStore creates a new mock instance.
func NewMockBlockStore(ctrl *gomock.Controller) *MockBlockStore {
	mock := &MockBlockStore{ctrl: ctrl}
	mock.recorder = &MockBlockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockStore) EXPECT() *MockBlockStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBlockStore) Add(arg0 entities.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockBlockStoreMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBlockStore)(nil).Add), arg0)
}

// WaitForBlockHeight mocks base method.
func (m *MockBlockStore) WaitForBlockHeight(arg0 int64) (entities.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForBlockHeight", arg0)
	ret0, _ := ret[0].(entities.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForBlockHeight indicates an expected call of WaitForBlockHeight.
func (mr *MockBlockStoreMockRecorder) WaitForBlockHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForBlockHeight", reflect.TypeOf((*MockBlockStore)(nil).WaitForBlockHeight), arg0)
}
